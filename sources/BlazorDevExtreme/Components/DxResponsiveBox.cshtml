@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxResponsiveBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxResponsiveBox() : base("DxResponsiveBox") { }
	protected override DevExpress.Ui.DxResponsiveBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxResponsiveBoxOptions {
			cols = cols,
			height = height,
			rows = rows,
			screenByWidth = screenByWidth,
			singleColumnScreen = singleColumnScreen,
			width = width,
		};
	}
	protected override Task Init(DevExpress.Ui.DxResponsiveBoxOptions options) {
return 		DevExpress.Ui.DxResponsiveBoxInterop.Init(dxTarget, options);
	}
	object cols;
	[Parameter]
	object Cols {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetCols(dxTarget).Result : cols;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetCols(dxTarget, value);
			} else {
				this.cols = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object rows;
	[Parameter]
	object Rows {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetRows(dxTarget).Result : rows;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetRows(dxTarget, value);
			} else {
				this.rows = value;
			}
		}
	}
	object screenByWidth;
	[Parameter]
	object ScreenByWidth {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetScreenByWidth(dxTarget).Result : screenByWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetScreenByWidth(dxTarget, value);
			} else {
				this.screenByWidth = value;
			}
		}
	}
	string singleColumnScreen;
	[Parameter]
	string SingleColumnScreen {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetSingleColumnScreen(dxTarget).Result : singleColumnScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetSingleColumnScreen(dxTarget, value);
			} else {
				this.singleColumnScreen = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxResponsiveBoxInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResponsiveBoxInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
