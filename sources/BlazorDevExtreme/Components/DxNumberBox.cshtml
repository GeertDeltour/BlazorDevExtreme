@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxNumberBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxNumberBox() : base("DxNumberBox") { }
	protected override DevExpress.Ui.DxNumberBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxNumberBoxOptions {
			format = format,
			invalidValueMessage = invalidValueMessage,
			max = max,
			min = min,
			mode = mode,
			showSpinButtons = showSpinButtons,
			step = step,
			useLargeSpinButtons = useLargeSpinButtons,
			value = value,
		};
	}
	protected override Task Init(DevExpress.Ui.DxNumberBoxOptions options) {
return 		DevExpress.Ui.DxNumberBoxInterop.Init(dxTarget, options);
	}
	object format;
	[Parameter]
	object Format {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetFormat(dxTarget).Result : format;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetFormat(dxTarget, value);
			} else {
				this.format = value;
			}
		}
	}
	string invalidValueMessage;
	[Parameter]
	string InvalidValueMessage {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetInvalidValueMessage(dxTarget).Result : invalidValueMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetInvalidValueMessage(dxTarget, value);
			} else {
				this.invalidValueMessage = value;
			}
		}
	}
	float? max;
	[Parameter]
	float? Max {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetMax(dxTarget).Result : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetMax(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	float? min;
	[Parameter]
	float? Min {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetMin(dxTarget).Result : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetMin(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string mode;
	[Parameter]
	string Mode {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetMode(dxTarget).Result : mode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetMode(dxTarget, value);
			} else {
				this.mode = value;
			}
		}
	}
	bool? showSpinButtons;
	[Parameter]
	bool? ShowSpinButtons {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetShowSpinButtons(dxTarget).Result : showSpinButtons;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetShowSpinButtons(dxTarget, value);
			} else {
				this.showSpinButtons = value;
			}
		}
	}
	float? step;
	[Parameter]
	float? Step {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetStep(dxTarget).Result : step;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetStep(dxTarget, value);
			} else {
				this.step = value;
			}
		}
	}
	bool? useLargeSpinButtons;
	[Parameter]
	bool? UseLargeSpinButtons {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetUseLargeSpinButtons(dxTarget).Result : useLargeSpinButtons;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetUseLargeSpinButtons(dxTarget, value);
			} else {
				this.useLargeSpinButtons = value;
			}
		}
	}
	float? value;
	[Parameter]
	float? Value {
		get => isInitialized ? DevExpress.Ui.DxNumberBoxInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxNumberBoxInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
