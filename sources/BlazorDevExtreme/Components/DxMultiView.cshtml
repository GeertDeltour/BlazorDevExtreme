@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxMultiViewOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxMultiView() : base("DxMultiView") { }
	protected override DevExpress.Ui.DxMultiViewOptions CreateOptions() {
		return new DevExpress.Ui.DxMultiViewOptions {
			animationEnabled = animationEnabled,
			deferRendering = deferRendering,
			focusStateEnabled = focusStateEnabled,
			loop = loop,
			selectedIndex = selectedIndex,
			swipeEnabled = swipeEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxMultiViewOptions options) {
		DevExpress.Ui.DxMultiViewInterop.Init(dxTarget, options);
	}
	bool? animationEnabled;
	[Parameter]
	bool? AnimationEnabled {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetAnimationEnabled(dxTarget) : animationEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetAnimationEnabled(dxTarget, value);
			} else {
				this.animationEnabled = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetDeferRendering(dxTarget) : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetDeferRendering(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? loop;
	[Parameter]
	bool? Loop {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetLoop(dxTarget) : loop;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetLoop(dxTarget, value);
			} else {
				this.loop = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetSelectedIndex(dxTarget) : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	bool? swipeEnabled;
	[Parameter]
	bool? SwipeEnabled {
		get => isInitialized ? DevExpress.Ui.DxMultiViewInterop.GetSwipeEnabled(dxTarget) : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMultiViewInterop.SetSwipeEnabled(dxTarget, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
