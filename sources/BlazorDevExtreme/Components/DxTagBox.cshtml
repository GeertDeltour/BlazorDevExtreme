@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxTagBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTagBox() : base("DxTagBox") { }
	protected override DevExpress.Ui.DxTagBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxTagBoxOptions {
			applyValueMode = applyValueMode,
			hideSelectedItems = hideSelectedItems,
			maxDisplayedTags = maxDisplayedTags,
			multiline = multiline,
			selectAllMode = selectAllMode,
			selectedItems = selectedItems,
			showMultiTagOnly = showMultiTagOnly,
			tagTemplate = tagTemplate,
			value = value,
			onMultiTagPreparingEnabled = onMultiTagPreparingEnabled,
			onSelectAllValueChangedEnabled = onSelectAllValueChangedEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxTagBoxOptions options) {
		DevExpress.Ui.DxTagBoxInterop.Init(dxTarget, options);
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetApplyValueMode(dxTarget) : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetApplyValueMode(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	bool? hideSelectedItems;
	[Parameter]
	bool? HideSelectedItems {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetHideSelectedItems(dxTarget) : hideSelectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetHideSelectedItems(dxTarget, value);
			} else {
				this.hideSelectedItems = value;
			}
		}
	}
	float? maxDisplayedTags;
	[Parameter]
	float? MaxDisplayedTags {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetMaxDisplayedTags(dxTarget) : maxDisplayedTags;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMaxDisplayedTags(dxTarget, value);
			} else {
				this.maxDisplayedTags = value;
			}
		}
	}
	bool? multiline;
	[Parameter]
	bool? Multiline {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetMultiline(dxTarget) : multiline;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetMultiline(dxTarget, value);
			} else {
				this.multiline = value;
			}
		}
	}
	string selectAllMode;
	[Parameter]
	string SelectAllMode {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetSelectAllMode(dxTarget) : selectAllMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSelectAllMode(dxTarget, value);
			} else {
				this.selectAllMode = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetSelectedItems(dxTarget) : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetSelectedItems(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	bool? showMultiTagOnly;
	[Parameter]
	bool? ShowMultiTagOnly {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetShowMultiTagOnly(dxTarget) : showMultiTagOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetShowMultiTagOnly(dxTarget, value);
			} else {
				this.showMultiTagOnly = value;
			}
		}
	}
	object tagTemplate;
	[Parameter]
	object TagTemplate {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetTagTemplate(dxTarget) : tagTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetTagTemplate(dxTarget, value);
			} else {
				this.tagTemplate = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxTagBoxInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTagBoxInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onMultiTagPreparingEnabled;
	[Parameter]
	bool? OnMultiTagPreparingEnabled {
		get => onMultiTagPreparingEnabled;
		set => this.onMultiTagPreparingEnabled = value;
	}
	bool? onSelectAllValueChangedEnabled;
	[Parameter]
	bool? OnSelectAllValueChangedEnabled {
		get => onSelectAllValueChangedEnabled;
		set => this.onSelectAllValueChangedEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxTagBoxInterop.MultiTagPreparing += DxTagBox_MultiTagPreparing;
		DevExpress.Ui.DxTagBoxInterop.SelectAllValueChanged += DxTagBox_SelectAllValueChanged;
		DevExpress.Ui.DxTagBoxInterop.SelectionChanged += DxTagBox_SelectionChanged;
	}
	[Parameter]
	Action MultiTagPreparing { get; set; }
	void DxTagBox_MultiTagPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			MultiTagPreparing?.Invoke();
		}
	}
	[Parameter]
	Action SelectAllValueChanged { get; set; }
	void DxTagBox_SelectAllValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectAllValueChanged?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxTagBox_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxTagBoxInterop.MultiTagPreparing -= DxTagBox_MultiTagPreparing;
		DevExpress.Ui.DxTagBoxInterop.SelectAllValueChanged -= DxTagBox_SelectAllValueChanged;
		DevExpress.Ui.DxTagBoxInterop.SelectionChanged -= DxTagBox_SelectionChanged;
	}
}
