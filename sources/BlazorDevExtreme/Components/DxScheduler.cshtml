@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxSchedulerOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxScheduler() : base("DxScheduler") { }
	protected override DevExpress.Ui.DxSchedulerOptions CreateOptions() {
		return new DevExpress.Ui.DxSchedulerOptions {
			allDayExpr = allDayExpr,
			appointmentTemplate = appointmentTemplate,
			appointmentTooltipTemplate = appointmentTooltipTemplate,
			cellDuration = cellDuration,
			crossScrollingEnabled = crossScrollingEnabled,
			currentDate = currentDate,
			currentView = currentView,
			dataCellTemplate = dataCellTemplate,
			dataSource = dataSource,
			dateCellTemplate = dateCellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			descriptionExpr = descriptionExpr,
			dropDownAppointmentTemplate = dropDownAppointmentTemplate,
			editing = editing,
			endDateExpr = endDateExpr,
			endDateTimeZoneExpr = endDateTimeZoneExpr,
			endDayHour = endDayHour,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			groups = groups,
			indicatorUpdateInterval = indicatorUpdateInterval,
			max = max,
			maxAppointmentsPerCell = maxAppointmentsPerCell,
			min = min,
			noDataText = noDataText,
			recurrenceEditMode = recurrenceEditMode,
			recurrenceExceptionExpr = recurrenceExceptionExpr,
			recurrenceRuleExpr = recurrenceRuleExpr,
			remoteFiltering = remoteFiltering,
			resourceCellTemplate = resourceCellTemplate,
			resources = resources,
			selectedCellData = selectedCellData,
			shadeUntilCurrentTime = shadeUntilCurrentTime,
			showAllDayPanel = showAllDayPanel,
			showCurrentTimeIndicator = showCurrentTimeIndicator,
			startDateExpr = startDateExpr,
			startDateTimeZoneExpr = startDateTimeZoneExpr,
			startDayHour = startDayHour,
			textExpr = textExpr,
			timeCellTemplate = timeCellTemplate,
			timeZone = timeZone,
			useDropDownViewSwitcher = useDropDownViewSwitcher,
			views = views,
			onAppointmentAddedEnabled = onAppointmentAddedEnabled,
			onAppointmentAddingEnabled = onAppointmentAddingEnabled,
			onAppointmentClickEnabled = onAppointmentClickEnabled,
			onAppointmentContextMenuEnabled = onAppointmentContextMenuEnabled,
			onAppointmentDblClickEnabled = onAppointmentDblClickEnabled,
			onAppointmentDeletedEnabled = onAppointmentDeletedEnabled,
			onAppointmentDeletingEnabled = onAppointmentDeletingEnabled,
			onAppointmentFormCreatedEnabled = onAppointmentFormCreatedEnabled,
			onAppointmentRenderedEnabled = onAppointmentRenderedEnabled,
			onAppointmentUpdatedEnabled = onAppointmentUpdatedEnabled,
			onAppointmentUpdatingEnabled = onAppointmentUpdatingEnabled,
			onCellClickEnabled = onCellClickEnabled,
			onCellContextMenuEnabled = onCellContextMenuEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxSchedulerOptions options) {
		DevExpress.Ui.DxSchedulerInterop.Init(dxTarget, options);
	}
	string allDayExpr;
	[Parameter]
	string AllDayExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAllDayExpr(dxTarget) : allDayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAllDayExpr(dxTarget, value);
			} else {
				this.allDayExpr = value;
			}
		}
	}
	object appointmentTemplate;
	[Parameter]
	object AppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTemplate(dxTarget) : appointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTemplate(dxTarget, value);
			} else {
				this.appointmentTemplate = value;
			}
		}
	}
	object appointmentTooltipTemplate;
	[Parameter]
	object AppointmentTooltipTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTooltipTemplate(dxTarget) : appointmentTooltipTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTooltipTemplate(dxTarget, value);
			} else {
				this.appointmentTooltipTemplate = value;
			}
		}
	}
	float? cellDuration;
	[Parameter]
	float? CellDuration {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCellDuration(dxTarget) : cellDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCellDuration(dxTarget, value);
			} else {
				this.cellDuration = value;
			}
		}
	}
	bool? crossScrollingEnabled;
	[Parameter]
	bool? CrossScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCrossScrollingEnabled(dxTarget) : crossScrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCrossScrollingEnabled(dxTarget, value);
			} else {
				this.crossScrollingEnabled = value;
			}
		}
	}
	object currentDate;
	[Parameter]
	object CurrentDate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCurrentDate(dxTarget) : currentDate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentDate(dxTarget, value);
			} else {
				this.currentDate = value;
			}
		}
	}
	string currentView;
	[Parameter]
	string CurrentView {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCurrentView(dxTarget) : currentView;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentView(dxTarget, value);
			} else {
				this.currentView = value;
			}
		}
	}
	object dataCellTemplate;
	[Parameter]
	object DataCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataCellTemplate(dxTarget) : dataCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataCellTemplate(dxTarget, value);
			} else {
				this.dataCellTemplate = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataSource(dxTarget) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object dateCellTemplate;
	[Parameter]
	object DateCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDateCellTemplate(dxTarget) : dateCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateCellTemplate(dxTarget, value);
			} else {
				this.dateCellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDateSerializationFormat(dxTarget) : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateSerializationFormat(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	string descriptionExpr;
	[Parameter]
	string DescriptionExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDescriptionExpr(dxTarget) : descriptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDescriptionExpr(dxTarget, value);
			} else {
				this.descriptionExpr = value;
			}
		}
	}
	object dropDownAppointmentTemplate;
	[Parameter]
	object DropDownAppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDropDownAppointmentTemplate(dxTarget) : dropDownAppointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDropDownAppointmentTemplate(dxTarget, value);
			} else {
				this.dropDownAppointmentTemplate = value;
			}
		}
	}
	object editing;
	[Parameter]
	object Editing {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEditing(dxTarget) : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEditing(dxTarget, value);
			} else {
				this.editing = value;
			}
		}
	}
	string endDateExpr;
	[Parameter]
	string EndDateExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDateExpr(dxTarget) : endDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateExpr(dxTarget, value);
			} else {
				this.endDateExpr = value;
			}
		}
	}
	string endDateTimeZoneExpr;
	[Parameter]
	string EndDateTimeZoneExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDateTimeZoneExpr(dxTarget) : endDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateTimeZoneExpr(dxTarget, value);
			} else {
				this.endDateTimeZoneExpr = value;
			}
		}
	}
	float? endDayHour;
	[Parameter]
	float? EndDayHour {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDayHour(dxTarget) : endDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDayHour(dxTarget, value);
			} else {
				this.endDayHour = value;
			}
		}
	}
	object firstDayOfWeek;
	[Parameter]
	object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetFirstDayOfWeek(dxTarget) : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFirstDayOfWeek(dxTarget, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	object groups;
	[Parameter]
	object Groups {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetGroups(dxTarget) : groups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetGroups(dxTarget, value);
			} else {
				this.groups = value;
			}
		}
	}
	float? indicatorUpdateInterval;
	[Parameter]
	float? IndicatorUpdateInterval {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetIndicatorUpdateInterval(dxTarget) : indicatorUpdateInterval;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetIndicatorUpdateInterval(dxTarget, value);
			} else {
				this.indicatorUpdateInterval = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMax(dxTarget) : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMax(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	object maxAppointmentsPerCell;
	[Parameter]
	object MaxAppointmentsPerCell {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMaxAppointmentsPerCell(dxTarget) : maxAppointmentsPerCell;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMaxAppointmentsPerCell(dxTarget, value);
			} else {
				this.maxAppointmentsPerCell = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMin(dxTarget) : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMin(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetNoDataText(dxTarget) : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetNoDataText(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	string recurrenceEditMode;
	[Parameter]
	string RecurrenceEditMode {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceEditMode(dxTarget) : recurrenceEditMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceEditMode(dxTarget, value);
			} else {
				this.recurrenceEditMode = value;
			}
		}
	}
	string recurrenceExceptionExpr;
	[Parameter]
	string RecurrenceExceptionExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceExceptionExpr(dxTarget) : recurrenceExceptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceExceptionExpr(dxTarget, value);
			} else {
				this.recurrenceExceptionExpr = value;
			}
		}
	}
	string recurrenceRuleExpr;
	[Parameter]
	string RecurrenceRuleExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceRuleExpr(dxTarget) : recurrenceRuleExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceRuleExpr(dxTarget, value);
			} else {
				this.recurrenceRuleExpr = value;
			}
		}
	}
	bool? remoteFiltering;
	[Parameter]
	bool? RemoteFiltering {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRemoteFiltering(dxTarget) : remoteFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRemoteFiltering(dxTarget, value);
			} else {
				this.remoteFiltering = value;
			}
		}
	}
	object resourceCellTemplate;
	[Parameter]
	object ResourceCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResourceCellTemplate(dxTarget) : resourceCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResourceCellTemplate(dxTarget, value);
			} else {
				this.resourceCellTemplate = value;
			}
		}
	}
	object resources;
	[Parameter]
	object Resources {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResources(dxTarget) : resources;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResources(dxTarget, value);
			} else {
				this.resources = value;
			}
		}
	}
	object selectedCellData;
	[Parameter]
	object SelectedCellData {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetSelectedCellData(dxTarget) : selectedCellData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetSelectedCellData(dxTarget, value);
			} else {
				this.selectedCellData = value;
			}
		}
	}
	bool? shadeUntilCurrentTime;
	[Parameter]
	bool? ShadeUntilCurrentTime {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShadeUntilCurrentTime(dxTarget) : shadeUntilCurrentTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShadeUntilCurrentTime(dxTarget, value);
			} else {
				this.shadeUntilCurrentTime = value;
			}
		}
	}
	bool? showAllDayPanel;
	[Parameter]
	bool? ShowAllDayPanel {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShowAllDayPanel(dxTarget) : showAllDayPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowAllDayPanel(dxTarget, value);
			} else {
				this.showAllDayPanel = value;
			}
		}
	}
	bool? showCurrentTimeIndicator;
	[Parameter]
	bool? ShowCurrentTimeIndicator {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShowCurrentTimeIndicator(dxTarget) : showCurrentTimeIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowCurrentTimeIndicator(dxTarget, value);
			} else {
				this.showCurrentTimeIndicator = value;
			}
		}
	}
	string startDateExpr;
	[Parameter]
	string StartDateExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDateExpr(dxTarget) : startDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateExpr(dxTarget, value);
			} else {
				this.startDateExpr = value;
			}
		}
	}
	string startDateTimeZoneExpr;
	[Parameter]
	string StartDateTimeZoneExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDateTimeZoneExpr(dxTarget) : startDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateTimeZoneExpr(dxTarget, value);
			} else {
				this.startDateTimeZoneExpr = value;
			}
		}
	}
	float? startDayHour;
	[Parameter]
	float? StartDayHour {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDayHour(dxTarget) : startDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDayHour(dxTarget, value);
			} else {
				this.startDayHour = value;
			}
		}
	}
	string textExpr;
	[Parameter]
	string TextExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTextExpr(dxTarget) : textExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTextExpr(dxTarget, value);
			} else {
				this.textExpr = value;
			}
		}
	}
	object timeCellTemplate;
	[Parameter]
	object TimeCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTimeCellTemplate(dxTarget) : timeCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeCellTemplate(dxTarget, value);
			} else {
				this.timeCellTemplate = value;
			}
		}
	}
	string timeZone;
	[Parameter]
	string TimeZone {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTimeZone(dxTarget) : timeZone;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeZone(dxTarget, value);
			} else {
				this.timeZone = value;
			}
		}
	}
	bool? useDropDownViewSwitcher;
	[Parameter]
	bool? UseDropDownViewSwitcher {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetUseDropDownViewSwitcher(dxTarget) : useDropDownViewSwitcher;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetUseDropDownViewSwitcher(dxTarget, value);
			} else {
				this.useDropDownViewSwitcher = value;
			}
		}
	}
	object views;
	[Parameter]
	object Views {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetViews(dxTarget) : views;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetViews(dxTarget, value);
			} else {
				this.views = value;
			}
		}
	}
	bool? onAppointmentAddedEnabled;
	[Parameter]
	bool? OnAppointmentAddedEnabled {
		get => onAppointmentAddedEnabled;
		set => this.onAppointmentAddedEnabled = value;
	}
	bool? onAppointmentAddingEnabled;
	[Parameter]
	bool? OnAppointmentAddingEnabled {
		get => onAppointmentAddingEnabled;
		set => this.onAppointmentAddingEnabled = value;
	}
	bool? onAppointmentClickEnabled;
	[Parameter]
	bool? OnAppointmentClickEnabled {
		get => onAppointmentClickEnabled;
		set => this.onAppointmentClickEnabled = value;
	}
	bool? onAppointmentContextMenuEnabled;
	[Parameter]
	bool? OnAppointmentContextMenuEnabled {
		get => onAppointmentContextMenuEnabled;
		set => this.onAppointmentContextMenuEnabled = value;
	}
	bool? onAppointmentDblClickEnabled;
	[Parameter]
	bool? OnAppointmentDblClickEnabled {
		get => onAppointmentDblClickEnabled;
		set => this.onAppointmentDblClickEnabled = value;
	}
	bool? onAppointmentDeletedEnabled;
	[Parameter]
	bool? OnAppointmentDeletedEnabled {
		get => onAppointmentDeletedEnabled;
		set => this.onAppointmentDeletedEnabled = value;
	}
	bool? onAppointmentDeletingEnabled;
	[Parameter]
	bool? OnAppointmentDeletingEnabled {
		get => onAppointmentDeletingEnabled;
		set => this.onAppointmentDeletingEnabled = value;
	}
	bool? onAppointmentFormCreatedEnabled;
	[Parameter]
	bool? OnAppointmentFormCreatedEnabled {
		get => onAppointmentFormCreatedEnabled;
		set => this.onAppointmentFormCreatedEnabled = value;
	}
	bool? onAppointmentRenderedEnabled;
	[Parameter]
	bool? OnAppointmentRenderedEnabled {
		get => onAppointmentRenderedEnabled;
		set => this.onAppointmentRenderedEnabled = value;
	}
	bool? onAppointmentUpdatedEnabled;
	[Parameter]
	bool? OnAppointmentUpdatedEnabled {
		get => onAppointmentUpdatedEnabled;
		set => this.onAppointmentUpdatedEnabled = value;
	}
	bool? onAppointmentUpdatingEnabled;
	[Parameter]
	bool? OnAppointmentUpdatingEnabled {
		get => onAppointmentUpdatingEnabled;
		set => this.onAppointmentUpdatingEnabled = value;
	}
	bool? onCellClickEnabled;
	[Parameter]
	bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellContextMenuEnabled;
	[Parameter]
	bool? OnCellContextMenuEnabled {
		get => onCellContextMenuEnabled;
		set => this.onCellContextMenuEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded += DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding += DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick += DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu += DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick += DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted += DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting += DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated += DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered += DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated += DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating += DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick += DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu += DxScheduler_CellContextMenu;
	}
	[Parameter]
	Action AppointmentAdded { get; set; }
	void DxScheduler_AppointmentAdded(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdded?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentAdding { get; set; }
	void DxScheduler_AppointmentAdding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdding?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentClick { get; set; }
	void DxScheduler_AppointmentClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentClick?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentContextMenu { get; set; }
	void DxScheduler_AppointmentContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDblClick { get; set; }
	void DxScheduler_AppointmentDblClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDblClick?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDeleted { get; set; }
	void DxScheduler_AppointmentDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleted?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentDeleting { get; set; }
	void DxScheduler_AppointmentDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleting?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentFormCreated { get; set; }
	void DxScheduler_AppointmentFormCreated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentFormCreated?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentRendered { get; set; }
	void DxScheduler_AppointmentRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentRendered?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentUpdated { get; set; }
	void DxScheduler_AppointmentUpdated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdated?.Invoke();
		}
	}
	[Parameter]
	Action AppointmentUpdating { get; set; }
	void DxScheduler_AppointmentUpdating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdating?.Invoke();
		}
	}
	[Parameter]
	Action CellClick { get; set; }
	void DxScheduler_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	[Parameter]
	Action CellContextMenu { get; set; }
	void DxScheduler_CellContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellContextMenu?.Invoke();
		}
	}
	public void AddAppointment(object appointment) {
		DevExpress.Ui.DxSchedulerInterop.AddAppointment(dxTarget, appointment);
	}
	public void DeleteAppointment(object appointment) {
		DevExpress.Ui.DxSchedulerInterop.DeleteAppointment(dxTarget, appointment);
	}
	public object GetDataSourceEx() {
		return DevExpress.Ui.DxSchedulerInterop.GetDataSourceEx(dxTarget);
	}
	public object GetEndViewDate() {
		return DevExpress.Ui.DxSchedulerInterop.GetEndViewDate(dxTarget);
	}
	public object GetStartViewDate() {
		return DevExpress.Ui.DxSchedulerInterop.GetStartViewDate(dxTarget);
	}
	public void HideAppointmentPopup(bool saveChanges) {
		DevExpress.Ui.DxSchedulerInterop.HideAppointmentPopup(dxTarget, saveChanges);
	}
	public void HideAppointmentTooltip() {
		DevExpress.Ui.DxSchedulerInterop.HideAppointmentTooltip(dxTarget);
	}
	public void RegisterKeyHandler() {
		DevExpress.Ui.DxSchedulerInterop.RegisterKeyHandler(dxTarget);
	}
	public void ScrollToTime(float hours, float minutes, object date) {
		DevExpress.Ui.DxSchedulerInterop.ScrollToTime(dxTarget, hours, minutes, date);
	}
	public void ShowAppointmentPopup(object appointmentData, bool createNewAppointment, object currentAppointmentData) {
		DevExpress.Ui.DxSchedulerInterop.ShowAppointmentPopup(dxTarget, appointmentData, createNewAppointment, currentAppointmentData);
	}
	public void ShowAppointmentTooltip(object appointmentData, object target, object currentAppointmentData) {
		DevExpress.Ui.DxSchedulerInterop.ShowAppointmentTooltip(dxTarget, appointmentData, target, currentAppointmentData);
	}
	public void UpdateAppointment(object target, object appointment) {
		DevExpress.Ui.DxSchedulerInterop.UpdateAppointment(dxTarget, target, appointment);
	}
	public void Dispose() {
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded -= DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding -= DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick -= DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu -= DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick -= DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted -= DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting -= DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated -= DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered -= DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated -= DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating -= DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick -= DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu -= DxScheduler_CellContextMenu;
	}
}
