@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.RangeSelector.DxRangeSelectorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxRangeSelector() : base("DxRangeSelector") { }
	protected override DevExpress.Viz.RangeSelector.DxRangeSelectorOptions CreateOptions() {
		return new DevExpress.Viz.RangeSelector.DxRangeSelectorOptions {
			background = background,
			behavior = behavior,
			chart = chart,
			containerBackgroundColor = containerBackgroundColor,
			dataSource = dataSource,
			dataSourceField = dataSourceField,
			indent = indent,
			scale = scale,
			selectedRange = selectedRange,
			selectedRangeColor = selectedRangeColor,
			shutter = shutter,
			sliderHandle = sliderHandle,
			sliderMarker = sliderMarker,
			value = value,
			onSelectedRangeChangedEnabled = onSelectedRangeChangedEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Viz.RangeSelector.DxRangeSelectorOptions options) {
		DevExpress.Viz.DxRangeSelectorInterop.Init(dxTarget, options);
	}
	object background;
	[Parameter]
	object Background {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetBackground(dxTarget) : background;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetBackground(dxTarget, value);
			} else {
				this.background = value;
			}
		}
	}
	object behavior;
	[Parameter]
	object Behavior {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetBehavior(dxTarget) : behavior;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetBehavior(dxTarget, value);
			} else {
				this.behavior = value;
			}
		}
	}
	object chart;
	[Parameter]
	object Chart {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetChart(dxTarget) : chart;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetChart(dxTarget, value);
			} else {
				this.chart = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetContainerBackgroundColor(dxTarget) : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetDataSource(dxTarget) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string dataSourceField;
	[Parameter]
	string DataSourceField {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetDataSourceField(dxTarget) : dataSourceField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetDataSourceField(dxTarget, value);
			} else {
				this.dataSourceField = value;
			}
		}
	}
	object indent;
	[Parameter]
	object Indent {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetIndent(dxTarget) : indent;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetIndent(dxTarget, value);
			} else {
				this.indent = value;
			}
		}
	}
	object scale;
	[Parameter]
	object Scale {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetScale(dxTarget) : scale;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetScale(dxTarget, value);
			} else {
				this.scale = value;
			}
		}
	}
	object selectedRange;
	[Parameter]
	object SelectedRange {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSelectedRange(dxTarget) : selectedRange;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSelectedRange(dxTarget, value);
			} else {
				this.selectedRange = value;
			}
		}
	}
	string selectedRangeColor;
	[Parameter]
	string SelectedRangeColor {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSelectedRangeColor(dxTarget) : selectedRangeColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSelectedRangeColor(dxTarget, value);
			} else {
				this.selectedRangeColor = value;
			}
		}
	}
	object shutter;
	[Parameter]
	object Shutter {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetShutter(dxTarget) : shutter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetShutter(dxTarget, value);
			} else {
				this.shutter = value;
			}
		}
	}
	object sliderHandle;
	[Parameter]
	object SliderHandle {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSliderHandle(dxTarget) : sliderHandle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSliderHandle(dxTarget, value);
			} else {
				this.sliderHandle = value;
			}
		}
	}
	object sliderMarker;
	[Parameter]
	object SliderMarker {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetSliderMarker(dxTarget) : sliderMarker;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetSliderMarker(dxTarget, value);
			} else {
				this.sliderMarker = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Viz.DxRangeSelectorInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxRangeSelectorInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onSelectedRangeChangedEnabled;
	[Parameter]
	bool? OnSelectedRangeChangedEnabled {
		get => onSelectedRangeChangedEnabled;
		set => this.onSelectedRangeChangedEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxRangeSelectorInterop.SelectedRangeChanged += DxRangeSelector_SelectedRangeChanged;
		DevExpress.Viz.DxRangeSelectorInterop.ValueChanged += DxRangeSelector_ValueChanged;
	}
	[Parameter]
	Action SelectedRangeChanged { get; set; }
	void DxRangeSelector_SelectedRangeChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectedRangeChanged?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxRangeSelector_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxRangeSelectorInterop.GetDataSourceEx(dxTarget);
	}
	public object GetSelectedRangeEx() {
		return DevExpress.Viz.DxRangeSelectorInterop.GetSelectedRangeEx(dxTarget);
	}
	public object GetValueEx() {
		return DevExpress.Viz.DxRangeSelectorInterop.GetValueEx(dxTarget);
	}
	public void Render() {
		DevExpress.Viz.DxRangeSelectorInterop.Render(dxTarget);
	}
	public void Render(bool skipChartAnimation) {
		DevExpress.Viz.DxRangeSelectorInterop.Render(dxTarget, skipChartAnimation);
	}
	public void SetSelectedRangeEx(object selectedRange) {
		DevExpress.Viz.DxRangeSelectorInterop.SetSelectedRangeEx(dxTarget, selectedRange);
	}
	public void SetValueEx(object value) {
		DevExpress.Viz.DxRangeSelectorInterop.SetValueEx(dxTarget, value);
	}
	public void Dispose() {
		DevExpress.Viz.DxRangeSelectorInterop.SelectedRangeChanged -= DxRangeSelector_SelectedRangeChanged;
		DevExpress.Viz.DxRangeSelectorInterop.ValueChanged -= DxRangeSelector_ValueChanged;
	}
}
