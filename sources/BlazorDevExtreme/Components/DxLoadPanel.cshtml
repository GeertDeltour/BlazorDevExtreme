@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxLoadPanelOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxLoadPanel() : base("DxLoadPanel") { }
	protected override DevExpress.Ui.DxLoadPanelOptions CreateOptions() {
		return new DevExpress.Ui.DxLoadPanelOptions {
			animation = animation,
			delay = delay,
			focusStateEnabled = focusStateEnabled,
			height = height,
			indicatorSrc = indicatorSrc,
			message = message,
			position = position,
			shadingColor = shadingColor,
			showIndicator = showIndicator,
			showPane = showPane,
			width = width,
		};
	}
	protected override Task Init(DevExpress.Ui.DxLoadPanelOptions options) {
return 		DevExpress.Ui.DxLoadPanelInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	float? delay;
	[Parameter]
	float? Delay {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetDelay(dxTarget).Result : delay;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetDelay(dxTarget, value);
			} else {
				this.delay = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	float? height;
	[Parameter]
	float? Height {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	string indicatorSrc;
	[Parameter]
	string IndicatorSrc {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetIndicatorSrc(dxTarget).Result : indicatorSrc;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetIndicatorSrc(dxTarget, value);
			} else {
				this.indicatorSrc = value;
			}
		}
	}
	string message;
	[Parameter]
	string Message {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetMessage(dxTarget).Result : message;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetMessage(dxTarget, value);
			} else {
				this.message = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetPosition(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	string shadingColor;
	[Parameter]
	string ShadingColor {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetShadingColor(dxTarget).Result : shadingColor;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetShadingColor(dxTarget, value);
			} else {
				this.shadingColor = value;
			}
		}
	}
	bool? showIndicator;
	[Parameter]
	bool? ShowIndicator {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetShowIndicator(dxTarget).Result : showIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetShowIndicator(dxTarget, value);
			} else {
				this.showIndicator = value;
			}
		}
	}
	bool? showPane;
	[Parameter]
	bool? ShowPane {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetShowPane(dxTarget).Result : showPane;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetShowPane(dxTarget, value);
			} else {
				this.showPane = value;
			}
		}
	}
	float? width;
	[Parameter]
	float? Width {
		get => isInitialized ? DevExpress.Ui.DxLoadPanelInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLoadPanelInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
