@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.Charts.DxPieChartOptions>

<div id="@Id"></div>

@functions {
	public DxPieChart() : base("DxPieChart") { }
	protected override DevExpress.Viz.Charts.DxPieChartOptions CreateOptions() {
		return new DevExpress.Viz.Charts.DxPieChartOptions {
			adaptiveLayout = adaptiveLayout,
			commonSeriesSettings = commonSeriesSettings,
			diameter = diameter,
			innerRadius = innerRadius,
			legend = legend,
			minDiameter = minDiameter,
			palette = palette,
			resolveLabelOverlapping = resolveLabelOverlapping,
			segmentsDirection = segmentsDirection,
			series = series,
			seriesTemplate = seriesTemplate,
			sizeGroup = sizeGroup,
			startAngle = startAngle,
			type = type,
			onLegendClickEnabled = onLegendClickEnabled,
		};
	}
	protected override void Init(DevExpress.Viz.Charts.DxPieChartOptions options) {
		DevExpress.Viz.DxPieChartInterop.Init(Id, options);
	}
	object adaptiveLayout;
	public object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetAdaptiveLayout(Id) : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetAdaptiveLayout(Id, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object commonSeriesSettings;
	public object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetCommonSeriesSettings(Id) : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetCommonSeriesSettings(Id, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	float? diameter;
	public float? Diameter {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetDiameter(Id) : diameter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetDiameter(Id, value);
			} else {
				this.diameter = value;
			}
		}
	}
	float? innerRadius;
	public float? InnerRadius {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetInnerRadius(Id) : innerRadius;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetInnerRadius(Id, value);
			} else {
				this.innerRadius = value;
			}
		}
	}
	object legend;
	public object Legend {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetLegend(Id) : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetLegend(Id, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? minDiameter;
	public float? MinDiameter {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetMinDiameter(Id) : minDiameter;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetMinDiameter(Id, value);
			} else {
				this.minDiameter = value;
			}
		}
	}
	object palette;
	public object Palette {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetPalette(Id) : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetPalette(Id, value);
			} else {
				this.palette = value;
			}
		}
	}
	string resolveLabelOverlapping;
	public string ResolveLabelOverlapping {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetResolveLabelOverlapping(Id) : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetResolveLabelOverlapping(Id, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	string segmentsDirection;
	public string SegmentsDirection {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSegmentsDirection(Id) : segmentsDirection;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSegmentsDirection(Id, value);
			} else {
				this.segmentsDirection = value;
			}
		}
	}
	object series;
	public object Series {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSeries(Id) : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSeries(Id, value);
			} else {
				this.series = value;
			}
		}
	}
	object seriesTemplate;
	public object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSeriesTemplate(Id) : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSeriesTemplate(Id, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	string sizeGroup;
	public string SizeGroup {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetSizeGroup(Id) : sizeGroup;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetSizeGroup(Id, value);
			} else {
				this.sizeGroup = value;
			}
		}
	}
	float? startAngle;
	public float? StartAngle {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetStartAngle(Id) : startAngle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetStartAngle(Id, value);
			} else {
				this.startAngle = value;
			}
		}
	}
	string type;
	public string Type {
		get => isInitialized ? DevExpress.Viz.DxPieChartInterop.GetType(Id) : type;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPieChartInterop.SetType(Id, value);
			} else {
				this.type = value;
			}
		}
	}
	bool? onLegendClickEnabled;
	public bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxPieChartInterop.LegendClick += DxPieChart_LegendClick;
	}
	public Action LegendClick { get; set; }
	void DxPieChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	public object GetSeriesEx() {
		return DevExpress.Viz.DxPieChartInterop.GetSeriesEx(Id);
	}
	public object GetSeriesByName(object seriesName) {
		return DevExpress.Viz.DxPieChartInterop.GetSeriesByName(Id, seriesName);
	}
	public object GetSeriesByPos(float seriesIndex) {
		return DevExpress.Viz.DxPieChartInterop.GetSeriesByPos(Id, seriesIndex);
	}
	public void Dispose() {
		DevExpress.Viz.DxPieChartInterop.LegendClick -= DxPieChart_LegendClick;
	}
}
