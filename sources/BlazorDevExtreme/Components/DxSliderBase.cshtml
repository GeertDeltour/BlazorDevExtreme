@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxSliderBaseOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSliderBase() : base("DxSliderBase") { }
	protected override DevExpress.Ui.DxSliderBaseOptions CreateOptions() {
		return new DevExpress.Ui.DxSliderBaseOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			keyStep = keyStep,
			label = label,
			name = name,
			showRange = showRange,
			step = step,
			tooltip = tooltip,
		};
	}
	protected override void Init(DevExpress.Ui.DxSliderBaseOptions options) {
		DevExpress.Ui.DxSliderBaseInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetActiveStateEnabled(dxTarget) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetHoverStateEnabled(dxTarget) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? keyStep;
	[Parameter]
	float? KeyStep {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetKeyStep(dxTarget) : keyStep;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetKeyStep(dxTarget, value);
			} else {
				this.keyStep = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetLabel(dxTarget) : label;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetLabel(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetName(dxTarget) : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetName(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showRange;
	[Parameter]
	bool? ShowRange {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetShowRange(dxTarget) : showRange;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetShowRange(dxTarget, value);
			} else {
				this.showRange = value;
			}
		}
	}
	float? step;
	[Parameter]
	float? Step {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetStep(dxTarget) : step;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetStep(dxTarget, value);
			} else {
				this.step = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Ui.DxSliderBaseInterop.GetTooltip(dxTarget) : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSliderBaseInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
