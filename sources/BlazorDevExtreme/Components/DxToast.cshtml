@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxToastOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxToast() : base("DxToast") { }
	protected override DevExpress.Ui.DxToastOptions CreateOptions() {
		return new DevExpress.Ui.DxToastOptions {
			animation = animation,
			closeOnBackButton = closeOnBackButton,
			closeOnClick = closeOnClick,
			closeOnOutsideClick = closeOnOutsideClick,
			closeOnSwipe = closeOnSwipe,
			displayTime = displayTime,
			height = height,
			maxWidth = maxWidth,
			message = message,
			minWidth = minWidth,
			position = position,
			shading = shading,
			type = type,
			width = width,
		};
	}
	protected override void Init(DevExpress.Ui.DxToastOptions options) {
		DevExpress.Ui.DxToastInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	bool? closeOnBackButton;
	[Parameter]
	bool? CloseOnBackButton {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnBackButton(dxTarget) : closeOnBackButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnBackButton(dxTarget, value);
			} else {
				this.closeOnBackButton = value;
			}
		}
	}
	bool? closeOnClick;
	[Parameter]
	bool? CloseOnClick {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnClick(dxTarget) : closeOnClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnClick(dxTarget, value);
			} else {
				this.closeOnClick = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnOutsideClick(dxTarget) : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnOutsideClick(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	bool? closeOnSwipe;
	[Parameter]
	bool? CloseOnSwipe {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnSwipe(dxTarget) : closeOnSwipe;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnSwipe(dxTarget, value);
			} else {
				this.closeOnSwipe = value;
			}
		}
	}
	float? displayTime;
	[Parameter]
	float? DisplayTime {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetDisplayTime(dxTarget) : displayTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDisplayTime(dxTarget, value);
			} else {
				this.displayTime = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetHeight(dxTarget) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object maxWidth;
	[Parameter]
	object MaxWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMaxWidth(dxTarget) : maxWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMaxWidth(dxTarget, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	string message;
	[Parameter]
	string Message {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMessage(dxTarget) : message;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMessage(dxTarget, value);
			} else {
				this.message = value;
			}
		}
	}
	object minWidth;
	[Parameter]
	object MinWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMinWidth(dxTarget) : minWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMinWidth(dxTarget, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetPosition(dxTarget) : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetShading(dxTarget) : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetShading(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetType(dxTarget) : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetType(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetWidth(dxTarget) : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
