@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Gauges.BaseGaugeOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public BaseGauge() : base("BaseGauge") { }
	protected override DevExpress.Viz.Gauges.BaseGaugeOptions CreateOptions() {
		return new DevExpress.Viz.Gauges.BaseGaugeOptions {
			animation = animation,
			containerBackgroundColor = containerBackgroundColor,
			rangeContainer = rangeContainer,
			scale = scale,
			subtitle = subtitle,
			subvalues = subvalues,
			title = title,
			tooltip = tooltip,
			value = value,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Gauges.BaseGaugeOptions options) {
return 		DevExpress.Viz.BaseGaugeInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetContainerBackgroundColor(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object rangeContainer;
	[Parameter]
	object RangeContainer {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetRangeContainer(dxTarget).Result : rangeContainer;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetRangeContainer(dxTarget, value);
			} else {
				this.rangeContainer = value;
			}
		}
	}
	object scale;
	[Parameter]
	object Scale {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetScale(dxTarget).Result : scale;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetScale(dxTarget, value);
			} else {
				this.scale = value;
			}
		}
	}
	object subtitle;
	[Parameter]
	object Subtitle {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetSubtitle(dxTarget).Result : subtitle;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetSubtitle(dxTarget, value);
			} else {
				this.subtitle = value;
			}
		}
	}
	object subvalues;
	[Parameter]
	object Subvalues {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetSubvalues(dxTarget).Result : subvalues;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetSubvalues(dxTarget, value);
			} else {
				this.subvalues = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	float? value;
	[Parameter]
	float? Value {
		get => isInitialized ? DevExpress.Viz.BaseGaugeInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseGaugeInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.BaseGaugeInterop.TooltipHidden += BaseGauge_TooltipHidden;
		DevExpress.Viz.BaseGaugeInterop.TooltipShown += BaseGauge_TooltipShown;
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void BaseGauge_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void BaseGauge_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	public object SubvaluesEx() {
		return DevExpress.Viz.BaseGaugeInterop.SubvaluesEx(dxTarget).Result;
	}
	public void SubvaluesEx(object subvalues) {
		DevExpress.Viz.BaseGaugeInterop.SubvaluesEx(dxTarget, subvalues);
	}
	public float ValueEx() {
		return DevExpress.Viz.BaseGaugeInterop.ValueEx(dxTarget).Result;
	}
	public void ValueEx(float value) {
		DevExpress.Viz.BaseGaugeInterop.ValueEx(dxTarget, value);
	}
	public void Dispose() {
		DevExpress.Viz.BaseGaugeInterop.TooltipHidden -= BaseGauge_TooltipHidden;
		DevExpress.Viz.BaseGaugeInterop.TooltipShown -= BaseGauge_TooltipShown;
	}
}
