@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Sparklines.DxSparklineOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSparkline() : base("DxSparkline") { }
	protected override DevExpress.Viz.Sparklines.DxSparklineOptions CreateOptions() {
		return new DevExpress.Viz.Sparklines.DxSparklineOptions {
			argumentField = argumentField,
			barNegativeColor = barNegativeColor,
			barPositiveColor = barPositiveColor,
			dataSource = dataSource,
			firstLastColor = firstLastColor,
			ignoreEmptyPoints = ignoreEmptyPoints,
			lineColor = lineColor,
			lineWidth = lineWidth,
			lossColor = lossColor,
			maxColor = maxColor,
			maxValue = maxValue,
			minColor = minColor,
			minValue = minValue,
			pointColor = pointColor,
			pointSize = pointSize,
			pointSymbol = pointSymbol,
			showFirstLast = showFirstLast,
			showMinMax = showMinMax,
			type = type,
			valueField = valueField,
			winColor = winColor,
			winlossThreshold = winlossThreshold,
		};
	}
	protected override Task Init(DevExpress.Viz.Sparklines.DxSparklineOptions options) {
return 		DevExpress.Viz.DxSparklineInterop.Init(dxTarget, options);
	}
	string argumentField;
	[Parameter]
	string ArgumentField {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetArgumentField(dxTarget).Result : argumentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetArgumentField(dxTarget, value);
			} else {
				this.argumentField = value;
			}
		}
	}
	string barNegativeColor;
	[Parameter]
	string BarNegativeColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetBarNegativeColor(dxTarget).Result : barNegativeColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetBarNegativeColor(dxTarget, value);
			} else {
				this.barNegativeColor = value;
			}
		}
	}
	string barPositiveColor;
	[Parameter]
	string BarPositiveColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetBarPositiveColor(dxTarget).Result : barPositiveColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetBarPositiveColor(dxTarget, value);
			} else {
				this.barPositiveColor = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	string firstLastColor;
	[Parameter]
	string FirstLastColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetFirstLastColor(dxTarget).Result : firstLastColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetFirstLastColor(dxTarget, value);
			} else {
				this.firstLastColor = value;
			}
		}
	}
	bool? ignoreEmptyPoints;
	[Parameter]
	bool? IgnoreEmptyPoints {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetIgnoreEmptyPoints(dxTarget).Result : ignoreEmptyPoints;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetIgnoreEmptyPoints(dxTarget, value);
			} else {
				this.ignoreEmptyPoints = value;
			}
		}
	}
	string lineColor;
	[Parameter]
	string LineColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetLineColor(dxTarget).Result : lineColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLineColor(dxTarget, value);
			} else {
				this.lineColor = value;
			}
		}
	}
	float? lineWidth;
	[Parameter]
	float? LineWidth {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetLineWidth(dxTarget).Result : lineWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLineWidth(dxTarget, value);
			} else {
				this.lineWidth = value;
			}
		}
	}
	string lossColor;
	[Parameter]
	string LossColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetLossColor(dxTarget).Result : lossColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetLossColor(dxTarget, value);
			} else {
				this.lossColor = value;
			}
		}
	}
	string maxColor;
	[Parameter]
	string MaxColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetMaxColor(dxTarget).Result : maxColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMaxColor(dxTarget, value);
			} else {
				this.maxColor = value;
			}
		}
	}
	float? maxValue;
	[Parameter]
	float? MaxValue {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetMaxValue(dxTarget).Result : maxValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMaxValue(dxTarget, value);
			} else {
				this.maxValue = value;
			}
		}
	}
	string minColor;
	[Parameter]
	string MinColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetMinColor(dxTarget).Result : minColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMinColor(dxTarget, value);
			} else {
				this.minColor = value;
			}
		}
	}
	float? minValue;
	[Parameter]
	float? MinValue {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetMinValue(dxTarget).Result : minValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetMinValue(dxTarget, value);
			} else {
				this.minValue = value;
			}
		}
	}
	string pointColor;
	[Parameter]
	string PointColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetPointColor(dxTarget).Result : pointColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointColor(dxTarget, value);
			} else {
				this.pointColor = value;
			}
		}
	}
	float? pointSize;
	[Parameter]
	float? PointSize {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetPointSize(dxTarget).Result : pointSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointSize(dxTarget, value);
			} else {
				this.pointSize = value;
			}
		}
	}
	string pointSymbol;
	[Parameter]
	string PointSymbol {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetPointSymbol(dxTarget).Result : pointSymbol;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetPointSymbol(dxTarget, value);
			} else {
				this.pointSymbol = value;
			}
		}
	}
	bool? showFirstLast;
	[Parameter]
	bool? ShowFirstLast {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetShowFirstLast(dxTarget).Result : showFirstLast;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetShowFirstLast(dxTarget, value);
			} else {
				this.showFirstLast = value;
			}
		}
	}
	bool? showMinMax;
	[Parameter]
	bool? ShowMinMax {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetShowMinMax(dxTarget).Result : showMinMax;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetShowMinMax(dxTarget, value);
			} else {
				this.showMinMax = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetType(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetType(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetValueField(dxTarget).Result : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetValueField(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	string winColor;
	[Parameter]
	string WinColor {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetWinColor(dxTarget).Result : winColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetWinColor(dxTarget, value);
			} else {
				this.winColor = value;
			}
		}
	}
	float? winlossThreshold;
	[Parameter]
	float? WinlossThreshold {
		get => isInitialized ? DevExpress.Viz.DxSparklineInterop.GetWinlossThreshold(dxTarget).Result : winlossThreshold;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxSparklineInterop.SetWinlossThreshold(dxTarget, value);
			} else {
				this.winlossThreshold = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxSparklineInterop.GetDataSourceEx(dxTarget).Result;
	}
	public void Dispose() {
	}
}
