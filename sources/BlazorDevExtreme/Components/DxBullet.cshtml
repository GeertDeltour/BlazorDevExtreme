@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.Sparklines.DxBulletOptions>

<div id="@Id"></div>

@functions {
	public DxBullet() : base("DxBullet") { }
	protected override DevExpress.Viz.Sparklines.DxBulletOptions CreateOptions() {
		return new DevExpress.Viz.Sparklines.DxBulletOptions {
			color = color,
			endScaleValue = endScaleValue,
			showTarget = showTarget,
			showZeroLevel = showZeroLevel,
			startScaleValue = startScaleValue,
			target = target,
			targetColor = targetColor,
			targetWidth = targetWidth,
			value = value,
		};
	}
	protected override void Init(DevExpress.Viz.Sparklines.DxBulletOptions options) {
		DevExpress.Viz.DxBulletInterop.Init(Id, options);
	}
	string color;
	public string Color {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetColor(Id) : color;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetColor(Id, value);
			} else {
				this.color = value;
			}
		}
	}
	float? endScaleValue;
	public float? EndScaleValue {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetEndScaleValue(Id) : endScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetEndScaleValue(Id, value);
			} else {
				this.endScaleValue = value;
			}
		}
	}
	bool? showTarget;
	public bool? ShowTarget {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetShowTarget(Id) : showTarget;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowTarget(Id, value);
			} else {
				this.showTarget = value;
			}
		}
	}
	bool? showZeroLevel;
	public bool? ShowZeroLevel {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetShowZeroLevel(Id) : showZeroLevel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowZeroLevel(Id, value);
			} else {
				this.showZeroLevel = value;
			}
		}
	}
	float? startScaleValue;
	public float? StartScaleValue {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetStartScaleValue(Id) : startScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetStartScaleValue(Id, value);
			} else {
				this.startScaleValue = value;
			}
		}
	}
	float? target;
	public float? Target {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTarget(Id) : target;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTarget(Id, value);
			} else {
				this.target = value;
			}
		}
	}
	string targetColor;
	public string TargetColor {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTargetColor(Id) : targetColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetColor(Id, value);
			} else {
				this.targetColor = value;
			}
		}
	}
	float? targetWidth;
	public float? TargetWidth {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTargetWidth(Id) : targetWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetWidth(Id, value);
			} else {
				this.targetWidth = value;
			}
		}
	}
	float? value;
	public float? Value {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetValue(Id) : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetValue(Id, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
