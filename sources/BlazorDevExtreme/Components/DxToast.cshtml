@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxToastOptions>

<div id="@Id"></div>

@functions {
	public DxToast() : base("DxToast") { }
	protected override DevExpress.Ui.DxToastOptions CreateOptions() {
		return new DevExpress.Ui.DxToastOptions {
			animation = animation,
			closeOnBackButton = closeOnBackButton,
			closeOnClick = closeOnClick,
			closeOnOutsideClick = closeOnOutsideClick,
			closeOnSwipe = closeOnSwipe,
			displayTime = displayTime,
			height = height,
			maxWidth = maxWidth,
			message = message,
			minWidth = minWidth,
			position = position,
			shading = shading,
			type = type,
			width = width,
		};
	}
	protected override void Init(DevExpress.Ui.DxToastOptions options) {
		DevExpress.Ui.DxToastInterop.Init(Id, options);
	}
	object animation;
	public object Animation {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetAnimation(Id) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetAnimation(Id, value);
			} else {
				this.animation = value;
			}
		}
	}
	bool? closeOnBackButton;
	public bool? CloseOnBackButton {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnBackButton(Id) : closeOnBackButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnBackButton(Id, value);
			} else {
				this.closeOnBackButton = value;
			}
		}
	}
	bool? closeOnClick;
	public bool? CloseOnClick {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnClick(Id) : closeOnClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnClick(Id, value);
			} else {
				this.closeOnClick = value;
			}
		}
	}
	object closeOnOutsideClick;
	public object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnOutsideClick(Id) : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnOutsideClick(Id, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	bool? closeOnSwipe;
	public bool? CloseOnSwipe {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetCloseOnSwipe(Id) : closeOnSwipe;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetCloseOnSwipe(Id, value);
			} else {
				this.closeOnSwipe = value;
			}
		}
	}
	float? displayTime;
	public float? DisplayTime {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetDisplayTime(Id) : displayTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetDisplayTime(Id, value);
			} else {
				this.displayTime = value;
			}
		}
	}
	object height;
	public object Height {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetHeight(Id) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetHeight(Id, value);
			} else {
				this.height = value;
			}
		}
	}
	object maxWidth;
	public object MaxWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMaxWidth(Id) : maxWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMaxWidth(Id, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	string message;
	public string Message {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMessage(Id) : message;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMessage(Id, value);
			} else {
				this.message = value;
			}
		}
	}
	object minWidth;
	public object MinWidth {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetMinWidth(Id) : minWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetMinWidth(Id, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object position;
	public object Position {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetPosition(Id) : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetPosition(Id, value);
			} else {
				this.position = value;
			}
		}
	}
	bool? shading;
	public bool? Shading {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetShading(Id) : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetShading(Id, value);
			} else {
				this.shading = value;
			}
		}
	}
	string type;
	public string Type {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetType(Id) : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetType(Id, value);
			} else {
				this.type = value;
			}
		}
	}
	object width;
	public object Width {
		get => isInitialized ? DevExpress.Ui.DxToastInterop.GetWidth(Id) : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxToastInterop.SetWidth(Id, value);
			} else {
				this.width = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
