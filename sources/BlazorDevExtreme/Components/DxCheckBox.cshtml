@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxCheckBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxCheckBox() : base("DxCheckBox") { }
	protected override DevExpress.Ui.DxCheckBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxCheckBoxOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			name = name,
			text = text,
			value = value,
		};
	}
	protected override Task Init(DevExpress.Ui.DxCheckBoxOptions options) {
return 		DevExpress.Ui.DxCheckBoxInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetName(dxTarget).Result : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetName(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetText(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetText(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	bool? value;
	[Parameter]
	bool? Value {
		get => isInitialized ? DevExpress.Ui.DxCheckBoxInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCheckBoxInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
