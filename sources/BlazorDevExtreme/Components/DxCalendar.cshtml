@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxCalendarOptions>

<div id="@Id"></div>

@functions {
	public DxCalendar() : base("DxCalendar") { }
	protected override DevExpress.Ui.DxCalendarOptions CreateOptions() {
		return new DevExpress.Ui.DxCalendarOptions {
			activeStateEnabled = activeStateEnabled,
			cellTemplate = cellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			disabledDates = disabledDates,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			max = max,
			maxZoomLevel = maxZoomLevel,
			min = min,
			minZoomLevel = minZoomLevel,
			name = name,
			showTodayButton = showTodayButton,
			value = value,
			zoomLevel = zoomLevel,
		};
	}
	protected override void Init(DevExpress.Ui.DxCalendarOptions options) {
		DevExpress.Ui.DxCalendarInterop.Init(Id, options);
	}
	bool? activeStateEnabled;
	public bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetActiveStateEnabled(Id) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetActiveStateEnabled(Id, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object cellTemplate;
	public object CellTemplate {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetCellTemplate(Id) : cellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetCellTemplate(Id, value);
			} else {
				this.cellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	public string DateSerializationFormat {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetDateSerializationFormat(Id) : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDateSerializationFormat(Id, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	object disabledDates;
	public object DisabledDates {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetDisabledDates(Id) : disabledDates;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDisabledDates(Id, value);
			} else {
				this.disabledDates = value;
			}
		}
	}
	object firstDayOfWeek;
	public object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetFirstDayOfWeek(Id) : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFirstDayOfWeek(Id, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	public bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetHoverStateEnabled(Id) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetHoverStateEnabled(Id, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object max;
	public object Max {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMax(Id) : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMax(Id, value);
			} else {
				this.max = value;
			}
		}
	}
	string maxZoomLevel;
	public string MaxZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMaxZoomLevel(Id) : maxZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMaxZoomLevel(Id, value);
			} else {
				this.maxZoomLevel = value;
			}
		}
	}
	object min;
	public object Min {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMin(Id) : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMin(Id, value);
			} else {
				this.min = value;
			}
		}
	}
	string minZoomLevel;
	public string MinZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMinZoomLevel(Id) : minZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMinZoomLevel(Id, value);
			} else {
				this.minZoomLevel = value;
			}
		}
	}
	string name;
	public string Name {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetName(Id) : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetName(Id, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showTodayButton;
	public bool? ShowTodayButton {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetShowTodayButton(Id) : showTodayButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetShowTodayButton(Id, value);
			} else {
				this.showTodayButton = value;
			}
		}
	}
	object value;
	public object Value {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetValue(Id) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetValue(Id, value);
			} else {
				this.value = value;
			}
		}
	}
	string zoomLevel;
	public string ZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetZoomLevel(Id) : zoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetZoomLevel(Id, value);
			} else {
				this.zoomLevel = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
