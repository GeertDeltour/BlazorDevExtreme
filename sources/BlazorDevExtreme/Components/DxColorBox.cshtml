@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxColorBoxOptions>

<div id="@Id"></div>

@functions {
	public DxColorBox() : base("DxColorBox") { }
	protected override DevExpress.Ui.DxColorBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxColorBoxOptions {
			applyButtonText = applyButtonText,
			applyValueMode = applyValueMode,
			cancelButtonText = cancelButtonText,
			editAlphaChannel = editAlphaChannel,
			fieldTemplate = fieldTemplate,
			keyStep = keyStep,
			value = value,
		};
	}
	protected override void Init(DevExpress.Ui.DxColorBoxOptions options) {
		DevExpress.Ui.DxColorBoxInterop.Init(Id, options);
	}
	string applyButtonText;
	public string ApplyButtonText {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetApplyButtonText(Id) : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetApplyButtonText(Id, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	string applyValueMode;
	public string ApplyValueMode {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetApplyValueMode(Id) : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetApplyValueMode(Id, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	string cancelButtonText;
	public string CancelButtonText {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetCancelButtonText(Id) : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetCancelButtonText(Id, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	bool? editAlphaChannel;
	public bool? EditAlphaChannel {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetEditAlphaChannel(Id) : editAlphaChannel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetEditAlphaChannel(Id, value);
			} else {
				this.editAlphaChannel = value;
			}
		}
	}
	object fieldTemplate;
	public object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetFieldTemplate(Id) : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetFieldTemplate(Id, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	float? keyStep;
	public float? KeyStep {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetKeyStep(Id) : keyStep;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetKeyStep(Id, value);
			} else {
				this.keyStep = value;
			}
		}
	}
	string value;
	public string Value {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetValue(Id) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetValue(Id, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
