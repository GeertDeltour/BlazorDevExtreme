@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxDropDownListOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDropDownList() : base("DxDropDownList") { }
	protected override DevExpress.Ui.DxDropDownListOptions CreateOptions() {
		return new DevExpress.Ui.DxDropDownListOptions {
			displayValue = displayValue,
			grouped = grouped,
			groupTemplate = groupTemplate,
			minSearchLength = minSearchLength,
			noDataText = noDataText,
			searchEnabled = searchEnabled,
			searchExpr = searchExpr,
			searchMode = searchMode,
			searchTimeout = searchTimeout,
			selectedItem = selectedItem,
			showDataBeforeSearch = showDataBeforeSearch,
			value = value,
			valueChangeEvent = valueChangeEvent,
			onItemClickEnabled = onItemClickEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxDropDownListOptions options) {
		DevExpress.Ui.DxDropDownListInterop.Init(dxTarget, options);
	}
	string displayValue;
	[Parameter]
	string DisplayValue {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetDisplayValue(dxTarget) : displayValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetDisplayValue(dxTarget, value);
			} else {
				this.displayValue = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetGrouped(dxTarget) : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetGrouped(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetGroupTemplate(dxTarget) : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetGroupTemplate(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	float? minSearchLength;
	[Parameter]
	float? MinSearchLength {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetMinSearchLength(dxTarget) : minSearchLength;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetMinSearchLength(dxTarget, value);
			} else {
				this.minSearchLength = value;
			}
		}
	}
	string noDataText;
	[Parameter]
	string NoDataText {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetNoDataText(dxTarget) : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetNoDataText(dxTarget, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	bool? searchEnabled;
	[Parameter]
	bool? SearchEnabled {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetSearchEnabled(dxTarget) : searchEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetSearchEnabled(dxTarget, value);
			} else {
				this.searchEnabled = value;
			}
		}
	}
	object searchExpr;
	[Parameter]
	object SearchExpr {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetSearchExpr(dxTarget) : searchExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetSearchExpr(dxTarget, value);
			} else {
				this.searchExpr = value;
			}
		}
	}
	string searchMode;
	[Parameter]
	string SearchMode {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetSearchMode(dxTarget) : searchMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetSearchMode(dxTarget, value);
			} else {
				this.searchMode = value;
			}
		}
	}
	float? searchTimeout;
	[Parameter]
	float? SearchTimeout {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetSearchTimeout(dxTarget) : searchTimeout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetSearchTimeout(dxTarget, value);
			} else {
				this.searchTimeout = value;
			}
		}
	}
	object selectedItem;
	[Parameter]
	object SelectedItem {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetSelectedItem(dxTarget) : selectedItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetSelectedItem(dxTarget, value);
			} else {
				this.selectedItem = value;
			}
		}
	}
	bool? showDataBeforeSearch;
	[Parameter]
	bool? ShowDataBeforeSearch {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetShowDataBeforeSearch(dxTarget) : showDataBeforeSearch;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetShowDataBeforeSearch(dxTarget, value);
			} else {
				this.showDataBeforeSearch = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string valueChangeEvent;
	[Parameter]
	string ValueChangeEvent {
		get => isInitialized ? DevExpress.Ui.DxDropDownListInterop.GetValueChangeEvent(dxTarget) : valueChangeEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownListInterop.SetValueChangeEvent(dxTarget, value);
			} else {
				this.valueChangeEvent = value;
			}
		}
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDropDownListInterop.ItemClick += DxDropDownList_ItemClick;
		DevExpress.Ui.DxDropDownListInterop.SelectionChanged += DxDropDownList_SelectionChanged;
		DevExpress.Ui.DxDropDownListInterop.ValueChanged += DxDropDownList_ValueChanged;
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxDropDownList_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxDropDownList_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxDropDownList_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	public object GetDataSourceEx() {
		return DevExpress.Ui.DxDropDownListInterop.GetDataSourceEx(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxDropDownListInterop.ItemClick -= DxDropDownList_ItemClick;
		DevExpress.Ui.DxDropDownListInterop.SelectionChanged -= DxDropDownList_SelectionChanged;
		DevExpress.Ui.DxDropDownListInterop.ValueChanged -= DxDropDownList_ValueChanged;
	}
}
