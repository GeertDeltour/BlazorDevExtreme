@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxDeferRenderingOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDeferRendering() : base("DxDeferRendering") { }
	protected override DevExpress.Ui.DxDeferRenderingOptions CreateOptions() {
		return new DevExpress.Ui.DxDeferRenderingOptions {
			animation = animation,
			renderWhen = renderWhen,
			showLoadIndicator = showLoadIndicator,
			staggerItemSelector = staggerItemSelector,
			onRenderedEnabled = onRenderedEnabled,
			onShownEnabled = onShownEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxDeferRenderingOptions options) {
		DevExpress.Ui.DxDeferRenderingInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object renderWhen;
	[Parameter]
	object RenderWhen {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetRenderWhen(dxTarget) : renderWhen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetRenderWhen(dxTarget, value);
			} else {
				this.renderWhen = value;
			}
		}
	}
	bool? showLoadIndicator;
	[Parameter]
	bool? ShowLoadIndicator {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetShowLoadIndicator(dxTarget) : showLoadIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetShowLoadIndicator(dxTarget, value);
			} else {
				this.showLoadIndicator = value;
			}
		}
	}
	string staggerItemSelector;
	[Parameter]
	string StaggerItemSelector {
		get => isInitialized ? DevExpress.Ui.DxDeferRenderingInterop.GetStaggerItemSelector(dxTarget) : staggerItemSelector;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDeferRenderingInterop.SetStaggerItemSelector(dxTarget, value);
			} else {
				this.staggerItemSelector = value;
			}
		}
	}
	bool? onRenderedEnabled;
	[Parameter]
	bool? OnRenderedEnabled {
		get => onRenderedEnabled;
		set => this.onRenderedEnabled = value;
	}
	bool? onShownEnabled;
	[Parameter]
	bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDeferRenderingInterop.Rendered += DxDeferRendering_Rendered;
		DevExpress.Ui.DxDeferRenderingInterop.Shown += DxDeferRendering_Shown;
	}
	[Parameter]
	Action Rendered { get; set; }
	void DxDeferRendering_Rendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Rendered?.Invoke();
		}
	}
	[Parameter]
	Action Shown { get; set; }
	void DxDeferRendering_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxDeferRenderingInterop.Rendered -= DxDeferRendering_Rendered;
		DevExpress.Ui.DxDeferRenderingInterop.Shown -= DxDeferRendering_Shown;
	}
}
