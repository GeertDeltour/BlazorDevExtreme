@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTileViewOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTileView() : base("DxTileView") { }
	protected override DevExpress.Ui.DxTileViewOptions CreateOptions() {
		return new DevExpress.Ui.DxTileViewOptions {
			activeStateEnabled = activeStateEnabled,
			baseItemHeight = baseItemHeight,
			baseItemWidth = baseItemWidth,
			direction = direction,
			focusStateEnabled = focusStateEnabled,
			height = height,
			hoverStateEnabled = hoverStateEnabled,
			itemMargin = itemMargin,
			showScrollbar = showScrollbar,
		};
	}
	protected override Task Init(DevExpress.Ui.DxTileViewOptions options) {
return 		DevExpress.Ui.DxTileViewInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	float? baseItemHeight;
	[Parameter]
	float? BaseItemHeight {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetBaseItemHeight(dxTarget).Result : baseItemHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetBaseItemHeight(dxTarget, value);
			} else {
				this.baseItemHeight = value;
			}
		}
	}
	float? baseItemWidth;
	[Parameter]
	float? BaseItemWidth {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetBaseItemWidth(dxTarget).Result : baseItemWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetBaseItemWidth(dxTarget, value);
			} else {
				this.baseItemWidth = value;
			}
		}
	}
	string direction;
	[Parameter]
	string Direction {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetDirection(dxTarget).Result : direction;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetDirection(dxTarget, value);
			} else {
				this.direction = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	float? itemMargin;
	[Parameter]
	float? ItemMargin {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetItemMargin(dxTarget).Result : itemMargin;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetItemMargin(dxTarget, value);
			} else {
				this.itemMargin = value;
			}
		}
	}
	bool? showScrollbar;
	[Parameter]
	bool? ShowScrollbar {
		get => isInitialized ? DevExpress.Ui.DxTileViewInterop.GetShowScrollbar(dxTarget).Result : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTileViewInterop.SetShowScrollbar(dxTarget, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public float ScrollPosition() {
		return DevExpress.Ui.DxTileViewInterop.ScrollPosition(dxTarget).Result;
	}
	public void Dispose() {
	}
}
