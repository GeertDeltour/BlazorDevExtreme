@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxResizableOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxResizable() : base("DxResizable") { }
	protected override DevExpress.Ui.DxResizableOptions CreateOptions() {
		return new DevExpress.Ui.DxResizableOptions {
			handles = handles,
			height = height,
			maxHeight = maxHeight,
			maxWidth = maxWidth,
			minHeight = minHeight,
			minWidth = minWidth,
			width = width,
			onResizeEnabled = onResizeEnabled,
			onResizeEndEnabled = onResizeEndEnabled,
			onResizeStartEnabled = onResizeStartEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxResizableOptions options) {
return 		DevExpress.Ui.DxResizableInterop.Init(dxTarget, options);
	}
	string handles;
	[Parameter]
	string Handles {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetHandles(dxTarget).Result : handles;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetHandles(dxTarget, value);
			} else {
				this.handles = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetHeight(dxTarget).Result : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	float? maxHeight;
	[Parameter]
	float? MaxHeight {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetMaxHeight(dxTarget).Result : maxHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetMaxHeight(dxTarget, value);
			} else {
				this.maxHeight = value;
			}
		}
	}
	float? maxWidth;
	[Parameter]
	float? MaxWidth {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetMaxWidth(dxTarget).Result : maxWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetMaxWidth(dxTarget, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	float? minHeight;
	[Parameter]
	float? MinHeight {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetMinHeight(dxTarget).Result : minHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetMinHeight(dxTarget, value);
			} else {
				this.minHeight = value;
			}
		}
	}
	float? minWidth;
	[Parameter]
	float? MinWidth {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetMinWidth(dxTarget).Result : minWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetMinWidth(dxTarget, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxResizableInterop.GetWidth(dxTarget).Result : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxResizableInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onResizeEnabled;
	[Parameter]
	bool? OnResizeEnabled {
		get => onResizeEnabled;
		set => this.onResizeEnabled = value;
	}
	bool? onResizeEndEnabled;
	[Parameter]
	bool? OnResizeEndEnabled {
		get => onResizeEndEnabled;
		set => this.onResizeEndEnabled = value;
	}
	bool? onResizeStartEnabled;
	[Parameter]
	bool? OnResizeStartEnabled {
		get => onResizeStartEnabled;
		set => this.onResizeStartEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxResizableInterop.Resize += DxResizable_Resize;
		DevExpress.Ui.DxResizableInterop.ResizeEnd += DxResizable_ResizeEnd;
		DevExpress.Ui.DxResizableInterop.ResizeStart += DxResizable_ResizeStart;
	}
	[Parameter]
	Action Resize { get; set; }
	void DxResizable_Resize(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Resize?.Invoke();
		}
	}
	[Parameter]
	Action ResizeEnd { get; set; }
	void DxResizable_ResizeEnd(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeEnd?.Invoke();
		}
	}
	[Parameter]
	Action ResizeStart { get; set; }
	void DxResizable_ResizeStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeStart?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxResizableInterop.Resize -= DxResizable_Resize;
		DevExpress.Ui.DxResizableInterop.ResizeEnd -= DxResizable_ResizeEnd;
		DevExpress.Ui.DxResizableInterop.ResizeStart -= DxResizable_ResizeStart;
	}
}
