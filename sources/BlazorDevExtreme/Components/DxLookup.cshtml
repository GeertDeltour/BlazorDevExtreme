@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxLookupOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxLookup() : base("DxLookup") { }
	protected override DevExpress.Ui.DxLookupOptions CreateOptions() {
		return new DevExpress.Ui.DxLookupOptions {
			animation = animation,
			applyButtonText = applyButtonText,
			applyValueMode = applyValueMode,
			cancelButtonText = cancelButtonText,
			cleanSearchOnOpening = cleanSearchOnOpening,
			clearButtonText = clearButtonText,
			closeOnOutsideClick = closeOnOutsideClick,
			fieldTemplate = fieldTemplate,
			focusStateEnabled = focusStateEnabled,
			fullScreen = fullScreen,
			grouped = grouped,
			groupTemplate = groupTemplate,
			nextButtonText = nextButtonText,
			pageLoadingText = pageLoadingText,
			pageLoadMode = pageLoadMode,
			placeholder = placeholder,
			popupHeight = popupHeight,
			popupWidth = popupWidth,
			position = position,
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			pullRefreshEnabled = pullRefreshEnabled,
			refreshingText = refreshingText,
			searchEnabled = searchEnabled,
			searchPlaceholder = searchPlaceholder,
			shading = shading,
			showCancelButton = showCancelButton,
			showClearButton = showClearButton,
			showPopupTitle = showPopupTitle,
			title = title,
			titleTemplate = titleTemplate,
			useNativeScrolling = useNativeScrolling,
			usePopover = usePopover,
			onPageLoadingEnabled = onPageLoadingEnabled,
			onPullRefreshEnabled = onPullRefreshEnabled,
			onScrollEnabled = onScrollEnabled,
			onTitleRenderedEnabled = onTitleRenderedEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxLookupOptions options) {
return 		DevExpress.Ui.DxLookupInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string applyButtonText;
	[Parameter]
	string ApplyButtonText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetApplyButtonText(dxTarget).Result : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetApplyButtonText(dxTarget, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetApplyValueMode(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	string cancelButtonText;
	[Parameter]
	string CancelButtonText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetCancelButtonText(dxTarget).Result : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCancelButtonText(dxTarget, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	bool? cleanSearchOnOpening;
	[Parameter]
	bool? CleanSearchOnOpening {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetCleanSearchOnOpening(dxTarget).Result : cleanSearchOnOpening;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCleanSearchOnOpening(dxTarget, value);
			} else {
				this.cleanSearchOnOpening = value;
			}
		}
	}
	string clearButtonText;
	[Parameter]
	string ClearButtonText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetClearButtonText(dxTarget).Result : clearButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetClearButtonText(dxTarget, value);
			} else {
				this.clearButtonText = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetCloseOnOutsideClick(dxTarget).Result : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetCloseOnOutsideClick(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	object fieldTemplate;
	[Parameter]
	object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetFieldTemplate(dxTarget).Result : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFieldTemplate(dxTarget, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? fullScreen;
	[Parameter]
	bool? FullScreen {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetFullScreen(dxTarget).Result : fullScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetFullScreen(dxTarget, value);
			} else {
				this.fullScreen = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetGrouped(dxTarget).Result : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetGrouped(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetGroupTemplate(dxTarget).Result : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetGroupTemplate(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	string nextButtonText;
	[Parameter]
	string NextButtonText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetNextButtonText(dxTarget).Result : nextButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetNextButtonText(dxTarget, value);
			} else {
				this.nextButtonText = value;
			}
		}
	}
	string pageLoadingText;
	[Parameter]
	string PageLoadingText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPageLoadingText(dxTarget).Result : pageLoadingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPageLoadingText(dxTarget, value);
			} else {
				this.pageLoadingText = value;
			}
		}
	}
	string pageLoadMode;
	[Parameter]
	string PageLoadMode {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPageLoadMode(dxTarget).Result : pageLoadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPageLoadMode(dxTarget, value);
			} else {
				this.pageLoadMode = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPlaceholder(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPlaceholder(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	object popupHeight;
	[Parameter]
	object PopupHeight {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupHeight(dxTarget).Result : popupHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPopupHeight(dxTarget, value);
			} else {
				this.popupHeight = value;
			}
		}
	}
	object popupWidth;
	[Parameter]
	object PopupWidth {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPopupWidth(dxTarget).Result : popupWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPopupWidth(dxTarget, value);
			} else {
				this.popupWidth = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPosition(dxTarget).Result : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	string pulledDownText;
	[Parameter]
	string PulledDownText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPulledDownText(dxTarget).Result : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPulledDownText(dxTarget, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	[Parameter]
	string PullingDownText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPullingDownText(dxTarget).Result : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPullingDownText(dxTarget, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	bool? pullRefreshEnabled;
	[Parameter]
	bool? PullRefreshEnabled {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetPullRefreshEnabled(dxTarget).Result : pullRefreshEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetPullRefreshEnabled(dxTarget, value);
			} else {
				this.pullRefreshEnabled = value;
			}
		}
	}
	string refreshingText;
	[Parameter]
	string RefreshingText {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetRefreshingText(dxTarget).Result : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetRefreshingText(dxTarget, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? searchEnabled;
	[Parameter]
	bool? SearchEnabled {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSearchEnabled(dxTarget).Result : searchEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchEnabled(dxTarget, value);
			} else {
				this.searchEnabled = value;
			}
		}
	}
	string searchPlaceholder;
	[Parameter]
	string SearchPlaceholder {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetSearchPlaceholder(dxTarget).Result : searchPlaceholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetSearchPlaceholder(dxTarget, value);
			} else {
				this.searchPlaceholder = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetShading(dxTarget).Result : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShading(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	bool? showCancelButton;
	[Parameter]
	bool? ShowCancelButton {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetShowCancelButton(dxTarget).Result : showCancelButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowCancelButton(dxTarget, value);
			} else {
				this.showCancelButton = value;
			}
		}
	}
	bool? showClearButton;
	[Parameter]
	bool? ShowClearButton {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetShowClearButton(dxTarget).Result : showClearButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowClearButton(dxTarget, value);
			} else {
				this.showClearButton = value;
			}
		}
	}
	bool? showPopupTitle;
	[Parameter]
	bool? ShowPopupTitle {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetShowPopupTitle(dxTarget).Result : showPopupTitle;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetShowPopupTitle(dxTarget, value);
			} else {
				this.showPopupTitle = value;
			}
		}
	}
	string title;
	[Parameter]
	string Title {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object titleTemplate;
	[Parameter]
	object TitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetTitleTemplate(dxTarget).Result : titleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetTitleTemplate(dxTarget, value);
			} else {
				this.titleTemplate = value;
			}
		}
	}
	bool? useNativeScrolling;
	[Parameter]
	bool? UseNativeScrolling {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetUseNativeScrolling(dxTarget).Result : useNativeScrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetUseNativeScrolling(dxTarget, value);
			} else {
				this.useNativeScrolling = value;
			}
		}
	}
	bool? usePopover;
	[Parameter]
	bool? UsePopover {
		get => isInitialized ? DevExpress.Ui.DxLookupInterop.GetUsePopover(dxTarget).Result : usePopover;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxLookupInterop.SetUsePopover(dxTarget, value);
			} else {
				this.usePopover = value;
			}
		}
	}
	bool? onPageLoadingEnabled;
	[Parameter]
	bool? OnPageLoadingEnabled {
		get => onPageLoadingEnabled;
		set => this.onPageLoadingEnabled = value;
	}
	bool? onPullRefreshEnabled;
	[Parameter]
	bool? OnPullRefreshEnabled {
		get => onPullRefreshEnabled;
		set => this.onPullRefreshEnabled = value;
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onTitleRenderedEnabled;
	[Parameter]
	bool? OnTitleRenderedEnabled {
		get => onTitleRenderedEnabled;
		set => this.onTitleRenderedEnabled = value;
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxLookupInterop.PageLoading += DxLookup_PageLoading;
		DevExpress.Ui.DxLookupInterop.PullRefresh += DxLookup_PullRefresh;
		DevExpress.Ui.DxLookupInterop.Scroll += DxLookup_Scroll;
		DevExpress.Ui.DxLookupInterop.TitleRendered += DxLookup_TitleRendered;
		DevExpress.Ui.DxLookupInterop.ValueChanged += DxLookup_ValueChanged;
	}
	[Parameter]
	Action PageLoading { get; set; }
	void DxLookup_PageLoading(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PageLoading?.Invoke();
		}
	}
	[Parameter]
	Action PullRefresh { get; set; }
	void DxLookup_PullRefresh(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullRefresh?.Invoke();
		}
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxLookup_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action TitleRendered { get; set; }
	void DxLookup_TitleRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleRendered?.Invoke();
		}
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void DxLookup_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxLookupInterop.PageLoading -= DxLookup_PageLoading;
		DevExpress.Ui.DxLookupInterop.PullRefresh -= DxLookup_PullRefresh;
		DevExpress.Ui.DxLookupInterop.Scroll -= DxLookup_Scroll;
		DevExpress.Ui.DxLookupInterop.TitleRendered -= DxLookup_TitleRendered;
		DevExpress.Ui.DxLookupInterop.ValueChanged -= DxLookup_ValueChanged;
	}
}
