@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxPivotGridFieldChooserOptions>

<div id="@Id"></div>

@functions {
	public DxPivotGridFieldChooser() : base("DxPivotGridFieldChooser") { }
	protected override DevExpress.Ui.DxPivotGridFieldChooserOptions CreateOptions() {
		return new DevExpress.Ui.DxPivotGridFieldChooserOptions {
			allowSearch = allowSearch,
			applyChangesMode = applyChangesMode,
			dataSource = dataSource,
			headerFilter = headerFilter,
			height = height,
			layout = layout,
			state = state,
			texts = texts,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxPivotGridFieldChooserOptions options) {
		DevExpress.Ui.DxPivotGridFieldChooserInterop.Init(Id, options);
	}
	bool? allowSearch;
	public bool? AllowSearch {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetAllowSearch(Id) : allowSearch;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetAllowSearch(Id, value);
			} else {
				this.allowSearch = value;
			}
		}
	}
	string applyChangesMode;
	public string ApplyChangesMode {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetApplyChangesMode(Id) : applyChangesMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetApplyChangesMode(Id, value);
			} else {
				this.applyChangesMode = value;
			}
		}
	}
	object dataSource;
	public object DataSource {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetDataSource(Id) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetDataSource(Id, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object headerFilter;
	public object HeaderFilter {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetHeaderFilter(Id) : headerFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetHeaderFilter(Id, value);
			} else {
				this.headerFilter = value;
			}
		}
	}
	object height;
	public object Height {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetHeight(Id) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetHeight(Id, value);
			} else {
				this.height = value;
			}
		}
	}
	object layout;
	public object Layout {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetLayout(Id) : layout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetLayout(Id, value);
			} else {
				this.layout = value;
			}
		}
	}
	object state;
	public object State {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetState(Id) : state;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetState(Id, value);
			} else {
				this.state = value;
			}
		}
	}
	object texts;
	public object Texts {
		get => isInitialized ? DevExpress.Ui.DxPivotGridFieldChooserInterop.GetTexts(Id) : texts;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridFieldChooserInterop.SetTexts(Id, value);
			} else {
				this.texts = value;
			}
		}
	}
	bool? onContextMenuPreparingEnabled;
	public bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxPivotGridFieldChooserInterop.ContextMenuPreparing += DxPivotGridFieldChooser_ContextMenuPreparing;
	}
	public Action ContextMenuPreparing { get; set; }
	void DxPivotGridFieldChooser_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxPivotGridFieldChooserInterop.ContextMenuPreparing -= DxPivotGridFieldChooser_ContextMenuPreparing;
	}
}
