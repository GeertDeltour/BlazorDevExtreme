@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Funnel.DxFunnelOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxFunnel() : base("DxFunnel") { }
	protected override DevExpress.Viz.Funnel.DxFunnelOptions CreateOptions() {
		return new DevExpress.Viz.Funnel.DxFunnelOptions {
			adaptiveLayout = adaptiveLayout,
			algorithm = algorithm,
			argumentField = argumentField,
			colorField = colorField,
			dataSource = dataSource,
			hoverEnabled = hoverEnabled,
			inverted = inverted,
			item = item,
			label = label,
			legend = legend,
			neckHeight = neckHeight,
			neckWidth = neckWidth,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			selectionMode = selectionMode,
			sortData = sortData,
			tooltip = tooltip,
			valueField = valueField,
			onHoverChangedEnabled = onHoverChangedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Funnel.DxFunnelOptions options) {
return 		DevExpress.Viz.DxFunnelInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetAdaptiveLayout(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetAdaptiveLayout(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	string algorithm;
	[Parameter]
	string Algorithm {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetAlgorithm(dxTarget).Result : algorithm;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetAlgorithm(dxTarget, value);
			} else {
				this.algorithm = value;
			}
		}
	}
	string argumentField;
	[Parameter]
	string ArgumentField {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetArgumentField(dxTarget).Result : argumentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetArgumentField(dxTarget, value);
			} else {
				this.argumentField = value;
			}
		}
	}
	string colorField;
	[Parameter]
	string ColorField {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetColorField(dxTarget).Result : colorField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetColorField(dxTarget, value);
			} else {
				this.colorField = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetDataSource(dxTarget).Result : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	bool? hoverEnabled;
	[Parameter]
	bool? HoverEnabled {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetHoverEnabled(dxTarget).Result : hoverEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetHoverEnabled(dxTarget, value);
			} else {
				this.hoverEnabled = value;
			}
		}
	}
	bool? inverted;
	[Parameter]
	bool? Inverted {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetInverted(dxTarget).Result : inverted;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetInverted(dxTarget, value);
			} else {
				this.inverted = value;
			}
		}
	}
	object item;
	[Parameter]
	object Item {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetItem(dxTarget).Result : item;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetItem(dxTarget, value);
			} else {
				this.item = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetLabel(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetLabel(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetLegend(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetLegend(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? neckHeight;
	[Parameter]
	float? NeckHeight {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetNeckHeight(dxTarget).Result : neckHeight;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetNeckHeight(dxTarget, value);
			} else {
				this.neckHeight = value;
			}
		}
	}
	float? neckWidth;
	[Parameter]
	float? NeckWidth {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetNeckWidth(dxTarget).Result : neckWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetNeckWidth(dxTarget, value);
			} else {
				this.neckWidth = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetPalette(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetPalette(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetPaletteExtensionMode(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetPaletteExtensionMode(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetSelectionMode(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	bool? sortData;
	[Parameter]
	bool? SortData {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetSortData(dxTarget).Result : sortData;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetSortData(dxTarget, value);
			} else {
				this.sortData = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? DevExpress.Viz.DxFunnelInterop.GetValueField(dxTarget).Result : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxFunnelInterop.SetValueField(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	bool? onHoverChangedEnabled;
	[Parameter]
	bool? OnHoverChangedEnabled {
		get => onHoverChangedEnabled;
		set => this.onHoverChangedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxFunnelInterop.HoverChanged += DxFunnel_HoverChanged;
		DevExpress.Viz.DxFunnelInterop.ItemClick += DxFunnel_ItemClick;
		DevExpress.Viz.DxFunnelInterop.LegendClick += DxFunnel_LegendClick;
		DevExpress.Viz.DxFunnelInterop.SelectionChanged += DxFunnel_SelectionChanged;
	}
	[Parameter]
	Action HoverChanged { get; set; }
	void DxFunnel_HoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			HoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxFunnel_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxFunnel_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxFunnel_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	public void ClearSelection() {
		DevExpress.Viz.DxFunnelInterop.ClearSelection(dxTarget);
	}
	public object GetAllItems() {
		return DevExpress.Viz.DxFunnelInterop.GetAllItems(dxTarget).Result;
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxFunnelInterop.GetDataSourceEx(dxTarget).Result;
	}
	public void HideTooltip() {
		DevExpress.Viz.DxFunnelInterop.HideTooltip(dxTarget);
	}
	public void Dispose() {
		DevExpress.Viz.DxFunnelInterop.HoverChanged -= DxFunnel_HoverChanged;
		DevExpress.Viz.DxFunnelInterop.ItemClick -= DxFunnel_ItemClick;
		DevExpress.Viz.DxFunnelInterop.LegendClick -= DxFunnel_LegendClick;
		DevExpress.Viz.DxFunnelInterop.SelectionChanged -= DxFunnel_SelectionChanged;
	}
}
