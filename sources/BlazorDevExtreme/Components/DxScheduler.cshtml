@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxSchedulerOptions>

<div id="@Id"></div>

@functions {
	public DxScheduler() : base("DxScheduler") { }
	protected override DevExpress.Ui.DxSchedulerOptions CreateOptions() {
		return new DevExpress.Ui.DxSchedulerOptions {
			allDayExpr = allDayExpr,
			appointmentTemplate = appointmentTemplate,
			appointmentTooltipTemplate = appointmentTooltipTemplate,
			cellDuration = cellDuration,
			crossScrollingEnabled = crossScrollingEnabled,
			currentDate = currentDate,
			currentView = currentView,
			dataCellTemplate = dataCellTemplate,
			dataSource = dataSource,
			dateCellTemplate = dateCellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			descriptionExpr = descriptionExpr,
			dropDownAppointmentTemplate = dropDownAppointmentTemplate,
			editing = editing,
			endDateExpr = endDateExpr,
			endDateTimeZoneExpr = endDateTimeZoneExpr,
			endDayHour = endDayHour,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			groups = groups,
			indicatorUpdateInterval = indicatorUpdateInterval,
			max = max,
			maxAppointmentsPerCell = maxAppointmentsPerCell,
			min = min,
			noDataText = noDataText,
			recurrenceEditMode = recurrenceEditMode,
			recurrenceExceptionExpr = recurrenceExceptionExpr,
			recurrenceRuleExpr = recurrenceRuleExpr,
			remoteFiltering = remoteFiltering,
			resourceCellTemplate = resourceCellTemplate,
			resources = resources,
			selectedCellData = selectedCellData,
			shadeUntilCurrentTime = shadeUntilCurrentTime,
			showAllDayPanel = showAllDayPanel,
			showCurrentTimeIndicator = showCurrentTimeIndicator,
			startDateExpr = startDateExpr,
			startDateTimeZoneExpr = startDateTimeZoneExpr,
			startDayHour = startDayHour,
			textExpr = textExpr,
			timeCellTemplate = timeCellTemplate,
			timeZone = timeZone,
			useDropDownViewSwitcher = useDropDownViewSwitcher,
			views = views,
			onAppointmentAddedEnabled = onAppointmentAddedEnabled,
			onAppointmentAddingEnabled = onAppointmentAddingEnabled,
			onAppointmentClickEnabled = onAppointmentClickEnabled,
			onAppointmentContextMenuEnabled = onAppointmentContextMenuEnabled,
			onAppointmentDblClickEnabled = onAppointmentDblClickEnabled,
			onAppointmentDeletedEnabled = onAppointmentDeletedEnabled,
			onAppointmentDeletingEnabled = onAppointmentDeletingEnabled,
			onAppointmentFormCreatedEnabled = onAppointmentFormCreatedEnabled,
			onAppointmentRenderedEnabled = onAppointmentRenderedEnabled,
			onAppointmentUpdatedEnabled = onAppointmentUpdatedEnabled,
			onAppointmentUpdatingEnabled = onAppointmentUpdatingEnabled,
			onCellClickEnabled = onCellClickEnabled,
			onCellContextMenuEnabled = onCellContextMenuEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxSchedulerOptions options) {
		DevExpress.Ui.DxSchedulerInterop.Init(Id, options);
	}
	string allDayExpr;
	public string AllDayExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAllDayExpr(Id) : allDayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAllDayExpr(Id, value);
			} else {
				this.allDayExpr = value;
			}
		}
	}
	object appointmentTemplate;
	public object AppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTemplate(Id) : appointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTemplate(Id, value);
			} else {
				this.appointmentTemplate = value;
			}
		}
	}
	object appointmentTooltipTemplate;
	public object AppointmentTooltipTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetAppointmentTooltipTemplate(Id) : appointmentTooltipTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetAppointmentTooltipTemplate(Id, value);
			} else {
				this.appointmentTooltipTemplate = value;
			}
		}
	}
	float? cellDuration;
	public float? CellDuration {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCellDuration(Id) : cellDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCellDuration(Id, value);
			} else {
				this.cellDuration = value;
			}
		}
	}
	bool? crossScrollingEnabled;
	public bool? CrossScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCrossScrollingEnabled(Id) : crossScrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCrossScrollingEnabled(Id, value);
			} else {
				this.crossScrollingEnabled = value;
			}
		}
	}
	object currentDate;
	public object CurrentDate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCurrentDate(Id) : currentDate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentDate(Id, value);
			} else {
				this.currentDate = value;
			}
		}
	}
	string currentView;
	public string CurrentView {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetCurrentView(Id) : currentView;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetCurrentView(Id, value);
			} else {
				this.currentView = value;
			}
		}
	}
	object dataCellTemplate;
	public object DataCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataCellTemplate(Id) : dataCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataCellTemplate(Id, value);
			} else {
				this.dataCellTemplate = value;
			}
		}
	}
	object dataSource;
	public object DataSource {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDataSource(Id) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDataSource(Id, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object dateCellTemplate;
	public object DateCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDateCellTemplate(Id) : dateCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateCellTemplate(Id, value);
			} else {
				this.dateCellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	public string DateSerializationFormat {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDateSerializationFormat(Id) : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDateSerializationFormat(Id, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	string descriptionExpr;
	public string DescriptionExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDescriptionExpr(Id) : descriptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDescriptionExpr(Id, value);
			} else {
				this.descriptionExpr = value;
			}
		}
	}
	object dropDownAppointmentTemplate;
	public object DropDownAppointmentTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetDropDownAppointmentTemplate(Id) : dropDownAppointmentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetDropDownAppointmentTemplate(Id, value);
			} else {
				this.dropDownAppointmentTemplate = value;
			}
		}
	}
	object editing;
	public object Editing {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEditing(Id) : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEditing(Id, value);
			} else {
				this.editing = value;
			}
		}
	}
	string endDateExpr;
	public string EndDateExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDateExpr(Id) : endDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateExpr(Id, value);
			} else {
				this.endDateExpr = value;
			}
		}
	}
	string endDateTimeZoneExpr;
	public string EndDateTimeZoneExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDateTimeZoneExpr(Id) : endDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDateTimeZoneExpr(Id, value);
			} else {
				this.endDateTimeZoneExpr = value;
			}
		}
	}
	float? endDayHour;
	public float? EndDayHour {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetEndDayHour(Id) : endDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetEndDayHour(Id, value);
			} else {
				this.endDayHour = value;
			}
		}
	}
	object firstDayOfWeek;
	public object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetFirstDayOfWeek(Id) : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFirstDayOfWeek(Id, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	object groups;
	public object Groups {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetGroups(Id) : groups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetGroups(Id, value);
			} else {
				this.groups = value;
			}
		}
	}
	float? indicatorUpdateInterval;
	public float? IndicatorUpdateInterval {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetIndicatorUpdateInterval(Id) : indicatorUpdateInterval;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetIndicatorUpdateInterval(Id, value);
			} else {
				this.indicatorUpdateInterval = value;
			}
		}
	}
	object max;
	public object Max {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMax(Id) : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMax(Id, value);
			} else {
				this.max = value;
			}
		}
	}
	object maxAppointmentsPerCell;
	public object MaxAppointmentsPerCell {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMaxAppointmentsPerCell(Id) : maxAppointmentsPerCell;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMaxAppointmentsPerCell(Id, value);
			} else {
				this.maxAppointmentsPerCell = value;
			}
		}
	}
	object min;
	public object Min {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetMin(Id) : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetMin(Id, value);
			} else {
				this.min = value;
			}
		}
	}
	string noDataText;
	public string NoDataText {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetNoDataText(Id) : noDataText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetNoDataText(Id, value);
			} else {
				this.noDataText = value;
			}
		}
	}
	string recurrenceEditMode;
	public string RecurrenceEditMode {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceEditMode(Id) : recurrenceEditMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceEditMode(Id, value);
			} else {
				this.recurrenceEditMode = value;
			}
		}
	}
	string recurrenceExceptionExpr;
	public string RecurrenceExceptionExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceExceptionExpr(Id) : recurrenceExceptionExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceExceptionExpr(Id, value);
			} else {
				this.recurrenceExceptionExpr = value;
			}
		}
	}
	string recurrenceRuleExpr;
	public string RecurrenceRuleExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRecurrenceRuleExpr(Id) : recurrenceRuleExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRecurrenceRuleExpr(Id, value);
			} else {
				this.recurrenceRuleExpr = value;
			}
		}
	}
	bool? remoteFiltering;
	public bool? RemoteFiltering {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetRemoteFiltering(Id) : remoteFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetRemoteFiltering(Id, value);
			} else {
				this.remoteFiltering = value;
			}
		}
	}
	object resourceCellTemplate;
	public object ResourceCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResourceCellTemplate(Id) : resourceCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResourceCellTemplate(Id, value);
			} else {
				this.resourceCellTemplate = value;
			}
		}
	}
	object resources;
	public object Resources {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetResources(Id) : resources;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetResources(Id, value);
			} else {
				this.resources = value;
			}
		}
	}
	object selectedCellData;
	public object SelectedCellData {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetSelectedCellData(Id) : selectedCellData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetSelectedCellData(Id, value);
			} else {
				this.selectedCellData = value;
			}
		}
	}
	bool? shadeUntilCurrentTime;
	public bool? ShadeUntilCurrentTime {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShadeUntilCurrentTime(Id) : shadeUntilCurrentTime;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShadeUntilCurrentTime(Id, value);
			} else {
				this.shadeUntilCurrentTime = value;
			}
		}
	}
	bool? showAllDayPanel;
	public bool? ShowAllDayPanel {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShowAllDayPanel(Id) : showAllDayPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowAllDayPanel(Id, value);
			} else {
				this.showAllDayPanel = value;
			}
		}
	}
	bool? showCurrentTimeIndicator;
	public bool? ShowCurrentTimeIndicator {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetShowCurrentTimeIndicator(Id) : showCurrentTimeIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetShowCurrentTimeIndicator(Id, value);
			} else {
				this.showCurrentTimeIndicator = value;
			}
		}
	}
	string startDateExpr;
	public string StartDateExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDateExpr(Id) : startDateExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateExpr(Id, value);
			} else {
				this.startDateExpr = value;
			}
		}
	}
	string startDateTimeZoneExpr;
	public string StartDateTimeZoneExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDateTimeZoneExpr(Id) : startDateTimeZoneExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDateTimeZoneExpr(Id, value);
			} else {
				this.startDateTimeZoneExpr = value;
			}
		}
	}
	float? startDayHour;
	public float? StartDayHour {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetStartDayHour(Id) : startDayHour;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetStartDayHour(Id, value);
			} else {
				this.startDayHour = value;
			}
		}
	}
	string textExpr;
	public string TextExpr {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTextExpr(Id) : textExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTextExpr(Id, value);
			} else {
				this.textExpr = value;
			}
		}
	}
	object timeCellTemplate;
	public object TimeCellTemplate {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTimeCellTemplate(Id) : timeCellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeCellTemplate(Id, value);
			} else {
				this.timeCellTemplate = value;
			}
		}
	}
	string timeZone;
	public string TimeZone {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetTimeZone(Id) : timeZone;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetTimeZone(Id, value);
			} else {
				this.timeZone = value;
			}
		}
	}
	bool? useDropDownViewSwitcher;
	public bool? UseDropDownViewSwitcher {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetUseDropDownViewSwitcher(Id) : useDropDownViewSwitcher;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetUseDropDownViewSwitcher(Id, value);
			} else {
				this.useDropDownViewSwitcher = value;
			}
		}
	}
	object views;
	public object Views {
		get => isInitialized ? DevExpress.Ui.DxSchedulerInterop.GetViews(Id) : views;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSchedulerInterop.SetViews(Id, value);
			} else {
				this.views = value;
			}
		}
	}
	bool? onAppointmentAddedEnabled;
	public bool? OnAppointmentAddedEnabled {
		get => onAppointmentAddedEnabled;
		set => this.onAppointmentAddedEnabled = value;
	}
	bool? onAppointmentAddingEnabled;
	public bool? OnAppointmentAddingEnabled {
		get => onAppointmentAddingEnabled;
		set => this.onAppointmentAddingEnabled = value;
	}
	bool? onAppointmentClickEnabled;
	public bool? OnAppointmentClickEnabled {
		get => onAppointmentClickEnabled;
		set => this.onAppointmentClickEnabled = value;
	}
	bool? onAppointmentContextMenuEnabled;
	public bool? OnAppointmentContextMenuEnabled {
		get => onAppointmentContextMenuEnabled;
		set => this.onAppointmentContextMenuEnabled = value;
	}
	bool? onAppointmentDblClickEnabled;
	public bool? OnAppointmentDblClickEnabled {
		get => onAppointmentDblClickEnabled;
		set => this.onAppointmentDblClickEnabled = value;
	}
	bool? onAppointmentDeletedEnabled;
	public bool? OnAppointmentDeletedEnabled {
		get => onAppointmentDeletedEnabled;
		set => this.onAppointmentDeletedEnabled = value;
	}
	bool? onAppointmentDeletingEnabled;
	public bool? OnAppointmentDeletingEnabled {
		get => onAppointmentDeletingEnabled;
		set => this.onAppointmentDeletingEnabled = value;
	}
	bool? onAppointmentFormCreatedEnabled;
	public bool? OnAppointmentFormCreatedEnabled {
		get => onAppointmentFormCreatedEnabled;
		set => this.onAppointmentFormCreatedEnabled = value;
	}
	bool? onAppointmentRenderedEnabled;
	public bool? OnAppointmentRenderedEnabled {
		get => onAppointmentRenderedEnabled;
		set => this.onAppointmentRenderedEnabled = value;
	}
	bool? onAppointmentUpdatedEnabled;
	public bool? OnAppointmentUpdatedEnabled {
		get => onAppointmentUpdatedEnabled;
		set => this.onAppointmentUpdatedEnabled = value;
	}
	bool? onAppointmentUpdatingEnabled;
	public bool? OnAppointmentUpdatingEnabled {
		get => onAppointmentUpdatingEnabled;
		set => this.onAppointmentUpdatingEnabled = value;
	}
	bool? onCellClickEnabled;
	public bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellContextMenuEnabled;
	public bool? OnCellContextMenuEnabled {
		get => onCellContextMenuEnabled;
		set => this.onCellContextMenuEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded += DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding += DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick += DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu += DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick += DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted += DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting += DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated += DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered += DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated += DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating += DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick += DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu += DxScheduler_CellContextMenu;
	}
	public Action AppointmentAdded { get; set; }
	void DxScheduler_AppointmentAdded(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdded?.Invoke();
		}
	}
	public Action AppointmentAdding { get; set; }
	void DxScheduler_AppointmentAdding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentAdding?.Invoke();
		}
	}
	public Action AppointmentClick { get; set; }
	void DxScheduler_AppointmentClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentClick?.Invoke();
		}
	}
	public Action AppointmentContextMenu { get; set; }
	void DxScheduler_AppointmentContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentContextMenu?.Invoke();
		}
	}
	public Action AppointmentDblClick { get; set; }
	void DxScheduler_AppointmentDblClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDblClick?.Invoke();
		}
	}
	public Action AppointmentDeleted { get; set; }
	void DxScheduler_AppointmentDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleted?.Invoke();
		}
	}
	public Action AppointmentDeleting { get; set; }
	void DxScheduler_AppointmentDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentDeleting?.Invoke();
		}
	}
	public Action AppointmentFormCreated { get; set; }
	void DxScheduler_AppointmentFormCreated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentFormCreated?.Invoke();
		}
	}
	public Action AppointmentRendered { get; set; }
	void DxScheduler_AppointmentRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentRendered?.Invoke();
		}
	}
	public Action AppointmentUpdated { get; set; }
	void DxScheduler_AppointmentUpdated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdated?.Invoke();
		}
	}
	public Action AppointmentUpdating { get; set; }
	void DxScheduler_AppointmentUpdating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			AppointmentUpdating?.Invoke();
		}
	}
	public Action CellClick { get; set; }
	void DxScheduler_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	public Action CellContextMenu { get; set; }
	void DxScheduler_CellContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellContextMenu?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdded -= DxScheduler_AppointmentAdded;
		DevExpress.Ui.DxSchedulerInterop.AppointmentAdding -= DxScheduler_AppointmentAdding;
		DevExpress.Ui.DxSchedulerInterop.AppointmentClick -= DxScheduler_AppointmentClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentContextMenu -= DxScheduler_AppointmentContextMenu;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDblClick -= DxScheduler_AppointmentDblClick;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleted -= DxScheduler_AppointmentDeleted;
		DevExpress.Ui.DxSchedulerInterop.AppointmentDeleting -= DxScheduler_AppointmentDeleting;
		DevExpress.Ui.DxSchedulerInterop.AppointmentFormCreated -= DxScheduler_AppointmentFormCreated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentRendered -= DxScheduler_AppointmentRendered;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdated -= DxScheduler_AppointmentUpdated;
		DevExpress.Ui.DxSchedulerInterop.AppointmentUpdating -= DxScheduler_AppointmentUpdating;
		DevExpress.Ui.DxSchedulerInterop.CellClick -= DxScheduler_CellClick;
		DevExpress.Ui.DxSchedulerInterop.CellContextMenu -= DxScheduler_CellContextMenu;
	}
}
