@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxPivotOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxPivot() : base("DxPivot") { }
	protected override DevExpress.Ui.DxPivotOptions CreateOptions() {
		return new DevExpress.Ui.DxPivotOptions {
			contentTemplate = contentTemplate,
			itemTitleTemplate = itemTitleTemplate,
			selectedIndex = selectedIndex,
			swipeEnabled = swipeEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxPivotOptions options) {
return 		DevExpress.Ui.DxPivotInterop.Init(dxTarget, options);
	}
	object contentTemplate;
	[Parameter]
	object ContentTemplate {
		get => isInitialized ? DevExpress.Ui.DxPivotInterop.GetContentTemplate(dxTarget).Result : contentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotInterop.SetContentTemplate(dxTarget, value);
			} else {
				this.contentTemplate = value;
			}
		}
	}
	object itemTitleTemplate;
	[Parameter]
	object ItemTitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxPivotInterop.GetItemTitleTemplate(dxTarget).Result : itemTitleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotInterop.SetItemTitleTemplate(dxTarget, value);
			} else {
				this.itemTitleTemplate = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? DevExpress.Ui.DxPivotInterop.GetSelectedIndex(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	bool? swipeEnabled;
	[Parameter]
	bool? SwipeEnabled {
		get => isInitialized ? DevExpress.Ui.DxPivotInterop.GetSwipeEnabled(dxTarget).Result : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotInterop.SetSwipeEnabled(dxTarget, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
