@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxMenuBaseOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxMenuBase() : base("DxMenuBase") { }
	protected override DevExpress.Ui.DxMenuBaseOptions CreateOptions() {
		return new DevExpress.Ui.DxMenuBaseOptions {
			activeStateEnabled = activeStateEnabled,
			animation = animation,
			cssClass = cssClass,
			items = items,
			selectByClick = selectByClick,
			selectionMode = selectionMode,
			showSubmenuMode = showSubmenuMode,
		};
	}
	protected override void Init(DevExpress.Ui.DxMenuBaseOptions options) {
		DevExpress.Ui.DxMenuBaseInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetActiveStateEnabled(dxTarget) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string cssClass;
	[Parameter]
	string CssClass {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetCssClass(dxTarget) : cssClass;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetCssClass(dxTarget, value);
			} else {
				this.cssClass = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetItems(dxTarget) : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	bool? selectByClick;
	[Parameter]
	bool? SelectByClick {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectByClick(dxTarget) : selectByClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectByClick(dxTarget, value);
			} else {
				this.selectByClick = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetSelectionMode(dxTarget) : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	object showSubmenuMode;
	[Parameter]
	object ShowSubmenuMode {
		get => isInitialized ? DevExpress.Ui.DxMenuBaseInterop.GetShowSubmenuMode(dxTarget) : showSubmenuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuBaseInterop.SetShowSubmenuMode(dxTarget, value);
			} else {
				this.showSubmenuMode = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void SelectItem(object itemElement) {
		DevExpress.Ui.DxMenuBaseInterop.SelectItem(dxTarget, itemElement);
	}
	public void UnselectItem(object itemElement) {
		DevExpress.Ui.DxMenuBaseInterop.UnselectItem(dxTarget, itemElement);
	}
	public void Dispose() {
	}
}
