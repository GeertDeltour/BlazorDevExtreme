@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxSelectBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSelectBox() : base("DxSelectBox") { }
	protected override DevExpress.Ui.DxSelectBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxSelectBoxOptions {
			acceptCustomValue = acceptCustomValue,
			fieldTemplate = fieldTemplate,
			placeholder = placeholder,
			showSelectionControls = showSelectionControls,
			valueChangeEvent = valueChangeEvent,
			onCustomItemCreatingEnabled = onCustomItemCreatingEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxSelectBoxOptions options) {
return 		DevExpress.Ui.DxSelectBoxInterop.Init(dxTarget, options);
	}
	bool? acceptCustomValue;
	[Parameter]
	bool? AcceptCustomValue {
		get => isInitialized ? DevExpress.Ui.DxSelectBoxInterop.GetAcceptCustomValue(dxTarget).Result : acceptCustomValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSelectBoxInterop.SetAcceptCustomValue(dxTarget, value);
			} else {
				this.acceptCustomValue = value;
			}
		}
	}
	object fieldTemplate;
	[Parameter]
	object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxSelectBoxInterop.GetFieldTemplate(dxTarget).Result : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSelectBoxInterop.SetFieldTemplate(dxTarget, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? DevExpress.Ui.DxSelectBoxInterop.GetPlaceholder(dxTarget).Result : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSelectBoxInterop.SetPlaceholder(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	bool? showSelectionControls;
	[Parameter]
	bool? ShowSelectionControls {
		get => isInitialized ? DevExpress.Ui.DxSelectBoxInterop.GetShowSelectionControls(dxTarget).Result : showSelectionControls;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSelectBoxInterop.SetShowSelectionControls(dxTarget, value);
			} else {
				this.showSelectionControls = value;
			}
		}
	}
	string valueChangeEvent;
	[Parameter]
	string ValueChangeEvent {
		get => isInitialized ? DevExpress.Ui.DxSelectBoxInterop.GetValueChangeEvent(dxTarget).Result : valueChangeEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSelectBoxInterop.SetValueChangeEvent(dxTarget, value);
			} else {
				this.valueChangeEvent = value;
			}
		}
	}
	bool? onCustomItemCreatingEnabled;
	[Parameter]
	bool? OnCustomItemCreatingEnabled {
		get => onCustomItemCreatingEnabled;
		set => this.onCustomItemCreatingEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxSelectBoxInterop.CustomItemCreating += DxSelectBox_CustomItemCreating;
	}
	[Parameter]
	Action CustomItemCreating { get; set; }
	void DxSelectBox_CustomItemCreating(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CustomItemCreating?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxSelectBoxInterop.CustomItemCreating -= DxSelectBox_CustomItemCreating;
	}
}
