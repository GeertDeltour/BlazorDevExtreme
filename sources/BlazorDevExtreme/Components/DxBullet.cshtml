@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Sparklines.DxBulletOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxBullet() : base("DxBullet") { }
	protected override DevExpress.Viz.Sparklines.DxBulletOptions CreateOptions() {
		return new DevExpress.Viz.Sparklines.DxBulletOptions {
			color = color,
			endScaleValue = endScaleValue,
			showTarget = showTarget,
			showZeroLevel = showZeroLevel,
			startScaleValue = startScaleValue,
			target = target,
			targetColor = targetColor,
			targetWidth = targetWidth,
			value = value,
		};
	}
	protected override Task Init(DevExpress.Viz.Sparklines.DxBulletOptions options) {
return 		DevExpress.Viz.DxBulletInterop.Init(dxTarget, options);
	}
	string color;
	[Parameter]
	string Color {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetColor(dxTarget).Result : color;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetColor(dxTarget, value);
			} else {
				this.color = value;
			}
		}
	}
	float? endScaleValue;
	[Parameter]
	float? EndScaleValue {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetEndScaleValue(dxTarget).Result : endScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetEndScaleValue(dxTarget, value);
			} else {
				this.endScaleValue = value;
			}
		}
	}
	bool? showTarget;
	[Parameter]
	bool? ShowTarget {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetShowTarget(dxTarget).Result : showTarget;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowTarget(dxTarget, value);
			} else {
				this.showTarget = value;
			}
		}
	}
	bool? showZeroLevel;
	[Parameter]
	bool? ShowZeroLevel {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetShowZeroLevel(dxTarget).Result : showZeroLevel;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetShowZeroLevel(dxTarget, value);
			} else {
				this.showZeroLevel = value;
			}
		}
	}
	float? startScaleValue;
	[Parameter]
	float? StartScaleValue {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetStartScaleValue(dxTarget).Result : startScaleValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetStartScaleValue(dxTarget, value);
			} else {
				this.startScaleValue = value;
			}
		}
	}
	float? target;
	[Parameter]
	float? Target {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTarget(dxTarget).Result : target;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTarget(dxTarget, value);
			} else {
				this.target = value;
			}
		}
	}
	string targetColor;
	[Parameter]
	string TargetColor {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTargetColor(dxTarget).Result : targetColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetColor(dxTarget, value);
			} else {
				this.targetColor = value;
			}
		}
	}
	float? targetWidth;
	[Parameter]
	float? TargetWidth {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetTargetWidth(dxTarget).Result : targetWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetTargetWidth(dxTarget, value);
			} else {
				this.targetWidth = value;
			}
		}
	}
	float? value;
	[Parameter]
	float? Value {
		get => isInitialized ? DevExpress.Viz.DxBulletInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBulletInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
