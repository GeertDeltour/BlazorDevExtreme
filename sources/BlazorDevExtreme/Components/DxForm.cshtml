@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxFormOptions>

<div id="@Id"></div>

@functions {
	public DxForm() : base("DxForm") { }
	protected override DevExpress.Ui.DxFormOptions CreateOptions() {
		return new DevExpress.Ui.DxFormOptions {
			alignItemLabels = alignItemLabels,
			alignItemLabelsInAllGroups = alignItemLabelsInAllGroups,
			colCount = colCount,
			colCountByScreen = colCountByScreen,
			customizeItem = customizeItem,
			formData = formData,
			items = items,
			labelLocation = labelLocation,
			minColWidth = minColWidth,
			optionalMark = optionalMark,
			readOnly = readOnly,
			requiredMark = requiredMark,
			requiredMessage = requiredMessage,
			screenByWidth = screenByWidth,
			scrollingEnabled = scrollingEnabled,
			showColonAfterLabel = showColonAfterLabel,
			showOptionalMark = showOptionalMark,
			showRequiredMark = showRequiredMark,
			showValidationSummary = showValidationSummary,
			validationGroup = validationGroup,
			onEditorEnterKeyEnabled = onEditorEnterKeyEnabled,
			onFieldDataChangedEnabled = onFieldDataChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxFormOptions options) {
		DevExpress.Ui.DxFormInterop.Init(Id, options);
	}
	bool? alignItemLabels;
	public bool? AlignItemLabels {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetAlignItemLabels(Id) : alignItemLabels;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabels(Id, value);
			} else {
				this.alignItemLabels = value;
			}
		}
	}
	bool? alignItemLabelsInAllGroups;
	public bool? AlignItemLabelsInAllGroups {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetAlignItemLabelsInAllGroups(Id) : alignItemLabelsInAllGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabelsInAllGroups(Id, value);
			} else {
				this.alignItemLabelsInAllGroups = value;
			}
		}
	}
	object colCount;
	public object ColCount {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCount(Id) : colCount;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCount(Id, value);
			} else {
				this.colCount = value;
			}
		}
	}
	object colCountByScreen;
	public object ColCountByScreen {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCountByScreen(Id) : colCountByScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCountByScreen(Id, value);
			} else {
				this.colCountByScreen = value;
			}
		}
	}
	object customizeItem;
	public object CustomizeItem {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetCustomizeItem(Id) : customizeItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetCustomizeItem(Id, value);
			} else {
				this.customizeItem = value;
			}
		}
	}
	object formData;
	public object FormData {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetFormData(Id) : formData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetFormData(Id, value);
			} else {
				this.formData = value;
			}
		}
	}
	object items;
	public object Items {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetItems(Id) : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetItems(Id, value);
			} else {
				this.items = value;
			}
		}
	}
	string labelLocation;
	public string LabelLocation {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetLabelLocation(Id) : labelLocation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetLabelLocation(Id, value);
			} else {
				this.labelLocation = value;
			}
		}
	}
	float? minColWidth;
	public float? MinColWidth {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetMinColWidth(Id) : minColWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetMinColWidth(Id, value);
			} else {
				this.minColWidth = value;
			}
		}
	}
	string optionalMark;
	public string OptionalMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetOptionalMark(Id) : optionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetOptionalMark(Id, value);
			} else {
				this.optionalMark = value;
			}
		}
	}
	bool? readOnly;
	public bool? ReadOnly {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetReadOnly(Id) : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetReadOnly(Id, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	string requiredMark;
	public string RequiredMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetRequiredMark(Id) : requiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMark(Id, value);
			} else {
				this.requiredMark = value;
			}
		}
	}
	string requiredMessage;
	public string RequiredMessage {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetRequiredMessage(Id) : requiredMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMessage(Id, value);
			} else {
				this.requiredMessage = value;
			}
		}
	}
	object screenByWidth;
	public object ScreenByWidth {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetScreenByWidth(Id) : screenByWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScreenByWidth(Id, value);
			} else {
				this.screenByWidth = value;
			}
		}
	}
	bool? scrollingEnabled;
	public bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetScrollingEnabled(Id) : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScrollingEnabled(Id, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	bool? showColonAfterLabel;
	public bool? ShowColonAfterLabel {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowColonAfterLabel(Id) : showColonAfterLabel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowColonAfterLabel(Id, value);
			} else {
				this.showColonAfterLabel = value;
			}
		}
	}
	bool? showOptionalMark;
	public bool? ShowOptionalMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowOptionalMark(Id) : showOptionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowOptionalMark(Id, value);
			} else {
				this.showOptionalMark = value;
			}
		}
	}
	bool? showRequiredMark;
	public bool? ShowRequiredMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowRequiredMark(Id) : showRequiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowRequiredMark(Id, value);
			} else {
				this.showRequiredMark = value;
			}
		}
	}
	bool? showValidationSummary;
	public bool? ShowValidationSummary {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowValidationSummary(Id) : showValidationSummary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowValidationSummary(Id, value);
			} else {
				this.showValidationSummary = value;
			}
		}
	}
	string validationGroup;
	public string ValidationGroup {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetValidationGroup(Id) : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetValidationGroup(Id, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	bool? onEditorEnterKeyEnabled;
	public bool? OnEditorEnterKeyEnabled {
		get => onEditorEnterKeyEnabled;
		set => this.onEditorEnterKeyEnabled = value;
	}
	bool? onFieldDataChangedEnabled;
	public bool? OnFieldDataChangedEnabled {
		get => onFieldDataChangedEnabled;
		set => this.onFieldDataChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFormInterop.EditorEnterKey += DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged += DxForm_FieldDataChanged;
	}
	public Action EditorEnterKey { get; set; }
	void DxForm_EditorEnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorEnterKey?.Invoke();
		}
	}
	public Action FieldDataChanged { get; set; }
	void DxForm_FieldDataChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FieldDataChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxFormInterop.EditorEnterKey -= DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged -= DxForm_FieldDataChanged;
	}
}
