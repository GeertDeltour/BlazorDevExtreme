@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxListOptions>

<div id="@Id"></div>

@functions {
	public DxList() : base("DxList") { }
	protected override DevExpress.Ui.DxListOptions CreateOptions() {
		return new DevExpress.Ui.DxListOptions {
			activeStateEnabled = activeStateEnabled,
			allowItemDeleting = allowItemDeleting,
			allowItemReordering = allowItemReordering,
			bounceEnabled = bounceEnabled,
			collapsibleGroups = collapsibleGroups,
			focusStateEnabled = focusStateEnabled,
			grouped = grouped,
			groupTemplate = groupTemplate,
			hoverStateEnabled = hoverStateEnabled,
			indicateLoading = indicateLoading,
			itemDeleteMode = itemDeleteMode,
			menuItems = menuItems,
			menuMode = menuMode,
			nextButtonText = nextButtonText,
			pageLoadingText = pageLoadingText,
			pageLoadMode = pageLoadMode,
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			pullRefreshEnabled = pullRefreshEnabled,
			refreshingText = refreshingText,
			scrollByContent = scrollByContent,
			scrollByThumb = scrollByThumb,
			scrollingEnabled = scrollingEnabled,
			selectAllMode = selectAllMode,
			selectionMode = selectionMode,
			showScrollbar = showScrollbar,
			showSelectionControls = showSelectionControls,
			useNativeScrolling = useNativeScrolling,
			onGroupRenderedEnabled = onGroupRenderedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemDeletedEnabled = onItemDeletedEnabled,
			onItemDeletingEnabled = onItemDeletingEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemReorderedEnabled = onItemReorderedEnabled,
			onItemSwipeEnabled = onItemSwipeEnabled,
			onPageLoadingEnabled = onPageLoadingEnabled,
			onPullRefreshEnabled = onPullRefreshEnabled,
			onScrollEnabled = onScrollEnabled,
			onSelectAllValueChangedEnabled = onSelectAllValueChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxListOptions options) {
		DevExpress.Ui.DxListInterop.Init(Id, options);
	}
	bool? activeStateEnabled;
	public bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetActiveStateEnabled(Id) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetActiveStateEnabled(Id, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? allowItemDeleting;
	public bool? AllowItemDeleting {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetAllowItemDeleting(Id) : allowItemDeleting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemDeleting(Id, value);
			} else {
				this.allowItemDeleting = value;
			}
		}
	}
	bool? allowItemReordering;
	public bool? AllowItemReordering {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetAllowItemReordering(Id) : allowItemReordering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemReordering(Id, value);
			} else {
				this.allowItemReordering = value;
			}
		}
	}
	bool? bounceEnabled;
	public bool? BounceEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetBounceEnabled(Id) : bounceEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetBounceEnabled(Id, value);
			} else {
				this.bounceEnabled = value;
			}
		}
	}
	bool? collapsibleGroups;
	public bool? CollapsibleGroups {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetCollapsibleGroups(Id) : collapsibleGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetCollapsibleGroups(Id, value);
			} else {
				this.collapsibleGroups = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? grouped;
	public bool? Grouped {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetGrouped(Id) : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGrouped(Id, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	public object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetGroupTemplate(Id) : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGroupTemplate(Id, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	bool? hoverStateEnabled;
	public bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetHoverStateEnabled(Id) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetHoverStateEnabled(Id, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	bool? indicateLoading;
	public bool? IndicateLoading {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetIndicateLoading(Id) : indicateLoading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetIndicateLoading(Id, value);
			} else {
				this.indicateLoading = value;
			}
		}
	}
	string itemDeleteMode;
	public string ItemDeleteMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetItemDeleteMode(Id) : itemDeleteMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemDeleteMode(Id, value);
			} else {
				this.itemDeleteMode = value;
			}
		}
	}
	object menuItems;
	public object MenuItems {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetMenuItems(Id) : menuItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuItems(Id, value);
			} else {
				this.menuItems = value;
			}
		}
	}
	string menuMode;
	public string MenuMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetMenuMode(Id) : menuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuMode(Id, value);
			} else {
				this.menuMode = value;
			}
		}
	}
	string nextButtonText;
	public string NextButtonText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetNextButtonText(Id) : nextButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetNextButtonText(Id, value);
			} else {
				this.nextButtonText = value;
			}
		}
	}
	string pageLoadingText;
	public string PageLoadingText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPageLoadingText(Id) : pageLoadingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadingText(Id, value);
			} else {
				this.pageLoadingText = value;
			}
		}
	}
	string pageLoadMode;
	public string PageLoadMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPageLoadMode(Id) : pageLoadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadMode(Id, value);
			} else {
				this.pageLoadMode = value;
			}
		}
	}
	string pulledDownText;
	public string PulledDownText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPulledDownText(Id) : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPulledDownText(Id, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	public string PullingDownText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPullingDownText(Id) : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullingDownText(Id, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	bool? pullRefreshEnabled;
	public bool? PullRefreshEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPullRefreshEnabled(Id) : pullRefreshEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullRefreshEnabled(Id, value);
			} else {
				this.pullRefreshEnabled = value;
			}
		}
	}
	string refreshingText;
	public string RefreshingText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetRefreshingText(Id) : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetRefreshingText(Id, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? scrollByContent;
	public bool? ScrollByContent {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollByContent(Id) : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByContent(Id, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollByThumb;
	public bool? ScrollByThumb {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollByThumb(Id) : scrollByThumb;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByThumb(Id, value);
			} else {
				this.scrollByThumb = value;
			}
		}
	}
	bool? scrollingEnabled;
	public bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollingEnabled(Id) : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollingEnabled(Id, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	string selectAllMode;
	public string SelectAllMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectAllMode(Id) : selectAllMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectAllMode(Id, value);
			} else {
				this.selectAllMode = value;
			}
		}
	}
	string selectionMode;
	public string SelectionMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectionMode(Id) : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectionMode(Id, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	string showScrollbar;
	public string ShowScrollbar {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetShowScrollbar(Id) : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowScrollbar(Id, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	bool? showSelectionControls;
	public bool? ShowSelectionControls {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetShowSelectionControls(Id) : showSelectionControls;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowSelectionControls(Id, value);
			} else {
				this.showSelectionControls = value;
			}
		}
	}
	bool? useNativeScrolling;
	public bool? UseNativeScrolling {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetUseNativeScrolling(Id) : useNativeScrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetUseNativeScrolling(Id, value);
			} else {
				this.useNativeScrolling = value;
			}
		}
	}
	bool? onGroupRenderedEnabled;
	public bool? OnGroupRenderedEnabled {
		get => onGroupRenderedEnabled;
		set => this.onGroupRenderedEnabled = value;
	}
	bool? onItemClickEnabled;
	public bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	public bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemDeletedEnabled;
	public bool? OnItemDeletedEnabled {
		get => onItemDeletedEnabled;
		set => this.onItemDeletedEnabled = value;
	}
	bool? onItemDeletingEnabled;
	public bool? OnItemDeletingEnabled {
		get => onItemDeletingEnabled;
		set => this.onItemDeletingEnabled = value;
	}
	bool? onItemHoldEnabled;
	public bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemReorderedEnabled;
	public bool? OnItemReorderedEnabled {
		get => onItemReorderedEnabled;
		set => this.onItemReorderedEnabled = value;
	}
	bool? onItemSwipeEnabled;
	public bool? OnItemSwipeEnabled {
		get => onItemSwipeEnabled;
		set => this.onItemSwipeEnabled = value;
	}
	bool? onPageLoadingEnabled;
	public bool? OnPageLoadingEnabled {
		get => onPageLoadingEnabled;
		set => this.onPageLoadingEnabled = value;
	}
	bool? onPullRefreshEnabled;
	public bool? OnPullRefreshEnabled {
		get => onPullRefreshEnabled;
		set => this.onPullRefreshEnabled = value;
	}
	bool? onScrollEnabled;
	public bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onSelectAllValueChangedEnabled;
	public bool? OnSelectAllValueChangedEnabled {
		get => onSelectAllValueChangedEnabled;
		set => this.onSelectAllValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxListInterop.GroupRendered += DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick += DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu += DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted += DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting += DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold += DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered += DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe += DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading += DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh += DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll += DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged += DxList_SelectAllValueChanged;
	}
	public Action GroupRendered { get; set; }
	void DxList_GroupRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			GroupRendered?.Invoke();
		}
	}
	public Action ItemClick { get; set; }
	void DxList_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	public Action ItemContextMenu { get; set; }
	void DxList_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	public Action ItemDeleted { get; set; }
	void DxList_ItemDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleted?.Invoke();
		}
	}
	public Action ItemDeleting { get; set; }
	void DxList_ItemDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleting?.Invoke();
		}
	}
	public Action ItemHold { get; set; }
	void DxList_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	public Action ItemReordered { get; set; }
	void DxList_ItemReordered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemReordered?.Invoke();
		}
	}
	public Action ItemSwipe { get; set; }
	void DxList_ItemSwipe(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemSwipe?.Invoke();
		}
	}
	public Action PageLoading { get; set; }
	void DxList_PageLoading(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PageLoading?.Invoke();
		}
	}
	public Action PullRefresh { get; set; }
	void DxList_PullRefresh(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullRefresh?.Invoke();
		}
	}
	public Action Scroll { get; set; }
	void DxList_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	public Action SelectAllValueChanged { get; set; }
	void DxList_SelectAllValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectAllValueChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxListInterop.GroupRendered -= DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick -= DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu -= DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted -= DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting -= DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold -= DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered -= DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe -= DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading -= DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh -= DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll -= DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged -= DxList_SelectAllValueChanged;
	}
}
