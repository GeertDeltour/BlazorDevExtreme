@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxFilterBuilderOptions>

<div id="@Id"></div>

@functions {
	public DxFilterBuilder() : base("DxFilterBuilder") { }
	protected override DevExpress.Ui.DxFilterBuilderOptions CreateOptions() {
		return new DevExpress.Ui.DxFilterBuilderOptions {
			allowHierarchicalFields = allowHierarchicalFields,
			customOperations = customOperations,
			fields = fields,
			filterOperationDescriptions = filterOperationDescriptions,
			groupOperationDescriptions = groupOperationDescriptions,
			value = value,
			onEditorPreparedEnabled = onEditorPreparedEnabled,
			onEditorPreparingEnabled = onEditorPreparingEnabled,
			onValueChangedEnabled = onValueChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxFilterBuilderOptions options) {
		DevExpress.Ui.DxFilterBuilderInterop.Init(Id, options);
	}
	bool? allowHierarchicalFields;
	public bool? AllowHierarchicalFields {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetAllowHierarchicalFields(Id) : allowHierarchicalFields;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetAllowHierarchicalFields(Id, value);
			} else {
				this.allowHierarchicalFields = value;
			}
		}
	}
	object customOperations;
	public object CustomOperations {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetCustomOperations(Id) : customOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetCustomOperations(Id, value);
			} else {
				this.customOperations = value;
			}
		}
	}
	object fields;
	public object Fields {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetFields(Id) : fields;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetFields(Id, value);
			} else {
				this.fields = value;
			}
		}
	}
	object filterOperationDescriptions;
	public object FilterOperationDescriptions {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetFilterOperationDescriptions(Id) : filterOperationDescriptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetFilterOperationDescriptions(Id, value);
			} else {
				this.filterOperationDescriptions = value;
			}
		}
	}
	object groupOperationDescriptions;
	public object GroupOperationDescriptions {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetGroupOperationDescriptions(Id) : groupOperationDescriptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetGroupOperationDescriptions(Id, value);
			} else {
				this.groupOperationDescriptions = value;
			}
		}
	}
	object value;
	public object Value {
		get => isInitialized ? DevExpress.Ui.DxFilterBuilderInterop.GetValue(Id) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFilterBuilderInterop.SetValue(Id, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onEditorPreparedEnabled;
	public bool? OnEditorPreparedEnabled {
		get => onEditorPreparedEnabled;
		set => this.onEditorPreparedEnabled = value;
	}
	bool? onEditorPreparingEnabled;
	public bool? OnEditorPreparingEnabled {
		get => onEditorPreparingEnabled;
		set => this.onEditorPreparingEnabled = value;
	}
	bool? onValueChangedEnabled;
	public bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFilterBuilderInterop.EditorPrepared += DxFilterBuilder_EditorPrepared;
		DevExpress.Ui.DxFilterBuilderInterop.EditorPreparing += DxFilterBuilder_EditorPreparing;
		DevExpress.Ui.DxFilterBuilderInterop.ValueChanged += DxFilterBuilder_ValueChanged;
	}
	public Action EditorPrepared { get; set; }
	void DxFilterBuilder_EditorPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPrepared?.Invoke();
		}
	}
	public Action EditorPreparing { get; set; }
	void DxFilterBuilder_EditorPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPreparing?.Invoke();
		}
	}
	public Action ValueChanged { get; set; }
	void DxFilterBuilder_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxFilterBuilderInterop.EditorPrepared -= DxFilterBuilder_EditorPrepared;
		DevExpress.Ui.DxFilterBuilderInterop.EditorPreparing -= DxFilterBuilder_EditorPreparing;
		DevExpress.Ui.DxFilterBuilderInterop.ValueChanged -= DxFilterBuilder_ValueChanged;
	}
}
