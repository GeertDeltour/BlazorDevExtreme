@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxColorBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxColorBox() : base("DxColorBox") { }
	protected override DevExpress.Ui.DxColorBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxColorBoxOptions {
			applyButtonText = applyButtonText,
			applyValueMode = applyValueMode,
			cancelButtonText = cancelButtonText,
			editAlphaChannel = editAlphaChannel,
			fieldTemplate = fieldTemplate,
			keyStep = keyStep,
			value = value,
		};
	}
	protected override Task Init(DevExpress.Ui.DxColorBoxOptions options) {
return 		DevExpress.Ui.DxColorBoxInterop.Init(dxTarget, options);
	}
	string applyButtonText;
	[Parameter]
	string ApplyButtonText {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetApplyButtonText(dxTarget).Result : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetApplyButtonText(dxTarget, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetApplyValueMode(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	string cancelButtonText;
	[Parameter]
	string CancelButtonText {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetCancelButtonText(dxTarget).Result : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetCancelButtonText(dxTarget, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	bool? editAlphaChannel;
	[Parameter]
	bool? EditAlphaChannel {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetEditAlphaChannel(dxTarget).Result : editAlphaChannel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetEditAlphaChannel(dxTarget, value);
			} else {
				this.editAlphaChannel = value;
			}
		}
	}
	object fieldTemplate;
	[Parameter]
	object FieldTemplate {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetFieldTemplate(dxTarget).Result : fieldTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetFieldTemplate(dxTarget, value);
			} else {
				this.fieldTemplate = value;
			}
		}
	}
	float? keyStep;
	[Parameter]
	float? KeyStep {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetKeyStep(dxTarget).Result : keyStep;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetKeyStep(dxTarget, value);
			} else {
				this.keyStep = value;
			}
		}
	}
	string value;
	[Parameter]
	string Value {
		get => isInitialized ? DevExpress.Ui.DxColorBoxInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxColorBoxInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
