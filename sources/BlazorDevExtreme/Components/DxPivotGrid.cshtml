@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxPivotGridOptions>

<div id="@Id"></div>

@functions {
	public DxPivotGrid() : base("DxPivotGrid") { }
	protected override DevExpress.Ui.DxPivotGridOptions CreateOptions() {
		return new DevExpress.Ui.DxPivotGridOptions {
			allowExpandAll = allowExpandAll,
			allowFiltering = allowFiltering,
			allowSorting = allowSorting,
			allowSortingBySummary = allowSortingBySummary,
			dataFieldArea = dataFieldArea,
			dataSource = dataSource,
			export = export,
			fieldChooser = fieldChooser,
			fieldPanel = fieldPanel,
			headerFilter = headerFilter,
			hideEmptySummaryCells = hideEmptySummaryCells,
			loadPanel = loadPanel,
			rowHeaderLayout = rowHeaderLayout,
			scrolling = scrolling,
			showBorders = showBorders,
			showColumnGrandTotals = showColumnGrandTotals,
			showColumnTotals = showColumnTotals,
			showRowGrandTotals = showRowGrandTotals,
			showRowTotals = showRowTotals,
			showTotalsPrior = showTotalsPrior,
			stateStoring = stateStoring,
			texts = texts,
			wordWrapEnabled = wordWrapEnabled,
			onCellClickEnabled = onCellClickEnabled,
			onCellPreparedEnabled = onCellPreparedEnabled,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxPivotGridOptions options) {
		DevExpress.Ui.DxPivotGridInterop.Init(Id, options);
	}
	bool? allowExpandAll;
	public bool? AllowExpandAll {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetAllowExpandAll(Id) : allowExpandAll;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowExpandAll(Id, value);
			} else {
				this.allowExpandAll = value;
			}
		}
	}
	bool? allowFiltering;
	public bool? AllowFiltering {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetAllowFiltering(Id) : allowFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowFiltering(Id, value);
			} else {
				this.allowFiltering = value;
			}
		}
	}
	bool? allowSorting;
	public bool? AllowSorting {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetAllowSorting(Id) : allowSorting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowSorting(Id, value);
			} else {
				this.allowSorting = value;
			}
		}
	}
	bool? allowSortingBySummary;
	public bool? AllowSortingBySummary {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetAllowSortingBySummary(Id) : allowSortingBySummary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetAllowSortingBySummary(Id, value);
			} else {
				this.allowSortingBySummary = value;
			}
		}
	}
	string dataFieldArea;
	public string DataFieldArea {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetDataFieldArea(Id) : dataFieldArea;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetDataFieldArea(Id, value);
			} else {
				this.dataFieldArea = value;
			}
		}
	}
	object dataSource;
	public object DataSource {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetDataSource(Id) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetDataSource(Id, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object export;
	public object Export {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetExport(Id) : export;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetExport(Id, value);
			} else {
				this.export = value;
			}
		}
	}
	object fieldChooser;
	public object FieldChooser {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetFieldChooser(Id) : fieldChooser;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetFieldChooser(Id, value);
			} else {
				this.fieldChooser = value;
			}
		}
	}
	object fieldPanel;
	public object FieldPanel {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetFieldPanel(Id) : fieldPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetFieldPanel(Id, value);
			} else {
				this.fieldPanel = value;
			}
		}
	}
	object headerFilter;
	public object HeaderFilter {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetHeaderFilter(Id) : headerFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHeaderFilter(Id, value);
			} else {
				this.headerFilter = value;
			}
		}
	}
	bool? hideEmptySummaryCells;
	public bool? HideEmptySummaryCells {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetHideEmptySummaryCells(Id) : hideEmptySummaryCells;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetHideEmptySummaryCells(Id, value);
			} else {
				this.hideEmptySummaryCells = value;
			}
		}
	}
	object loadPanel;
	public object LoadPanel {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetLoadPanel(Id) : loadPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetLoadPanel(Id, value);
			} else {
				this.loadPanel = value;
			}
		}
	}
	string rowHeaderLayout;
	public string RowHeaderLayout {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetRowHeaderLayout(Id) : rowHeaderLayout;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetRowHeaderLayout(Id, value);
			} else {
				this.rowHeaderLayout = value;
			}
		}
	}
	object scrolling;
	public object Scrolling {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetScrolling(Id) : scrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetScrolling(Id, value);
			} else {
				this.scrolling = value;
			}
		}
	}
	bool? showBorders;
	public bool? ShowBorders {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowBorders(Id) : showBorders;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowBorders(Id, value);
			} else {
				this.showBorders = value;
			}
		}
	}
	bool? showColumnGrandTotals;
	public bool? ShowColumnGrandTotals {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowColumnGrandTotals(Id) : showColumnGrandTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowColumnGrandTotals(Id, value);
			} else {
				this.showColumnGrandTotals = value;
			}
		}
	}
	bool? showColumnTotals;
	public bool? ShowColumnTotals {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowColumnTotals(Id) : showColumnTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowColumnTotals(Id, value);
			} else {
				this.showColumnTotals = value;
			}
		}
	}
	bool? showRowGrandTotals;
	public bool? ShowRowGrandTotals {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowRowGrandTotals(Id) : showRowGrandTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowRowGrandTotals(Id, value);
			} else {
				this.showRowGrandTotals = value;
			}
		}
	}
	bool? showRowTotals;
	public bool? ShowRowTotals {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowRowTotals(Id) : showRowTotals;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowRowTotals(Id, value);
			} else {
				this.showRowTotals = value;
			}
		}
	}
	string showTotalsPrior;
	public string ShowTotalsPrior {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetShowTotalsPrior(Id) : showTotalsPrior;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetShowTotalsPrior(Id, value);
			} else {
				this.showTotalsPrior = value;
			}
		}
	}
	object stateStoring;
	public object StateStoring {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetStateStoring(Id) : stateStoring;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetStateStoring(Id, value);
			} else {
				this.stateStoring = value;
			}
		}
	}
	object texts;
	public object Texts {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetTexts(Id) : texts;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetTexts(Id, value);
			} else {
				this.texts = value;
			}
		}
	}
	bool? wordWrapEnabled;
	public bool? WordWrapEnabled {
		get => isInitialized ? DevExpress.Ui.DxPivotGridInterop.GetWordWrapEnabled(Id) : wordWrapEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPivotGridInterop.SetWordWrapEnabled(Id, value);
			} else {
				this.wordWrapEnabled = value;
			}
		}
	}
	bool? onCellClickEnabled;
	public bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellPreparedEnabled;
	public bool? OnCellPreparedEnabled {
		get => onCellPreparedEnabled;
		set => this.onCellPreparedEnabled = value;
	}
	bool? onContextMenuPreparingEnabled;
	public bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	bool? onExportedEnabled;
	public bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	public bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	public bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxPivotGridInterop.CellClick += DxPivotGrid_CellClick;
		DevExpress.Ui.DxPivotGridInterop.CellPrepared += DxPivotGrid_CellPrepared;
		DevExpress.Ui.DxPivotGridInterop.ContextMenuPreparing += DxPivotGrid_ContextMenuPreparing;
		DevExpress.Ui.DxPivotGridInterop.Exported += DxPivotGrid_Exported;
		DevExpress.Ui.DxPivotGridInterop.Exporting += DxPivotGrid_Exporting;
		DevExpress.Ui.DxPivotGridInterop.FileSaving += DxPivotGrid_FileSaving;
	}
	public Action CellClick { get; set; }
	void DxPivotGrid_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	public Action CellPrepared { get; set; }
	void DxPivotGrid_CellPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellPrepared?.Invoke();
		}
	}
	public Action ContextMenuPreparing { get; set; }
	void DxPivotGrid_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	public Action Exported { get; set; }
	void DxPivotGrid_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	public Action Exporting { get; set; }
	void DxPivotGrid_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	public Action FileSaving { get; set; }
	void DxPivotGrid_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxPivotGridInterop.CellClick -= DxPivotGrid_CellClick;
		DevExpress.Ui.DxPivotGridInterop.CellPrepared -= DxPivotGrid_CellPrepared;
		DevExpress.Ui.DxPivotGridInterop.ContextMenuPreparing -= DxPivotGrid_ContextMenuPreparing;
		DevExpress.Ui.DxPivotGridInterop.Exported -= DxPivotGrid_Exported;
		DevExpress.Ui.DxPivotGridInterop.Exporting -= DxPivotGrid_Exporting;
		DevExpress.Ui.DxPivotGridInterop.FileSaving -= DxPivotGrid_FileSaving;
	}
}
