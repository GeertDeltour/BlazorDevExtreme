@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxPopupOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxPopup() : base("DxPopup") { }
	protected override DevExpress.Ui.DxPopupOptions CreateOptions() {
		return new DevExpress.Ui.DxPopupOptions {
			animation = animation,
			container = container,
			dragEnabled = dragEnabled,
			focusStateEnabled = focusStateEnabled,
			fullScreen = fullScreen,
			height = height,
			position = position,
			resizeEnabled = resizeEnabled,
			showCloseButton = showCloseButton,
			showTitle = showTitle,
			title = title,
			titleTemplate = titleTemplate,
			toolbarItems = toolbarItems,
			width = width,
			onResizeEnabled = onResizeEnabled,
			onResizeEndEnabled = onResizeEndEnabled,
			onResizeStartEnabled = onResizeStartEnabled,
			onTitleRenderedEnabled = onTitleRenderedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxPopupOptions options) {
		DevExpress.Ui.DxPopupInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object container;
	[Parameter]
	object Container {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetContainer(dxTarget) : container;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetContainer(dxTarget, value);
			} else {
				this.container = value;
			}
		}
	}
	bool? dragEnabled;
	[Parameter]
	bool? DragEnabled {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetDragEnabled(dxTarget) : dragEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetDragEnabled(dxTarget, value);
			} else {
				this.dragEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? fullScreen;
	[Parameter]
	bool? FullScreen {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetFullScreen(dxTarget) : fullScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetFullScreen(dxTarget, value);
			} else {
				this.fullScreen = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetHeight(dxTarget) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetPosition(dxTarget) : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	bool? resizeEnabled;
	[Parameter]
	bool? ResizeEnabled {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetResizeEnabled(dxTarget) : resizeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetResizeEnabled(dxTarget, value);
			} else {
				this.resizeEnabled = value;
			}
		}
	}
	bool? showCloseButton;
	[Parameter]
	bool? ShowCloseButton {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetShowCloseButton(dxTarget) : showCloseButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetShowCloseButton(dxTarget, value);
			} else {
				this.showCloseButton = value;
			}
		}
	}
	bool? showTitle;
	[Parameter]
	bool? ShowTitle {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetShowTitle(dxTarget) : showTitle;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetShowTitle(dxTarget, value);
			} else {
				this.showTitle = value;
			}
		}
	}
	string title;
	[Parameter]
	string Title {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetTitle(dxTarget) : title;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object titleTemplate;
	[Parameter]
	object TitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetTitleTemplate(dxTarget) : titleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetTitleTemplate(dxTarget, value);
			} else {
				this.titleTemplate = value;
			}
		}
	}
	object toolbarItems;
	[Parameter]
	object ToolbarItems {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetToolbarItems(dxTarget) : toolbarItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetToolbarItems(dxTarget, value);
			} else {
				this.toolbarItems = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxPopupInterop.GetWidth(dxTarget) : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxPopupInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onResizeEnabled;
	[Parameter]
	bool? OnResizeEnabled {
		get => onResizeEnabled;
		set => this.onResizeEnabled = value;
	}
	bool? onResizeEndEnabled;
	[Parameter]
	bool? OnResizeEndEnabled {
		get => onResizeEndEnabled;
		set => this.onResizeEndEnabled = value;
	}
	bool? onResizeStartEnabled;
	[Parameter]
	bool? OnResizeStartEnabled {
		get => onResizeStartEnabled;
		set => this.onResizeStartEnabled = value;
	}
	bool? onTitleRenderedEnabled;
	[Parameter]
	bool? OnTitleRenderedEnabled {
		get => onTitleRenderedEnabled;
		set => this.onTitleRenderedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxPopupInterop.Resize += DxPopup_Resize;
		DevExpress.Ui.DxPopupInterop.ResizeEnd += DxPopup_ResizeEnd;
		DevExpress.Ui.DxPopupInterop.ResizeStart += DxPopup_ResizeStart;
		DevExpress.Ui.DxPopupInterop.TitleRendered += DxPopup_TitleRendered;
	}
	[Parameter]
	Action Resize { get; set; }
	void DxPopup_Resize(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Resize?.Invoke();
		}
	}
	[Parameter]
	Action ResizeEnd { get; set; }
	void DxPopup_ResizeEnd(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeEnd?.Invoke();
		}
	}
	[Parameter]
	Action ResizeStart { get; set; }
	void DxPopup_ResizeStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeStart?.Invoke();
		}
	}
	[Parameter]
	Action TitleRendered { get; set; }
	void DxPopup_TitleRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleRendered?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxPopupInterop.Resize -= DxPopup_Resize;
		DevExpress.Ui.DxPopupInterop.ResizeEnd -= DxPopup_ResizeEnd;
		DevExpress.Ui.DxPopupInterop.ResizeStart -= DxPopup_ResizeStart;
		DevExpress.Ui.DxPopupInterop.TitleRendered -= DxPopup_TitleRendered;
	}
}
