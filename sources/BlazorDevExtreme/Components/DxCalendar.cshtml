@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxCalendarOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxCalendar() : base("DxCalendar") { }
	protected override DevExpress.Ui.DxCalendarOptions CreateOptions() {
		return new DevExpress.Ui.DxCalendarOptions {
			activeStateEnabled = activeStateEnabled,
			cellTemplate = cellTemplate,
			dateSerializationFormat = dateSerializationFormat,
			disabledDates = disabledDates,
			firstDayOfWeek = firstDayOfWeek,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			max = max,
			maxZoomLevel = maxZoomLevel,
			min = min,
			minZoomLevel = minZoomLevel,
			name = name,
			showTodayButton = showTodayButton,
			value = value,
			zoomLevel = zoomLevel,
		};
	}
	protected override void Init(DevExpress.Ui.DxCalendarOptions options) {
		DevExpress.Ui.DxCalendarInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetActiveStateEnabled(dxTarget) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	object cellTemplate;
	[Parameter]
	object CellTemplate {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetCellTemplate(dxTarget) : cellTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetCellTemplate(dxTarget, value);
			} else {
				this.cellTemplate = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetDateSerializationFormat(dxTarget) : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDateSerializationFormat(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	object disabledDates;
	[Parameter]
	object DisabledDates {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetDisabledDates(dxTarget) : disabledDates;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetDisabledDates(dxTarget, value);
			} else {
				this.disabledDates = value;
			}
		}
	}
	object firstDayOfWeek;
	[Parameter]
	object FirstDayOfWeek {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetFirstDayOfWeek(dxTarget) : firstDayOfWeek;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFirstDayOfWeek(dxTarget, value);
			} else {
				this.firstDayOfWeek = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetHoverStateEnabled(dxTarget) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMax(dxTarget) : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMax(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	string maxZoomLevel;
	[Parameter]
	string MaxZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMaxZoomLevel(dxTarget) : maxZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMaxZoomLevel(dxTarget, value);
			} else {
				this.maxZoomLevel = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMin(dxTarget) : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMin(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string minZoomLevel;
	[Parameter]
	string MinZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetMinZoomLevel(dxTarget) : minZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetMinZoomLevel(dxTarget, value);
			} else {
				this.minZoomLevel = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetName(dxTarget) : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetName(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	bool? showTodayButton;
	[Parameter]
	bool? ShowTodayButton {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetShowTodayButton(dxTarget) : showTodayButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetShowTodayButton(dxTarget, value);
			} else {
				this.showTodayButton = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	string zoomLevel;
	[Parameter]
	string ZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxCalendarInterop.GetZoomLevel(dxTarget) : zoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxCalendarInterop.SetZoomLevel(dxTarget, value);
			} else {
				this.zoomLevel = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
