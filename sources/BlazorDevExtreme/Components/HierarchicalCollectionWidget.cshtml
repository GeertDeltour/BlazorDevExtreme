@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.HierarchicalCollectionWidgetOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public HierarchicalCollectionWidget() : base("HierarchicalCollectionWidget") { }
	protected override DevExpress.Ui.HierarchicalCollectionWidgetOptions CreateOptions() {
		return new DevExpress.Ui.HierarchicalCollectionWidgetOptions {
			disabledExpr = disabledExpr,
			displayExpr = displayExpr,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			itemsExpr = itemsExpr,
			keyExpr = keyExpr,
			selectedExpr = selectedExpr,
		};
	}
	protected override void Init(DevExpress.Ui.HierarchicalCollectionWidgetOptions options) {
		DevExpress.Ui.HierarchicalCollectionWidgetInterop.Init(dxTarget, options);
	}
	object disabledExpr;
	[Parameter]
	object DisabledExpr {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetDisabledExpr(dxTarget) : disabledExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetDisabledExpr(dxTarget, value);
			} else {
				this.disabledExpr = value;
			}
		}
	}
	object displayExpr;
	[Parameter]
	object DisplayExpr {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetDisplayExpr(dxTarget) : displayExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetDisplayExpr(dxTarget, value);
			} else {
				this.displayExpr = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetHoverStateEnabled(dxTarget) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object itemsExpr;
	[Parameter]
	object ItemsExpr {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetItemsExpr(dxTarget) : itemsExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetItemsExpr(dxTarget, value);
			} else {
				this.itemsExpr = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetKeyExpr(dxTarget) : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetKeyExpr(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object selectedExpr;
	[Parameter]
	object SelectedExpr {
		get => isInitialized ? DevExpress.Ui.HierarchicalCollectionWidgetInterop.GetSelectedExpr(dxTarget) : selectedExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.HierarchicalCollectionWidgetInterop.SetSelectedExpr(dxTarget, value);
			} else {
				this.selectedExpr = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
