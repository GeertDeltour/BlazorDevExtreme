@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxButtonOptions>

<div id="@Id"></div>

@functions {
	public DxButton() : base("DxButton") { }
	protected override DevExpress.Ui.DxButtonOptions CreateOptions() {
		return new DevExpress.Ui.DxButtonOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			icon = icon,
			text = text,
			type = type,
			useSubmitBehavior = useSubmitBehavior,
			validationGroup = validationGroup,
			onClickEnabled = onClickEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxButtonOptions options) {
		DxButtonInterop.Init(Id, options);
	}
	bool? activeStateEnabled;
	public bool? ActiveStateEnabled {
		get => isInitialized ? DxButtonInterop.GetActiveStateEnabled(Id) : activeStateEnabled;
		set {
			if (isInitialized) {
				DxButtonInterop.SetActiveStateEnabled(Id, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DxButtonInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DxButtonInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	public bool? HoverStateEnabled {
		get => isInitialized ? DxButtonInterop.GetHoverStateEnabled(Id) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DxButtonInterop.SetHoverStateEnabled(Id, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	string icon;
	public string Icon {
		get => isInitialized ? DxButtonInterop.GetIcon(Id) : icon;
		set {
			if (isInitialized) {
				DxButtonInterop.SetIcon(Id, value);
			} else {
				this.icon = value;
			}
		}
	}
	string text;
	public string Text {
		get => isInitialized ? DxButtonInterop.GetText(Id) : text;
		set {
			if (isInitialized) {
				DxButtonInterop.SetText(Id, value);
			} else {
				this.text = value;
			}
		}
	}
	string type;
	public string Type {
		get => isInitialized ? DxButtonInterop.GetType(Id) : type;
		set {
			if (isInitialized) {
				DxButtonInterop.SetType(Id, value);
			} else {
				this.type = value;
			}
		}
	}
	bool? useSubmitBehavior;
	public bool? UseSubmitBehavior {
		get => isInitialized ? DxButtonInterop.GetUseSubmitBehavior(Id) : useSubmitBehavior;
		set {
			if (isInitialized) {
				DxButtonInterop.SetUseSubmitBehavior(Id, value);
			} else {
				this.useSubmitBehavior = value;
			}
		}
	}
	string validationGroup;
	public string ValidationGroup {
		get => isInitialized ? DxButtonInterop.GetValidationGroup(Id) : validationGroup;
		set {
			if (isInitialized) {
				DxButtonInterop.SetValidationGroup(Id, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	bool? onClickEnabled;
	public bool? OnClickEnabled {
		get => onClickEnabled;
		set => this.onClickEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DxButtonInterop.Click += DxButton_Click;
	}
	public Action Click { get; set; }
	void DxButton_Click(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Click?.Invoke();
		}
	}
	public void Dispose() {
		DxButtonInterop.Click -= DxButton_Click;
	}
}
