@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxDateBoxOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDateBox() : base("DxDateBox") { }
	protected override DevExpress.Ui.DxDateBoxOptions CreateOptions() {
		return new DevExpress.Ui.DxDateBoxOptions {
			adaptivityEnabled = adaptivityEnabled,
			applyButtonText = applyButtonText,
			calendarOptions = calendarOptions,
			cancelButtonText = cancelButtonText,
			dateOutOfRangeMessage = dateOutOfRangeMessage,
			dateSerializationFormat = dateSerializationFormat,
			disabledDates = disabledDates,
			displayFormat = displayFormat,
			interval = interval,
			invalidDateMessage = invalidDateMessage,
			max = max,
			maxZoomLevel = maxZoomLevel,
			min = min,
			minZoomLevel = minZoomLevel,
			pickerType = pickerType,
			placeholder = placeholder,
			showAnalogClock = showAnalogClock,
			type = type,
			value = value,
		};
	}
	protected override void Init(DevExpress.Ui.DxDateBoxOptions options) {
		DevExpress.Ui.DxDateBoxInterop.Init(dxTarget, options);
	}
	bool? adaptivityEnabled;
	[Parameter]
	bool? AdaptivityEnabled {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetAdaptivityEnabled(dxTarget) : adaptivityEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetAdaptivityEnabled(dxTarget, value);
			} else {
				this.adaptivityEnabled = value;
			}
		}
	}
	string applyButtonText;
	[Parameter]
	string ApplyButtonText {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetApplyButtonText(dxTarget) : applyButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetApplyButtonText(dxTarget, value);
			} else {
				this.applyButtonText = value;
			}
		}
	}
	object calendarOptions;
	[Parameter]
	object CalendarOptions {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetCalendarOptions(dxTarget) : calendarOptions;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetCalendarOptions(dxTarget, value);
			} else {
				this.calendarOptions = value;
			}
		}
	}
	string cancelButtonText;
	[Parameter]
	string CancelButtonText {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetCancelButtonText(dxTarget) : cancelButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetCancelButtonText(dxTarget, value);
			} else {
				this.cancelButtonText = value;
			}
		}
	}
	string dateOutOfRangeMessage;
	[Parameter]
	string DateOutOfRangeMessage {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDateOutOfRangeMessage(dxTarget) : dateOutOfRangeMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDateOutOfRangeMessage(dxTarget, value);
			} else {
				this.dateOutOfRangeMessage = value;
			}
		}
	}
	string dateSerializationFormat;
	[Parameter]
	string DateSerializationFormat {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDateSerializationFormat(dxTarget) : dateSerializationFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDateSerializationFormat(dxTarget, value);
			} else {
				this.dateSerializationFormat = value;
			}
		}
	}
	object disabledDates;
	[Parameter]
	object DisabledDates {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisabledDates(dxTarget) : disabledDates;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDisabledDates(dxTarget, value);
			} else {
				this.disabledDates = value;
			}
		}
	}
	object displayFormat;
	[Parameter]
	object DisplayFormat {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetDisplayFormat(dxTarget) : displayFormat;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetDisplayFormat(dxTarget, value);
			} else {
				this.displayFormat = value;
			}
		}
	}
	float? interval;
	[Parameter]
	float? Interval {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetInterval(dxTarget) : interval;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetInterval(dxTarget, value);
			} else {
				this.interval = value;
			}
		}
	}
	string invalidDateMessage;
	[Parameter]
	string InvalidDateMessage {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetInvalidDateMessage(dxTarget) : invalidDateMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetInvalidDateMessage(dxTarget, value);
			} else {
				this.invalidDateMessage = value;
			}
		}
	}
	object max;
	[Parameter]
	object Max {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMax(dxTarget) : max;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMax(dxTarget, value);
			} else {
				this.max = value;
			}
		}
	}
	string maxZoomLevel;
	[Parameter]
	string MaxZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMaxZoomLevel(dxTarget) : maxZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMaxZoomLevel(dxTarget, value);
			} else {
				this.maxZoomLevel = value;
			}
		}
	}
	object min;
	[Parameter]
	object Min {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMin(dxTarget) : min;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMin(dxTarget, value);
			} else {
				this.min = value;
			}
		}
	}
	string minZoomLevel;
	[Parameter]
	string MinZoomLevel {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetMinZoomLevel(dxTarget) : minZoomLevel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetMinZoomLevel(dxTarget, value);
			} else {
				this.minZoomLevel = value;
			}
		}
	}
	string pickerType;
	[Parameter]
	string PickerType {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetPickerType(dxTarget) : pickerType;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetPickerType(dxTarget, value);
			} else {
				this.pickerType = value;
			}
		}
	}
	string placeholder;
	[Parameter]
	string Placeholder {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetPlaceholder(dxTarget) : placeholder;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetPlaceholder(dxTarget, value);
			} else {
				this.placeholder = value;
			}
		}
	}
	bool? showAnalogClock;
	[Parameter]
	bool? ShowAnalogClock {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetShowAnalogClock(dxTarget) : showAnalogClock;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetShowAnalogClock(dxTarget, value);
			} else {
				this.showAnalogClock = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetType(dxTarget) : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetType(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxDateBoxInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDateBoxInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Close() {
		DevExpress.Ui.DxDateBoxInterop.Close(dxTarget);
	}
	public void Open() {
		DevExpress.Ui.DxDateBoxInterop.Open(dxTarget);
	}
	public void Dispose() {
	}
}
