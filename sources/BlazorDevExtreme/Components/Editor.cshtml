@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.EditorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public Editor() : base("Editor") { }
	protected override DevExpress.Ui.EditorOptions CreateOptions() {
		return new DevExpress.Ui.EditorOptions {
			isValid = isValid,
			readOnly = readOnly,
			validationError = validationError,
			validationMessageMode = validationMessageMode,
			value = value,
			onValueChangedEnabled = onValueChangedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.EditorOptions options) {
return 		DevExpress.Ui.EditorInterop.Init(dxTarget, options);
	}
	bool? isValid;
	[Parameter]
	bool? IsValid {
		get => isInitialized ? DevExpress.Ui.EditorInterop.GetIsValid(dxTarget).Result : isValid;
		set {
			if (isInitialized) {
				DevExpress.Ui.EditorInterop.SetIsValid(dxTarget, value);
			} else {
				this.isValid = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? DevExpress.Ui.EditorInterop.GetReadOnly(dxTarget).Result : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.EditorInterop.SetReadOnly(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	object validationError;
	[Parameter]
	object ValidationError {
		get => isInitialized ? DevExpress.Ui.EditorInterop.GetValidationError(dxTarget).Result : validationError;
		set {
			if (isInitialized) {
				DevExpress.Ui.EditorInterop.SetValidationError(dxTarget, value);
			} else {
				this.validationError = value;
			}
		}
	}
	string validationMessageMode;
	[Parameter]
	string ValidationMessageMode {
		get => isInitialized ? DevExpress.Ui.EditorInterop.GetValidationMessageMode(dxTarget).Result : validationMessageMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.EditorInterop.SetValidationMessageMode(dxTarget, value);
			} else {
				this.validationMessageMode = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.EditorInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.EditorInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onValueChangedEnabled;
	[Parameter]
	bool? OnValueChangedEnabled {
		get => onValueChangedEnabled;
		set => this.onValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.EditorInterop.ValueChanged += Editor_ValueChanged;
	}
	[Parameter]
	Action ValueChanged { get; set; }
	void Editor_ValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ValueChanged?.Invoke();
		}
	}
	public void Reset() {
		DevExpress.Ui.EditorInterop.Reset(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.EditorInterop.ValueChanged -= Editor_ValueChanged;
	}
}
