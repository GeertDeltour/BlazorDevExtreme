@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxButtonOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxButton() : base("DxButton") { }
	protected override DevExpress.Ui.DxButtonOptions CreateOptions() {
		return new DevExpress.Ui.DxButtonOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			icon = icon,
			template = template,
			text = text,
			type = type,
			useSubmitBehavior = useSubmitBehavior,
			validationGroup = validationGroup,
			onClickEnabled = onClickEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxButtonOptions options) {
return 		DevExpress.Ui.DxButtonInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	string icon;
	[Parameter]
	string Icon {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetIcon(dxTarget).Result : icon;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetIcon(dxTarget, value);
			} else {
				this.icon = value;
			}
		}
	}
	object template;
	[Parameter]
	object Template {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetTemplate(dxTarget).Result : template;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetTemplate(dxTarget, value);
			} else {
				this.template = value;
			}
		}
	}
	string text;
	[Parameter]
	string Text {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetText(dxTarget).Result : text;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetText(dxTarget, value);
			} else {
				this.text = value;
			}
		}
	}
	string type;
	[Parameter]
	string Type {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetType(dxTarget).Result : type;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetType(dxTarget, value);
			} else {
				this.type = value;
			}
		}
	}
	bool? useSubmitBehavior;
	[Parameter]
	bool? UseSubmitBehavior {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetUseSubmitBehavior(dxTarget).Result : useSubmitBehavior;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetUseSubmitBehavior(dxTarget, value);
			} else {
				this.useSubmitBehavior = value;
			}
		}
	}
	string validationGroup;
	[Parameter]
	string ValidationGroup {
		get => isInitialized ? DevExpress.Ui.DxButtonInterop.GetValidationGroup(dxTarget).Result : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxButtonInterop.SetValidationGroup(dxTarget, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	bool? onClickEnabled;
	[Parameter]
	bool? OnClickEnabled {
		get => onClickEnabled;
		set => this.onClickEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxButtonInterop.Click += DxButton_Click;
	}
	[Parameter]
	Action Click { get; set; }
	void DxButton_Click(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Click?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxButtonInterop.Click -= DxButton_Click;
	}
}
