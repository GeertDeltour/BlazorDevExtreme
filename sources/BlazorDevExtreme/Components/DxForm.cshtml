@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxFormOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxForm() : base("DxForm") { }
	protected override DevExpress.Ui.DxFormOptions CreateOptions() {
		return new DevExpress.Ui.DxFormOptions {
			alignItemLabels = alignItemLabels,
			alignItemLabelsInAllGroups = alignItemLabelsInAllGroups,
			colCount = colCount,
			colCountByScreen = colCountByScreen,
			customizeItem = customizeItem,
			formData = formData,
			items = items,
			labelLocation = labelLocation,
			minColWidth = minColWidth,
			optionalMark = optionalMark,
			readOnly = readOnly,
			requiredMark = requiredMark,
			requiredMessage = requiredMessage,
			screenByWidth = screenByWidth,
			scrollingEnabled = scrollingEnabled,
			showColonAfterLabel = showColonAfterLabel,
			showOptionalMark = showOptionalMark,
			showRequiredMark = showRequiredMark,
			showValidationSummary = showValidationSummary,
			validationGroup = validationGroup,
			onEditorEnterKeyEnabled = onEditorEnterKeyEnabled,
			onFieldDataChangedEnabled = onFieldDataChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxFormOptions options) {
		DevExpress.Ui.DxFormInterop.Init(dxTarget, options);
	}
	bool? alignItemLabels;
	[Parameter]
	bool? AlignItemLabels {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetAlignItemLabels(dxTarget) : alignItemLabels;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabels(dxTarget, value);
			} else {
				this.alignItemLabels = value;
			}
		}
	}
	bool? alignItemLabelsInAllGroups;
	[Parameter]
	bool? AlignItemLabelsInAllGroups {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetAlignItemLabelsInAllGroups(dxTarget) : alignItemLabelsInAllGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetAlignItemLabelsInAllGroups(dxTarget, value);
			} else {
				this.alignItemLabelsInAllGroups = value;
			}
		}
	}
	object colCount;
	[Parameter]
	object ColCount {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCount(dxTarget) : colCount;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCount(dxTarget, value);
			} else {
				this.colCount = value;
			}
		}
	}
	object colCountByScreen;
	[Parameter]
	object ColCountByScreen {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetColCountByScreen(dxTarget) : colCountByScreen;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetColCountByScreen(dxTarget, value);
			} else {
				this.colCountByScreen = value;
			}
		}
	}
	object customizeItem;
	[Parameter]
	object CustomizeItem {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetCustomizeItem(dxTarget) : customizeItem;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetCustomizeItem(dxTarget, value);
			} else {
				this.customizeItem = value;
			}
		}
	}
	object formData;
	[Parameter]
	object FormData {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetFormData(dxTarget) : formData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetFormData(dxTarget, value);
			} else {
				this.formData = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetItems(dxTarget) : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	string labelLocation;
	[Parameter]
	string LabelLocation {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetLabelLocation(dxTarget) : labelLocation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetLabelLocation(dxTarget, value);
			} else {
				this.labelLocation = value;
			}
		}
	}
	float? minColWidth;
	[Parameter]
	float? MinColWidth {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetMinColWidth(dxTarget) : minColWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetMinColWidth(dxTarget, value);
			} else {
				this.minColWidth = value;
			}
		}
	}
	string optionalMark;
	[Parameter]
	string OptionalMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetOptionalMark(dxTarget) : optionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetOptionalMark(dxTarget, value);
			} else {
				this.optionalMark = value;
			}
		}
	}
	bool? readOnly;
	[Parameter]
	bool? ReadOnly {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetReadOnly(dxTarget) : readOnly;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetReadOnly(dxTarget, value);
			} else {
				this.readOnly = value;
			}
		}
	}
	string requiredMark;
	[Parameter]
	string RequiredMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetRequiredMark(dxTarget) : requiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMark(dxTarget, value);
			} else {
				this.requiredMark = value;
			}
		}
	}
	string requiredMessage;
	[Parameter]
	string RequiredMessage {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetRequiredMessage(dxTarget) : requiredMessage;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetRequiredMessage(dxTarget, value);
			} else {
				this.requiredMessage = value;
			}
		}
	}
	object screenByWidth;
	[Parameter]
	object ScreenByWidth {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetScreenByWidth(dxTarget) : screenByWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScreenByWidth(dxTarget, value);
			} else {
				this.screenByWidth = value;
			}
		}
	}
	bool? scrollingEnabled;
	[Parameter]
	bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetScrollingEnabled(dxTarget) : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetScrollingEnabled(dxTarget, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	bool? showColonAfterLabel;
	[Parameter]
	bool? ShowColonAfterLabel {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowColonAfterLabel(dxTarget) : showColonAfterLabel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowColonAfterLabel(dxTarget, value);
			} else {
				this.showColonAfterLabel = value;
			}
		}
	}
	bool? showOptionalMark;
	[Parameter]
	bool? ShowOptionalMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowOptionalMark(dxTarget) : showOptionalMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowOptionalMark(dxTarget, value);
			} else {
				this.showOptionalMark = value;
			}
		}
	}
	bool? showRequiredMark;
	[Parameter]
	bool? ShowRequiredMark {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowRequiredMark(dxTarget) : showRequiredMark;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowRequiredMark(dxTarget, value);
			} else {
				this.showRequiredMark = value;
			}
		}
	}
	bool? showValidationSummary;
	[Parameter]
	bool? ShowValidationSummary {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetShowValidationSummary(dxTarget) : showValidationSummary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetShowValidationSummary(dxTarget, value);
			} else {
				this.showValidationSummary = value;
			}
		}
	}
	string validationGroup;
	[Parameter]
	string ValidationGroup {
		get => isInitialized ? DevExpress.Ui.DxFormInterop.GetValidationGroup(dxTarget) : validationGroup;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxFormInterop.SetValidationGroup(dxTarget, value);
			} else {
				this.validationGroup = value;
			}
		}
	}
	bool? onEditorEnterKeyEnabled;
	[Parameter]
	bool? OnEditorEnterKeyEnabled {
		get => onEditorEnterKeyEnabled;
		set => this.onEditorEnterKeyEnabled = value;
	}
	bool? onFieldDataChangedEnabled;
	[Parameter]
	bool? OnFieldDataChangedEnabled {
		get => onFieldDataChangedEnabled;
		set => this.onFieldDataChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxFormInterop.EditorEnterKey += DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged += DxForm_FieldDataChanged;
	}
	[Parameter]
	Action EditorEnterKey { get; set; }
	void DxForm_EditorEnterKey(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorEnterKey?.Invoke();
		}
	}
	[Parameter]
	Action FieldDataChanged { get; set; }
	void DxForm_FieldDataChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FieldDataChanged?.Invoke();
		}
	}
	public object GetEditor(string dataField) {
		return DevExpress.Ui.DxFormInterop.GetEditor(dxTarget, dataField);
	}
	public object ItemOption(string id) {
		return DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id);
	}
	public void ItemOption(string id, string option, object value) {
		DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id, option, value);
	}
	public void ItemOption(string id, object options) {
		DevExpress.Ui.DxFormInterop.ItemOption(dxTarget, id, options);
	}
	public void ResetValues() {
		DevExpress.Ui.DxFormInterop.ResetValues(dxTarget);
	}
	public void UpdateData(object data) {
		DevExpress.Ui.DxFormInterop.UpdateData(dxTarget, data);
	}
	public void UpdateData(string dataField, object value) {
		DevExpress.Ui.DxFormInterop.UpdateData(dxTarget, dataField, value);
	}
	public object UpdateDimensions() {
		return DevExpress.Ui.DxFormInterop.UpdateDimensions(dxTarget);
	}
	public object Validate() {
		return DevExpress.Ui.DxFormInterop.Validate(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxFormInterop.EditorEnterKey -= DxForm_EditorEnterKey;
		DevExpress.Ui.DxFormInterop.FieldDataChanged -= DxForm_FieldDataChanged;
	}
}
