@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxTabPanelOptions>

<div id="@Id"></div>

@functions {
	public DxTabPanel() : base("DxTabPanel") { }
	protected override DevExpress.Ui.DxTabPanelOptions CreateOptions() {
		return new DevExpress.Ui.DxTabPanelOptions {
			animationEnabled = animationEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			itemTitleTemplate = itemTitleTemplate,
			scrollByContent = scrollByContent,
			scrollingEnabled = scrollingEnabled,
			showNavButtons = showNavButtons,
			swipeEnabled = swipeEnabled,
			onTitleClickEnabled = onTitleClickEnabled,
			onTitleHoldEnabled = onTitleHoldEnabled,
			onTitleRenderedEnabled = onTitleRenderedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxTabPanelOptions options) {
		DevExpress.Ui.DxTabPanelInterop.Init(Id, options);
	}
	bool? animationEnabled;
	public bool? AnimationEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetAnimationEnabled(Id) : animationEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetAnimationEnabled(Id, value);
			} else {
				this.animationEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	public bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetHoverStateEnabled(Id) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetHoverStateEnabled(Id, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object itemTitleTemplate;
	public object ItemTitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetItemTitleTemplate(Id) : itemTitleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetItemTitleTemplate(Id, value);
			} else {
				this.itemTitleTemplate = value;
			}
		}
	}
	bool? scrollByContent;
	public bool? ScrollByContent {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetScrollByContent(Id) : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetScrollByContent(Id, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollingEnabled;
	public bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetScrollingEnabled(Id) : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetScrollingEnabled(Id, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	bool? showNavButtons;
	public bool? ShowNavButtons {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetShowNavButtons(Id) : showNavButtons;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetShowNavButtons(Id, value);
			} else {
				this.showNavButtons = value;
			}
		}
	}
	bool? swipeEnabled;
	public bool? SwipeEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabPanelInterop.GetSwipeEnabled(Id) : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabPanelInterop.SetSwipeEnabled(Id, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	bool? onTitleClickEnabled;
	public bool? OnTitleClickEnabled {
		get => onTitleClickEnabled;
		set => this.onTitleClickEnabled = value;
	}
	bool? onTitleHoldEnabled;
	public bool? OnTitleHoldEnabled {
		get => onTitleHoldEnabled;
		set => this.onTitleHoldEnabled = value;
	}
	bool? onTitleRenderedEnabled;
	public bool? OnTitleRenderedEnabled {
		get => onTitleRenderedEnabled;
		set => this.onTitleRenderedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxTabPanelInterop.TitleClick += DxTabPanel_TitleClick;
		DevExpress.Ui.DxTabPanelInterop.TitleHold += DxTabPanel_TitleHold;
		DevExpress.Ui.DxTabPanelInterop.TitleRendered += DxTabPanel_TitleRendered;
	}
	public Action TitleClick { get; set; }
	void DxTabPanel_TitleClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleClick?.Invoke();
		}
	}
	public Action TitleHold { get; set; }
	void DxTabPanel_TitleHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleHold?.Invoke();
		}
	}
	public Action TitleRendered { get; set; }
	void DxTabPanel_TitleRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TitleRendered?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxTabPanelInterop.TitleClick -= DxTabPanel_TitleClick;
		DevExpress.Ui.DxTabPanelInterop.TitleHold -= DxTabPanel_TitleHold;
		DevExpress.Ui.DxTabPanelInterop.TitleRendered -= DxTabPanel_TitleRendered;
	}
}
