@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Gauges.DxBarGaugeOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxBarGauge() : base("DxBarGauge") { }
	protected override DevExpress.Viz.Gauges.DxBarGaugeOptions CreateOptions() {
		return new DevExpress.Viz.Gauges.DxBarGaugeOptions {
			animation = animation,
			backgroundColor = backgroundColor,
			barSpacing = barSpacing,
			baseValue = baseValue,
			endValue = endValue,
			geometry = geometry,
			label = label,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			relativeInnerRadius = relativeInnerRadius,
			startValue = startValue,
			subtitle = subtitle,
			title = title,
			tooltip = tooltip,
			values = values,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Gauges.DxBarGaugeOptions options) {
return 		DevExpress.Viz.DxBarGaugeInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetAnimation(dxTarget).Result : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	string backgroundColor;
	[Parameter]
	string BackgroundColor {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBackgroundColor(dxTarget).Result : backgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBackgroundColor(dxTarget, value);
			} else {
				this.backgroundColor = value;
			}
		}
	}
	float? barSpacing;
	[Parameter]
	float? BarSpacing {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBarSpacing(dxTarget).Result : barSpacing;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBarSpacing(dxTarget, value);
			} else {
				this.barSpacing = value;
			}
		}
	}
	float? baseValue;
	[Parameter]
	float? BaseValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBaseValue(dxTarget).Result : baseValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBaseValue(dxTarget, value);
			} else {
				this.baseValue = value;
			}
		}
	}
	float? endValue;
	[Parameter]
	float? EndValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetEndValue(dxTarget).Result : endValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetEndValue(dxTarget, value);
			} else {
				this.endValue = value;
			}
		}
	}
	object geometry;
	[Parameter]
	object Geometry {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetGeometry(dxTarget).Result : geometry;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetGeometry(dxTarget, value);
			} else {
				this.geometry = value;
			}
		}
	}
	object label;
	[Parameter]
	object Label {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetLabel(dxTarget).Result : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetLabel(dxTarget, value);
			} else {
				this.label = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetPalette(dxTarget).Result : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPalette(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetPaletteExtensionMode(dxTarget).Result : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPaletteExtensionMode(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	float? relativeInnerRadius;
	[Parameter]
	float? RelativeInnerRadius {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetRelativeInnerRadius(dxTarget).Result : relativeInnerRadius;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetRelativeInnerRadius(dxTarget, value);
			} else {
				this.relativeInnerRadius = value;
			}
		}
	}
	float? startValue;
	[Parameter]
	float? StartValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetStartValue(dxTarget).Result : startValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetStartValue(dxTarget, value);
			} else {
				this.startValue = value;
			}
		}
	}
	object subtitle;
	[Parameter]
	object Subtitle {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetSubtitle(dxTarget).Result : subtitle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetSubtitle(dxTarget, value);
			} else {
				this.subtitle = value;
			}
		}
	}
	object title;
	[Parameter]
	object Title {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTitle(dxTarget).Result : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTitle(dxTarget, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object values;
	[Parameter]
	object Values {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetValues(dxTarget).Result : values;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetValues(dxTarget, value);
			} else {
				this.values = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden += DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown += DxBarGauge_TooltipShown;
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void DxBarGauge_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void DxBarGauge_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	public object ValuesEx() {
		return DevExpress.Viz.DxBarGaugeInterop.ValuesEx(dxTarget).Result;
	}
	public void ValuesEx(object values) {
		DevExpress.Viz.DxBarGaugeInterop.ValuesEx(dxTarget, values);
	}
	public void Dispose() {
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden -= DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown -= DxBarGauge_TooltipShown;
	}
}
