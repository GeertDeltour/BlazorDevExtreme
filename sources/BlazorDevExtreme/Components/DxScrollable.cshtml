@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxScrollableOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxScrollable() : base("DxScrollable") { }
	protected override DevExpress.Ui.DxScrollableOptions CreateOptions() {
		return new DevExpress.Ui.DxScrollableOptions {
			bounceEnabled = bounceEnabled,
			direction = direction,
			disabled = disabled,
			scrollByContent = scrollByContent,
			scrollByThumb = scrollByThumb,
			showScrollbar = showScrollbar,
			useNative = useNative,
			onScrollEnabled = onScrollEnabled,
			onUpdatedEnabled = onUpdatedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxScrollableOptions options) {
return 		DevExpress.Ui.DxScrollableInterop.Init(dxTarget, options);
	}
	bool? bounceEnabled;
	[Parameter]
	bool? BounceEnabled {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetBounceEnabled(dxTarget).Result : bounceEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetBounceEnabled(dxTarget, value);
			} else {
				this.bounceEnabled = value;
			}
		}
	}
	string direction;
	[Parameter]
	string Direction {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetDirection(dxTarget).Result : direction;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetDirection(dxTarget, value);
			} else {
				this.direction = value;
			}
		}
	}
	bool? disabled;
	[Parameter]
	bool? Disabled {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetDisabled(dxTarget).Result : disabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetDisabled(dxTarget, value);
			} else {
				this.disabled = value;
			}
		}
	}
	bool? scrollByContent;
	[Parameter]
	bool? ScrollByContent {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetScrollByContent(dxTarget).Result : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetScrollByContent(dxTarget, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollByThumb;
	[Parameter]
	bool? ScrollByThumb {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetScrollByThumb(dxTarget).Result : scrollByThumb;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetScrollByThumb(dxTarget, value);
			} else {
				this.scrollByThumb = value;
			}
		}
	}
	string showScrollbar;
	[Parameter]
	string ShowScrollbar {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetShowScrollbar(dxTarget).Result : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetShowScrollbar(dxTarget, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	bool? useNative;
	[Parameter]
	bool? UseNative {
		get => isInitialized ? DevExpress.Ui.DxScrollableInterop.GetUseNative(dxTarget).Result : useNative;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollableInterop.SetUseNative(dxTarget, value);
			} else {
				this.useNative = value;
			}
		}
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onUpdatedEnabled;
	[Parameter]
	bool? OnUpdatedEnabled {
		get => onUpdatedEnabled;
		set => this.onUpdatedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxScrollableInterop.Scroll += DxScrollable_Scroll;
		DevExpress.Ui.DxScrollableInterop.Updated += DxScrollable_Updated;
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxScrollable_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action Updated { get; set; }
	void DxScrollable_Updated(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Updated?.Invoke();
		}
	}
	public float ClientHeight() {
		return DevExpress.Ui.DxScrollableInterop.ClientHeight(dxTarget).Result;
	}
	public float ClientWidth() {
		return DevExpress.Ui.DxScrollableInterop.ClientWidth(dxTarget).Result;
	}
	public object Content() {
		return DevExpress.Ui.DxScrollableInterop.Content(dxTarget).Result;
	}
	public void ScrollBy(float distance) {
		DevExpress.Ui.DxScrollableInterop.ScrollBy(dxTarget, distance);
	}
	public void ScrollBy(object distanceObject) {
		DevExpress.Ui.DxScrollableInterop.ScrollBy(dxTarget, distanceObject);
	}
	public float ScrollHeight() {
		return DevExpress.Ui.DxScrollableInterop.ScrollHeight(dxTarget).Result;
	}
	public float ScrollLeft() {
		return DevExpress.Ui.DxScrollableInterop.ScrollLeft(dxTarget).Result;
	}
	public object ScrollOffset() {
		return DevExpress.Ui.DxScrollableInterop.ScrollOffset(dxTarget).Result;
	}
	public void ScrollTo(float targetLocation) {
		DevExpress.Ui.DxScrollableInterop.ScrollTo(dxTarget, targetLocation);
	}
	public void ScrollTo(object targetLocation) {
		DevExpress.Ui.DxScrollableInterop.ScrollTo(dxTarget, targetLocation);
	}
	public void ScrollToElement(object element) {
		DevExpress.Ui.DxScrollableInterop.ScrollToElement(dxTarget, element);
	}
	public float ScrollTop() {
		return DevExpress.Ui.DxScrollableInterop.ScrollTop(dxTarget).Result;
	}
	public float ScrollWidth() {
		return DevExpress.Ui.DxScrollableInterop.ScrollWidth(dxTarget).Result;
	}
	public object Update() {
		return DevExpress.Ui.DxScrollableInterop.Update(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxScrollableInterop.Scroll -= DxScrollable_Scroll;
		DevExpress.Ui.DxScrollableInterop.Updated -= DxScrollable_Updated;
	}
}
