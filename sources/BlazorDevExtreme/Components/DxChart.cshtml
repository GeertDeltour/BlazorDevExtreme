@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Charts.DxChartOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxChart() : base("DxChart") { }
	protected override DevExpress.Viz.Charts.DxChartOptions CreateOptions() {
		return new DevExpress.Viz.Charts.DxChartOptions {
			adjustOnZoom = adjustOnZoom,
			argumentAxis = argumentAxis,
			barGroupPadding = barGroupPadding,
			barGroupWidth = barGroupWidth,
			barWidth = barWidth,
			commonAxisSettings = commonAxisSettings,
			commonPaneSettings = commonPaneSettings,
			commonSeriesSettings = commonSeriesSettings,
			containerBackgroundColor = containerBackgroundColor,
			crosshair = crosshair,
			dataPrepareSettings = dataPrepareSettings,
			defaultPane = defaultPane,
			equalBarWidth = equalBarWidth,
			legend = legend,
			maxBubbleSize = maxBubbleSize,
			minBubbleSize = minBubbleSize,
			negativesAsZeroes = negativesAsZeroes,
			panes = panes,
			resolveLabelOverlapping = resolveLabelOverlapping,
			rotated = rotated,
			scrollBar = scrollBar,
			scrollingMode = scrollingMode,
			series = series,
			seriesSelectionMode = seriesSelectionMode,
			seriesTemplate = seriesTemplate,
			synchronizeMultiAxes = synchronizeMultiAxes,
			tooltip = tooltip,
			useAggregation = useAggregation,
			valueAxis = valueAxis,
			zoomingMode = zoomingMode,
			onArgumentAxisClickEnabled = onArgumentAxisClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSeriesClickEnabled = onSeriesClickEnabled,
			onSeriesHoverChangedEnabled = onSeriesHoverChangedEnabled,
			onSeriesSelectionChangedEnabled = onSeriesSelectionChangedEnabled,
			onZoomEndEnabled = onZoomEndEnabled,
			onZoomStartEnabled = onZoomStartEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Charts.DxChartOptions options) {
return 		DevExpress.Viz.DxChartInterop.Init(dxTarget, options);
	}
	bool? adjustOnZoom;
	[Parameter]
	bool? AdjustOnZoom {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetAdjustOnZoom(dxTarget).Result : adjustOnZoom;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetAdjustOnZoom(dxTarget, value);
			} else {
				this.adjustOnZoom = value;
			}
		}
	}
	object argumentAxis;
	[Parameter]
	object ArgumentAxis {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetArgumentAxis(dxTarget).Result : argumentAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetArgumentAxis(dxTarget, value);
			} else {
				this.argumentAxis = value;
			}
		}
	}
	float? barGroupPadding;
	[Parameter]
	float? BarGroupPadding {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetBarGroupPadding(dxTarget).Result : barGroupPadding;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarGroupPadding(dxTarget, value);
			} else {
				this.barGroupPadding = value;
			}
		}
	}
	float? barGroupWidth;
	[Parameter]
	float? BarGroupWidth {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetBarGroupWidth(dxTarget).Result : barGroupWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarGroupWidth(dxTarget, value);
			} else {
				this.barGroupWidth = value;
			}
		}
	}
	float? barWidth;
	[Parameter]
	float? BarWidth {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetBarWidth(dxTarget).Result : barWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetBarWidth(dxTarget, value);
			} else {
				this.barWidth = value;
			}
		}
	}
	object commonAxisSettings;
	[Parameter]
	object CommonAxisSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonAxisSettings(dxTarget).Result : commonAxisSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonAxisSettings(dxTarget, value);
			} else {
				this.commonAxisSettings = value;
			}
		}
	}
	object commonPaneSettings;
	[Parameter]
	object CommonPaneSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonPaneSettings(dxTarget).Result : commonPaneSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonPaneSettings(dxTarget, value);
			} else {
				this.commonPaneSettings = value;
			}
		}
	}
	object commonSeriesSettings;
	[Parameter]
	object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCommonSeriesSettings(dxTarget).Result : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCommonSeriesSettings(dxTarget, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetContainerBackgroundColor(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object crosshair;
	[Parameter]
	object Crosshair {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetCrosshair(dxTarget).Result : crosshair;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetCrosshair(dxTarget, value);
			} else {
				this.crosshair = value;
			}
		}
	}
	object dataPrepareSettings;
	[Parameter]
	object DataPrepareSettings {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetDataPrepareSettings(dxTarget).Result : dataPrepareSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDataPrepareSettings(dxTarget, value);
			} else {
				this.dataPrepareSettings = value;
			}
		}
	}
	string defaultPane;
	[Parameter]
	string DefaultPane {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetDefaultPane(dxTarget).Result : defaultPane;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetDefaultPane(dxTarget, value);
			} else {
				this.defaultPane = value;
			}
		}
	}
	bool? equalBarWidth;
	[Parameter]
	bool? EqualBarWidth {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetEqualBarWidth(dxTarget).Result : equalBarWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetEqualBarWidth(dxTarget, value);
			} else {
				this.equalBarWidth = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetLegend(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetLegend(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	float? maxBubbleSize;
	[Parameter]
	float? MaxBubbleSize {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetMaxBubbleSize(dxTarget).Result : maxBubbleSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetMaxBubbleSize(dxTarget, value);
			} else {
				this.maxBubbleSize = value;
			}
		}
	}
	float? minBubbleSize;
	[Parameter]
	float? MinBubbleSize {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetMinBubbleSize(dxTarget).Result : minBubbleSize;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetMinBubbleSize(dxTarget, value);
			} else {
				this.minBubbleSize = value;
			}
		}
	}
	bool? negativesAsZeroes;
	[Parameter]
	bool? NegativesAsZeroes {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetNegativesAsZeroes(dxTarget).Result : negativesAsZeroes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetNegativesAsZeroes(dxTarget, value);
			} else {
				this.negativesAsZeroes = value;
			}
		}
	}
	object panes;
	[Parameter]
	object Panes {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetPanes(dxTarget).Result : panes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetPanes(dxTarget, value);
			} else {
				this.panes = value;
			}
		}
	}
	string resolveLabelOverlapping;
	[Parameter]
	string ResolveLabelOverlapping {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetResolveLabelOverlapping(dxTarget).Result : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetResolveLabelOverlapping(dxTarget, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	bool? rotated;
	[Parameter]
	bool? Rotated {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetRotated(dxTarget).Result : rotated;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetRotated(dxTarget, value);
			} else {
				this.rotated = value;
			}
		}
	}
	object scrollBar;
	[Parameter]
	object ScrollBar {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetScrollBar(dxTarget).Result : scrollBar;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetScrollBar(dxTarget, value);
			} else {
				this.scrollBar = value;
			}
		}
	}
	string scrollingMode;
	[Parameter]
	string ScrollingMode {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetScrollingMode(dxTarget).Result : scrollingMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetScrollingMode(dxTarget, value);
			} else {
				this.scrollingMode = value;
			}
		}
	}
	object series;
	[Parameter]
	object Series {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSeries(dxTarget).Result : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeries(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	string seriesSelectionMode;
	[Parameter]
	string SeriesSelectionMode {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSeriesSelectionMode(dxTarget).Result : seriesSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeriesSelectionMode(dxTarget, value);
			} else {
				this.seriesSelectionMode = value;
			}
		}
	}
	object seriesTemplate;
	[Parameter]
	object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSeriesTemplate(dxTarget).Result : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSeriesTemplate(dxTarget, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	bool? synchronizeMultiAxes;
	[Parameter]
	bool? SynchronizeMultiAxes {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetSynchronizeMultiAxes(dxTarget).Result : synchronizeMultiAxes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetSynchronizeMultiAxes(dxTarget, value);
			} else {
				this.synchronizeMultiAxes = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? useAggregation;
	[Parameter]
	bool? UseAggregation {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetUseAggregation(dxTarget).Result : useAggregation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetUseAggregation(dxTarget, value);
			} else {
				this.useAggregation = value;
			}
		}
	}
	object valueAxis;
	[Parameter]
	object ValueAxis {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetValueAxis(dxTarget).Result : valueAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetValueAxis(dxTarget, value);
			} else {
				this.valueAxis = value;
			}
		}
	}
	string zoomingMode;
	[Parameter]
	string ZoomingMode {
		get => isInitialized ? DevExpress.Viz.DxChartInterop.GetZoomingMode(dxTarget).Result : zoomingMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxChartInterop.SetZoomingMode(dxTarget, value);
			} else {
				this.zoomingMode = value;
			}
		}
	}
	bool? onArgumentAxisClickEnabled;
	[Parameter]
	bool? OnArgumentAxisClickEnabled {
		get => onArgumentAxisClickEnabled;
		set => this.onArgumentAxisClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSeriesClickEnabled;
	[Parameter]
	bool? OnSeriesClickEnabled {
		get => onSeriesClickEnabled;
		set => this.onSeriesClickEnabled = value;
	}
	bool? onSeriesHoverChangedEnabled;
	[Parameter]
	bool? OnSeriesHoverChangedEnabled {
		get => onSeriesHoverChangedEnabled;
		set => this.onSeriesHoverChangedEnabled = value;
	}
	bool? onSeriesSelectionChangedEnabled;
	[Parameter]
	bool? OnSeriesSelectionChangedEnabled {
		get => onSeriesSelectionChangedEnabled;
		set => this.onSeriesSelectionChangedEnabled = value;
	}
	bool? onZoomEndEnabled;
	[Parameter]
	bool? OnZoomEndEnabled {
		get => onZoomEndEnabled;
		set => this.onZoomEndEnabled = value;
	}
	bool? onZoomStartEnabled;
	[Parameter]
	bool? OnZoomStartEnabled {
		get => onZoomStartEnabled;
		set => this.onZoomStartEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxChartInterop.ArgumentAxisClick += DxChart_ArgumentAxisClick;
		DevExpress.Viz.DxChartInterop.LegendClick += DxChart_LegendClick;
		DevExpress.Viz.DxChartInterop.SeriesClick += DxChart_SeriesClick;
		DevExpress.Viz.DxChartInterop.SeriesHoverChanged += DxChart_SeriesHoverChanged;
		DevExpress.Viz.DxChartInterop.SeriesSelectionChanged += DxChart_SeriesSelectionChanged;
		DevExpress.Viz.DxChartInterop.ZoomEnd += DxChart_ZoomEnd;
		DevExpress.Viz.DxChartInterop.ZoomStart += DxChart_ZoomStart;
	}
	[Parameter]
	Action ArgumentAxisClick { get; set; }
	void DxChart_ArgumentAxisClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ArgumentAxisClick?.Invoke();
		}
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesClick { get; set; }
	void DxChart_SeriesClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesHoverChanged { get; set; }
	void DxChart_SeriesHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action SeriesSelectionChanged { get; set; }
	void DxChart_SeriesSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesSelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action ZoomEnd { get; set; }
	void DxChart_ZoomEnd(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ZoomEnd?.Invoke();
		}
	}
	[Parameter]
	Action ZoomStart { get; set; }
	void DxChart_ZoomStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ZoomStart?.Invoke();
		}
	}
	public void ZoomArgument(object startValue, object endValue) {
		DevExpress.Viz.DxChartInterop.ZoomArgument(dxTarget, startValue, endValue);
	}
	public void Dispose() {
		DevExpress.Viz.DxChartInterop.ArgumentAxisClick -= DxChart_ArgumentAxisClick;
		DevExpress.Viz.DxChartInterop.LegendClick -= DxChart_LegendClick;
		DevExpress.Viz.DxChartInterop.SeriesClick -= DxChart_SeriesClick;
		DevExpress.Viz.DxChartInterop.SeriesHoverChanged -= DxChart_SeriesHoverChanged;
		DevExpress.Viz.DxChartInterop.SeriesSelectionChanged -= DxChart_SeriesSelectionChanged;
		DevExpress.Viz.DxChartInterop.ZoomEnd -= DxChart_ZoomEnd;
		DevExpress.Viz.DxChartInterop.ZoomStart -= DxChart_ZoomStart;
	}
}
