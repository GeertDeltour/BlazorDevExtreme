@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTabsOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTabs() : base("DxTabs") { }
	protected override DevExpress.Ui.DxTabsOptions CreateOptions() {
		return new DevExpress.Ui.DxTabsOptions {
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			scrollByContent = scrollByContent,
			scrollingEnabled = scrollingEnabled,
			selectedItems = selectedItems,
			selectionMode = selectionMode,
			showNavButtons = showNavButtons,
		};
	}
	protected override Task Init(DevExpress.Ui.DxTabsOptions options) {
return 		DevExpress.Ui.DxTabsInterop.Init(dxTarget, options);
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	bool? scrollByContent;
	[Parameter]
	bool? ScrollByContent {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetScrollByContent(dxTarget).Result : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetScrollByContent(dxTarget, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollingEnabled;
	[Parameter]
	bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetScrollingEnabled(dxTarget).Result : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetScrollingEnabled(dxTarget, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	object selectedItems;
	[Parameter]
	object SelectedItems {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetSelectedItems(dxTarget).Result : selectedItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetSelectedItems(dxTarget, value);
			} else {
				this.selectedItems = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetSelectionMode(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	bool? showNavButtons;
	[Parameter]
	bool? ShowNavButtons {
		get => isInitialized ? DevExpress.Ui.DxTabsInterop.GetShowNavButtons(dxTarget).Result : showNavButtons;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTabsInterop.SetShowNavButtons(dxTarget, value);
			} else {
				this.showNavButtons = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
