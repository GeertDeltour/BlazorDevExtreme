@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.TreeMap.DxTreeMapOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTreeMap() : base("DxTreeMap") { }
	protected override DevExpress.Viz.TreeMap.DxTreeMapOptions CreateOptions() {
		return new DevExpress.Viz.TreeMap.DxTreeMapOptions {
			childrenField = childrenField,
			colorField = colorField,
			colorizer = colorizer,
			dataSource = dataSource,
			group = group,
			hoverEnabled = hoverEnabled,
			idField = idField,
			interactWithGroup = interactWithGroup,
			labelField = labelField,
			layoutAlgorithm = layoutAlgorithm,
			layoutDirection = layoutDirection,
			maxDepth = maxDepth,
			parentField = parentField,
			resolveLabelOverflow = resolveLabelOverflow,
			selectionMode = selectionMode,
			tile = tile,
			tooltip = tooltip,
			valueField = valueField,
			onClickEnabled = onClickEnabled,
			onDrillEnabled = onDrillEnabled,
			onHoverChangedEnabled = onHoverChangedEnabled,
			onNodesInitializedEnabled = onNodesInitializedEnabled,
			onNodesRenderingEnabled = onNodesRenderingEnabled,
			onSelectionChangedEnabled = onSelectionChangedEnabled,
		};
	}
	protected override void Init(DevExpress.Viz.TreeMap.DxTreeMapOptions options) {
		DevExpress.Viz.DxTreeMapInterop.Init(dxTarget, options);
	}
	string childrenField;
	[Parameter]
	string ChildrenField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetChildrenField(dxTarget) : childrenField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetChildrenField(dxTarget, value);
			} else {
				this.childrenField = value;
			}
		}
	}
	string colorField;
	[Parameter]
	string ColorField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetColorField(dxTarget) : colorField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetColorField(dxTarget, value);
			} else {
				this.colorField = value;
			}
		}
	}
	object colorizer;
	[Parameter]
	object Colorizer {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetColorizer(dxTarget) : colorizer;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetColorizer(dxTarget, value);
			} else {
				this.colorizer = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetDataSource(dxTarget) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object group;
	[Parameter]
	object Group {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetGroup(dxTarget) : group;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetGroup(dxTarget, value);
			} else {
				this.group = value;
			}
		}
	}
	bool? hoverEnabled;
	[Parameter]
	bool? HoverEnabled {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetHoverEnabled(dxTarget) : hoverEnabled;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetHoverEnabled(dxTarget, value);
			} else {
				this.hoverEnabled = value;
			}
		}
	}
	string idField;
	[Parameter]
	string IdField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetIdField(dxTarget) : idField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetIdField(dxTarget, value);
			} else {
				this.idField = value;
			}
		}
	}
	bool? interactWithGroup;
	[Parameter]
	bool? InteractWithGroup {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetInteractWithGroup(dxTarget) : interactWithGroup;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetInteractWithGroup(dxTarget, value);
			} else {
				this.interactWithGroup = value;
			}
		}
	}
	string labelField;
	[Parameter]
	string LabelField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetLabelField(dxTarget) : labelField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLabelField(dxTarget, value);
			} else {
				this.labelField = value;
			}
		}
	}
	object layoutAlgorithm;
	[Parameter]
	object LayoutAlgorithm {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetLayoutAlgorithm(dxTarget) : layoutAlgorithm;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLayoutAlgorithm(dxTarget, value);
			} else {
				this.layoutAlgorithm = value;
			}
		}
	}
	string layoutDirection;
	[Parameter]
	string LayoutDirection {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetLayoutDirection(dxTarget) : layoutDirection;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetLayoutDirection(dxTarget, value);
			} else {
				this.layoutDirection = value;
			}
		}
	}
	float? maxDepth;
	[Parameter]
	float? MaxDepth {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetMaxDepth(dxTarget) : maxDepth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetMaxDepth(dxTarget, value);
			} else {
				this.maxDepth = value;
			}
		}
	}
	string parentField;
	[Parameter]
	string ParentField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetParentField(dxTarget) : parentField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetParentField(dxTarget, value);
			} else {
				this.parentField = value;
			}
		}
	}
	string resolveLabelOverflow;
	[Parameter]
	string ResolveLabelOverflow {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetResolveLabelOverflow(dxTarget) : resolveLabelOverflow;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetResolveLabelOverflow(dxTarget, value);
			} else {
				this.resolveLabelOverflow = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetSelectionMode(dxTarget) : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	object tile;
	[Parameter]
	object Tile {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetTile(dxTarget) : tile;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetTile(dxTarget, value);
			} else {
				this.tile = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetTooltip(dxTarget) : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	string valueField;
	[Parameter]
	string ValueField {
		get => isInitialized ? DevExpress.Viz.DxTreeMapInterop.GetValueField(dxTarget) : valueField;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxTreeMapInterop.SetValueField(dxTarget, value);
			} else {
				this.valueField = value;
			}
		}
	}
	bool? onClickEnabled;
	[Parameter]
	bool? OnClickEnabled {
		get => onClickEnabled;
		set => this.onClickEnabled = value;
	}
	bool? onDrillEnabled;
	[Parameter]
	bool? OnDrillEnabled {
		get => onDrillEnabled;
		set => this.onDrillEnabled = value;
	}
	bool? onHoverChangedEnabled;
	[Parameter]
	bool? OnHoverChangedEnabled {
		get => onHoverChangedEnabled;
		set => this.onHoverChangedEnabled = value;
	}
	bool? onNodesInitializedEnabled;
	[Parameter]
	bool? OnNodesInitializedEnabled {
		get => onNodesInitializedEnabled;
		set => this.onNodesInitializedEnabled = value;
	}
	bool? onNodesRenderingEnabled;
	[Parameter]
	bool? OnNodesRenderingEnabled {
		get => onNodesRenderingEnabled;
		set => this.onNodesRenderingEnabled = value;
	}
	bool? onSelectionChangedEnabled;
	[Parameter]
	bool? OnSelectionChangedEnabled {
		get => onSelectionChangedEnabled;
		set => this.onSelectionChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxTreeMapInterop.Click += DxTreeMap_Click;
		DevExpress.Viz.DxTreeMapInterop.Drill += DxTreeMap_Drill;
		DevExpress.Viz.DxTreeMapInterop.HoverChanged += DxTreeMap_HoverChanged;
		DevExpress.Viz.DxTreeMapInterop.NodesInitialized += DxTreeMap_NodesInitialized;
		DevExpress.Viz.DxTreeMapInterop.NodesRendering += DxTreeMap_NodesRendering;
		DevExpress.Viz.DxTreeMapInterop.SelectionChanged += DxTreeMap_SelectionChanged;
	}
	[Parameter]
	Action Click { get; set; }
	void DxTreeMap_Click(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Click?.Invoke();
		}
	}
	[Parameter]
	Action Drill { get; set; }
	void DxTreeMap_Drill(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Drill?.Invoke();
		}
	}
	[Parameter]
	Action HoverChanged { get; set; }
	void DxTreeMap_HoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			HoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action NodesInitialized { get; set; }
	void DxTreeMap_NodesInitialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodesInitialized?.Invoke();
		}
	}
	[Parameter]
	Action NodesRendering { get; set; }
	void DxTreeMap_NodesRendering(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodesRendering?.Invoke();
		}
	}
	[Parameter]
	Action SelectionChanged { get; set; }
	void DxTreeMap_SelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectionChanged?.Invoke();
		}
	}
	public void ClearSelection() {
		DevExpress.Viz.DxTreeMapInterop.ClearSelection(dxTarget);
	}
	public void DrillUp() {
		DevExpress.Viz.DxTreeMapInterop.DrillUp(dxTarget);
	}
	public object GetCurrentNode() {
		return DevExpress.Viz.DxTreeMapInterop.GetCurrentNode(dxTarget);
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.DxTreeMapInterop.GetDataSourceEx(dxTarget);
	}
	public object GetRootNode() {
		return DevExpress.Viz.DxTreeMapInterop.GetRootNode(dxTarget);
	}
	public void HideTooltip() {
		DevExpress.Viz.DxTreeMapInterop.HideTooltip(dxTarget);
	}
	public void ResetDrillDown() {
		DevExpress.Viz.DxTreeMapInterop.ResetDrillDown(dxTarget);
	}
	public void Dispose() {
		DevExpress.Viz.DxTreeMapInterop.Click -= DxTreeMap_Click;
		DevExpress.Viz.DxTreeMapInterop.Drill -= DxTreeMap_Drill;
		DevExpress.Viz.DxTreeMapInterop.HoverChanged -= DxTreeMap_HoverChanged;
		DevExpress.Viz.DxTreeMapInterop.NodesInitialized -= DxTreeMap_NodesInitialized;
		DevExpress.Viz.DxTreeMapInterop.NodesRendering -= DxTreeMap_NodesRendering;
		DevExpress.Viz.DxTreeMapInterop.SelectionChanged -= DxTreeMap_SelectionChanged;
	}
}
