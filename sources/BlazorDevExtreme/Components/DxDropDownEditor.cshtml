@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxDropDownEditorOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxDropDownEditor() : base("DxDropDownEditor") { }
	protected override DevExpress.Ui.DxDropDownEditorOptions CreateOptions() {
		return new DevExpress.Ui.DxDropDownEditorOptions {
			acceptCustomValue = acceptCustomValue,
			activeStateEnabled = activeStateEnabled,
			applyValueMode = applyValueMode,
			deferRendering = deferRendering,
			dropDownButtonTemplate = dropDownButtonTemplate,
			opened = isOpened,
			value = value,
			onClosedEnabled = onClosedEnabled,
			onOpenedEnabled = onOpenedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxDropDownEditorOptions options) {
return 		DevExpress.Ui.DxDropDownEditorInterop.Init(dxTarget, options);
	}
	bool? acceptCustomValue;
	[Parameter]
	bool? AcceptCustomValue {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetAcceptCustomValue(dxTarget).Result : acceptCustomValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetAcceptCustomValue(dxTarget, value);
			} else {
				this.acceptCustomValue = value;
			}
		}
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	string applyValueMode;
	[Parameter]
	string ApplyValueMode {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetApplyValueMode(dxTarget).Result : applyValueMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetApplyValueMode(dxTarget, value);
			} else {
				this.applyValueMode = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetDeferRendering(dxTarget).Result : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetDeferRendering(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	object dropDownButtonTemplate;
	[Parameter]
	object DropDownButtonTemplate {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetDropDownButtonTemplate(dxTarget).Result : dropDownButtonTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetDropDownButtonTemplate(dxTarget, value);
			} else {
				this.dropDownButtonTemplate = value;
			}
		}
	}
	bool? isOpened;
	[Parameter]
	bool? IsOpened {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetOpened(dxTarget).Result : isOpened;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetOpened(dxTarget, value);
			} else {
				this.isOpened = value;
			}
		}
	}
	object value;
	[Parameter]
	object Value {
		get => isInitialized ? DevExpress.Ui.DxDropDownEditorInterop.GetValue(dxTarget).Result : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDropDownEditorInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	bool? onClosedEnabled;
	[Parameter]
	bool? OnClosedEnabled {
		get => onClosedEnabled;
		set => this.onClosedEnabled = value;
	}
	bool? onOpenedEnabled;
	[Parameter]
	bool? OnOpenedEnabled {
		get => onOpenedEnabled;
		set => this.onOpenedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDropDownEditorInterop.Closed += DxDropDownEditor_Closed;
		DevExpress.Ui.DxDropDownEditorInterop.Opened += DxDropDownEditor_Opened;
	}
	[Parameter]
	Action Closed { get; set; }
	void DxDropDownEditor_Closed(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Closed?.Invoke();
		}
	}
	[Parameter]
	Action Opened { get; set; }
	void DxDropDownEditor_Opened(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Opened?.Invoke();
		}
	}
	public void Close() {
		DevExpress.Ui.DxDropDownEditorInterop.Close(dxTarget);
	}
	public object Content() {
		return DevExpress.Ui.DxDropDownEditorInterop.Content(dxTarget).Result;
	}
	public object Field() {
		return DevExpress.Ui.DxDropDownEditorInterop.Field(dxTarget).Result;
	}
	public void Open() {
		DevExpress.Ui.DxDropDownEditorInterop.Open(dxTarget);
	}
	public void Reset() {
		DevExpress.Ui.DxDropDownEditorInterop.Reset(dxTarget);
	}
	public void Dispose() {
		DevExpress.Ui.DxDropDownEditorInterop.Closed -= DxDropDownEditor_Closed;
		DevExpress.Ui.DxDropDownEditorInterop.Opened -= DxDropDownEditor_Opened;
	}
}
