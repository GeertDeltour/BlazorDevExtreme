@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxResizableOptions>

<div id="@Id"></div>

@functions {
	public DxResizable() : base("DxResizable") { }
	protected override DevExpress.Ui.DxResizableOptions CreateOptions() {
		return new DevExpress.Ui.DxResizableOptions {
			handles = handles,
			height = height,
			maxHeight = maxHeight,
			maxWidth = maxWidth,
			minHeight = minHeight,
			minWidth = minWidth,
			width = width,
			onResizeEnabled = onResizeEnabled,
			onResizeEndEnabled = onResizeEndEnabled,
			onResizeStartEnabled = onResizeStartEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxResizableOptions options) {
		DxResizableInterop.Init(Id, options);
	}
	string handles;
	public string Handles {
		get => isInitialized ? DxResizableInterop.GetHandles(Id) : handles;
		set {
			if (isInitialized) {
				DxResizableInterop.SetHandles(Id, value);
			} else {
				this.handles = value;
			}
		}
	}
	object height;
	public object Height {
		get => isInitialized ? DxResizableInterop.GetHeight(Id) : height;
		set {
			if (isInitialized) {
				DxResizableInterop.SetHeight(Id, value);
			} else {
				this.height = value;
			}
		}
	}
	float? maxHeight;
	public float? MaxHeight {
		get => isInitialized ? DxResizableInterop.GetMaxHeight(Id) : maxHeight;
		set {
			if (isInitialized) {
				DxResizableInterop.SetMaxHeight(Id, value);
			} else {
				this.maxHeight = value;
			}
		}
	}
	float? maxWidth;
	public float? MaxWidth {
		get => isInitialized ? DxResizableInterop.GetMaxWidth(Id) : maxWidth;
		set {
			if (isInitialized) {
				DxResizableInterop.SetMaxWidth(Id, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	float? minHeight;
	public float? MinHeight {
		get => isInitialized ? DxResizableInterop.GetMinHeight(Id) : minHeight;
		set {
			if (isInitialized) {
				DxResizableInterop.SetMinHeight(Id, value);
			} else {
				this.minHeight = value;
			}
		}
	}
	float? minWidth;
	public float? MinWidth {
		get => isInitialized ? DxResizableInterop.GetMinWidth(Id) : minWidth;
		set {
			if (isInitialized) {
				DxResizableInterop.SetMinWidth(Id, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object width;
	public object Width {
		get => isInitialized ? DxResizableInterop.GetWidth(Id) : width;
		set {
			if (isInitialized) {
				DxResizableInterop.SetWidth(Id, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onResizeEnabled;
	public bool? OnResizeEnabled {
		get => onResizeEnabled;
		set => this.onResizeEnabled = value;
	}
	bool? onResizeEndEnabled;
	public bool? OnResizeEndEnabled {
		get => onResizeEndEnabled;
		set => this.onResizeEndEnabled = value;
	}
	bool? onResizeStartEnabled;
	public bool? OnResizeStartEnabled {
		get => onResizeStartEnabled;
		set => this.onResizeStartEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DxResizableInterop.Resize += DxResizable_Resize;
		DxResizableInterop.ResizeEnd += DxResizable_ResizeEnd;
		DxResizableInterop.ResizeStart += DxResizable_ResizeStart;
	}
	public Action Resize { get; set; }
	void DxResizable_Resize(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Resize?.Invoke();
		}
	}
	public Action ResizeEnd { get; set; }
	void DxResizable_ResizeEnd(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeEnd?.Invoke();
		}
	}
	public Action ResizeStart { get; set; }
	void DxResizable_ResizeStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ResizeStart?.Invoke();
		}
	}
	public void Dispose() {
		DxResizableInterop.Resize -= DxResizable_Resize;
		DxResizableInterop.ResizeEnd -= DxResizable_ResizeEnd;
		DxResizableInterop.ResizeStart -= DxResizable_ResizeStart;
	}
}
