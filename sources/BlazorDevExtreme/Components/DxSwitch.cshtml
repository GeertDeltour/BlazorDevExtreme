@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxSwitchOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxSwitch() : base("DxSwitch") { }
	protected override DevExpress.Ui.DxSwitchOptions CreateOptions() {
		return new DevExpress.Ui.DxSwitchOptions {
			activeStateEnabled = activeStateEnabled,
			focusStateEnabled = focusStateEnabled,
			hoverStateEnabled = hoverStateEnabled,
			name = name,
			offText = offText,
			onText = onText,
			value = value,
		};
	}
	protected override void Init(DevExpress.Ui.DxSwitchOptions options) {
		DevExpress.Ui.DxSwitchInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetActiveStateEnabled(dxTarget) : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetFocusStateEnabled(dxTarget) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetHoverStateEnabled(dxTarget) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	string name;
	[Parameter]
	string Name {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetName(dxTarget) : name;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetName(dxTarget, value);
			} else {
				this.name = value;
			}
		}
	}
	string offText;
	[Parameter]
	string OffText {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetOffText(dxTarget) : offText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetOffText(dxTarget, value);
			} else {
				this.offText = value;
			}
		}
	}
	string onText;
	[Parameter]
	string OnText {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetOnText(dxTarget) : onText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetOnText(dxTarget, value);
			} else {
				this.onText = value;
			}
		}
	}
	bool? value;
	[Parameter]
	bool? Value {
		get => isInitialized ? DevExpress.Ui.DxSwitchInterop.GetValue(dxTarget) : value;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxSwitchInterop.SetValue(dxTarget, value);
			} else {
				this.value = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
