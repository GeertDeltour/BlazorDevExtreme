@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxContextMenuOptions>

<div id="@Id"></div>

@functions {
	public DxContextMenu() : base("DxContextMenu") { }
	protected override DevExpress.Ui.DxContextMenuOptions CreateOptions() {
		return new DevExpress.Ui.DxContextMenuOptions {
			closeOnOutsideClick = closeOnOutsideClick,
			items = items,
			position = position,
			showEvent = showEvent,
			submenuDirection = submenuDirection,
			target = target,
			visible = visible,
			onHiddenEnabled = onHiddenEnabled,
			onHidingEnabled = onHidingEnabled,
			onPositioningEnabled = onPositioningEnabled,
			onShowingEnabled = onShowingEnabled,
			onShownEnabled = onShownEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxContextMenuOptions options) {
		DevExpress.Ui.DxContextMenuInterop.Init(Id, options);
	}
	object closeOnOutsideClick;
	public object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetCloseOnOutsideClick(Id) : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetCloseOnOutsideClick(Id, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	object items;
	public object Items {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetItems(Id) : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetItems(Id, value);
			} else {
				this.items = value;
			}
		}
	}
	object position;
	public object Position {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetPosition(Id) : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetPosition(Id, value);
			} else {
				this.position = value;
			}
		}
	}
	object showEvent;
	public object ShowEvent {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetShowEvent(Id) : showEvent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetShowEvent(Id, value);
			} else {
				this.showEvent = value;
			}
		}
	}
	string submenuDirection;
	public string SubmenuDirection {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetSubmenuDirection(Id) : submenuDirection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetSubmenuDirection(Id, value);
			} else {
				this.submenuDirection = value;
			}
		}
	}
	object target;
	public object Target {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetTarget(Id) : target;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetTarget(Id, value);
			} else {
				this.target = value;
			}
		}
	}
	bool? visible;
	public bool? Visible {
		get => isInitialized ? DevExpress.Ui.DxContextMenuInterop.GetVisible(Id) : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxContextMenuInterop.SetVisible(Id, value);
			} else {
				this.visible = value;
			}
		}
	}
	bool? onHiddenEnabled;
	public bool? OnHiddenEnabled {
		get => onHiddenEnabled;
		set => this.onHiddenEnabled = value;
	}
	bool? onHidingEnabled;
	public bool? OnHidingEnabled {
		get => onHidingEnabled;
		set => this.onHidingEnabled = value;
	}
	bool? onPositioningEnabled;
	public bool? OnPositioningEnabled {
		get => onPositioningEnabled;
		set => this.onPositioningEnabled = value;
	}
	bool? onShowingEnabled;
	public bool? OnShowingEnabled {
		get => onShowingEnabled;
		set => this.onShowingEnabled = value;
	}
	bool? onShownEnabled;
	public bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxContextMenuInterop.Hidden += DxContextMenu_Hidden;
		DevExpress.Ui.DxContextMenuInterop.Hiding += DxContextMenu_Hiding;
		DevExpress.Ui.DxContextMenuInterop.Positioning += DxContextMenu_Positioning;
		DevExpress.Ui.DxContextMenuInterop.Showing += DxContextMenu_Showing;
		DevExpress.Ui.DxContextMenuInterop.Shown += DxContextMenu_Shown;
	}
	public Action Hidden { get; set; }
	void DxContextMenu_Hidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hidden?.Invoke();
		}
	}
	public Action Hiding { get; set; }
	void DxContextMenu_Hiding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hiding?.Invoke();
		}
	}
	public Action Positioning { get; set; }
	void DxContextMenu_Positioning(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Positioning?.Invoke();
		}
	}
	public Action Showing { get; set; }
	void DxContextMenu_Showing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Showing?.Invoke();
		}
	}
	public Action Shown { get; set; }
	void DxContextMenu_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	public object Hide() {
		return DevExpress.Ui.DxContextMenuInterop.Hide(Id);
	}
	public object Show() {
		return DevExpress.Ui.DxContextMenuInterop.Show(Id);
	}
	public object Toggle(bool showing) {
		return DevExpress.Ui.DxContextMenuInterop.Toggle(Id, showing);
	}
	public void Dispose() {
		DevExpress.Ui.DxContextMenuInterop.Hidden -= DxContextMenu_Hidden;
		DevExpress.Ui.DxContextMenuInterop.Hiding -= DxContextMenu_Hiding;
		DevExpress.Ui.DxContextMenuInterop.Positioning -= DxContextMenu_Positioning;
		DevExpress.Ui.DxContextMenuInterop.Showing -= DxContextMenu_Showing;
		DevExpress.Ui.DxContextMenuInterop.Shown -= DxContextMenu_Shown;
	}
}
