@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.Gauges.DxBarGaugeOptions>

<div id="@Id"></div>

@functions {
	public DxBarGauge() : base("DxBarGauge") { }
	protected override DevExpress.Viz.Gauges.DxBarGaugeOptions CreateOptions() {
		return new DevExpress.Viz.Gauges.DxBarGaugeOptions {
			animation = animation,
			backgroundColor = backgroundColor,
			barSpacing = barSpacing,
			baseValue = baseValue,
			endValue = endValue,
			geometry = geometry,
			label = label,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			relativeInnerRadius = relativeInnerRadius,
			startValue = startValue,
			subtitle = subtitle,
			title = title,
			tooltip = tooltip,
			values = values,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
		};
	}
	protected override void Init(DevExpress.Viz.Gauges.DxBarGaugeOptions options) {
		DevExpress.Viz.DxBarGaugeInterop.Init(Id, options);
	}
	object animation;
	public object Animation {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetAnimation(Id) : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetAnimation(Id, value);
			} else {
				this.animation = value;
			}
		}
	}
	string backgroundColor;
	public string BackgroundColor {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBackgroundColor(Id) : backgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBackgroundColor(Id, value);
			} else {
				this.backgroundColor = value;
			}
		}
	}
	float? barSpacing;
	public float? BarSpacing {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBarSpacing(Id) : barSpacing;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBarSpacing(Id, value);
			} else {
				this.barSpacing = value;
			}
		}
	}
	float? baseValue;
	public float? BaseValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetBaseValue(Id) : baseValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetBaseValue(Id, value);
			} else {
				this.baseValue = value;
			}
		}
	}
	float? endValue;
	public float? EndValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetEndValue(Id) : endValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetEndValue(Id, value);
			} else {
				this.endValue = value;
			}
		}
	}
	object geometry;
	public object Geometry {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetGeometry(Id) : geometry;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetGeometry(Id, value);
			} else {
				this.geometry = value;
			}
		}
	}
	object label;
	public object Label {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetLabel(Id) : label;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetLabel(Id, value);
			} else {
				this.label = value;
			}
		}
	}
	object palette;
	public object Palette {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetPalette(Id) : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPalette(Id, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	public string PaletteExtensionMode {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetPaletteExtensionMode(Id) : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetPaletteExtensionMode(Id, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	float? relativeInnerRadius;
	public float? RelativeInnerRadius {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetRelativeInnerRadius(Id) : relativeInnerRadius;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetRelativeInnerRadius(Id, value);
			} else {
				this.relativeInnerRadius = value;
			}
		}
	}
	float? startValue;
	public float? StartValue {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetStartValue(Id) : startValue;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetStartValue(Id, value);
			} else {
				this.startValue = value;
			}
		}
	}
	object subtitle;
	public object Subtitle {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetSubtitle(Id) : subtitle;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetSubtitle(Id, value);
			} else {
				this.subtitle = value;
			}
		}
	}
	object title;
	public object Title {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTitle(Id) : title;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTitle(Id, value);
			} else {
				this.title = value;
			}
		}
	}
	object tooltip;
	public object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetTooltip(Id) : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetTooltip(Id, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	object values;
	public object Values {
		get => isInitialized ? DevExpress.Viz.DxBarGaugeInterop.GetValues(Id) : values;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxBarGaugeInterop.SetValues(Id, value);
			} else {
				this.values = value;
			}
		}
	}
	bool? onTooltipHiddenEnabled;
	public bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	public bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden += DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown += DxBarGauge_TooltipShown;
	}
	public Action TooltipHidden { get; set; }
	void DxBarGauge_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	public Action TooltipShown { get; set; }
	void DxBarGauge_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.DxBarGaugeInterop.TooltipHidden -= DxBarGauge_TooltipHidden;
		DevExpress.Viz.DxBarGaugeInterop.TooltipShown -= DxBarGauge_TooltipShown;
	}
}
