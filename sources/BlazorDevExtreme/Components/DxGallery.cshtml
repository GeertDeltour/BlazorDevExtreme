@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxGalleryOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxGallery() : base("DxGallery") { }
	protected override DevExpress.Ui.DxGalleryOptions CreateOptions() {
		return new DevExpress.Ui.DxGalleryOptions {
			animationDuration = animationDuration,
			animationEnabled = animationEnabled,
			focusStateEnabled = focusStateEnabled,
			indicatorEnabled = indicatorEnabled,
			initialItemWidth = initialItemWidth,
			loop = loop,
			selectedIndex = selectedIndex,
			showIndicator = showIndicator,
			showNavButtons = showNavButtons,
			slideshowDelay = slideshowDelay,
			stretchImages = stretchImages,
			swipeEnabled = swipeEnabled,
			wrapAround = wrapAround,
		};
	}
	protected override Task Init(DevExpress.Ui.DxGalleryOptions options) {
return 		DevExpress.Ui.DxGalleryInterop.Init(dxTarget, options);
	}
	float? animationDuration;
	[Parameter]
	float? AnimationDuration {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetAnimationDuration(dxTarget).Result : animationDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetAnimationDuration(dxTarget, value);
			} else {
				this.animationDuration = value;
			}
		}
	}
	bool? animationEnabled;
	[Parameter]
	bool? AnimationEnabled {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetAnimationEnabled(dxTarget).Result : animationEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetAnimationEnabled(dxTarget, value);
			} else {
				this.animationEnabled = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? indicatorEnabled;
	[Parameter]
	bool? IndicatorEnabled {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetIndicatorEnabled(dxTarget).Result : indicatorEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetIndicatorEnabled(dxTarget, value);
			} else {
				this.indicatorEnabled = value;
			}
		}
	}
	float? initialItemWidth;
	[Parameter]
	float? InitialItemWidth {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetInitialItemWidth(dxTarget).Result : initialItemWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetInitialItemWidth(dxTarget, value);
			} else {
				this.initialItemWidth = value;
			}
		}
	}
	bool? loop;
	[Parameter]
	bool? Loop {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetLoop(dxTarget).Result : loop;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetLoop(dxTarget, value);
			} else {
				this.loop = value;
			}
		}
	}
	float? selectedIndex;
	[Parameter]
	float? SelectedIndex {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetSelectedIndex(dxTarget).Result : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetSelectedIndex(dxTarget, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	bool? showIndicator;
	[Parameter]
	bool? ShowIndicator {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetShowIndicator(dxTarget).Result : showIndicator;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetShowIndicator(dxTarget, value);
			} else {
				this.showIndicator = value;
			}
		}
	}
	bool? showNavButtons;
	[Parameter]
	bool? ShowNavButtons {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetShowNavButtons(dxTarget).Result : showNavButtons;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetShowNavButtons(dxTarget, value);
			} else {
				this.showNavButtons = value;
			}
		}
	}
	float? slideshowDelay;
	[Parameter]
	float? SlideshowDelay {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetSlideshowDelay(dxTarget).Result : slideshowDelay;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetSlideshowDelay(dxTarget, value);
			} else {
				this.slideshowDelay = value;
			}
		}
	}
	bool? stretchImages;
	[Parameter]
	bool? StretchImages {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetStretchImages(dxTarget).Result : stretchImages;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetStretchImages(dxTarget, value);
			} else {
				this.stretchImages = value;
			}
		}
	}
	bool? swipeEnabled;
	[Parameter]
	bool? SwipeEnabled {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetSwipeEnabled(dxTarget).Result : swipeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetSwipeEnabled(dxTarget, value);
			} else {
				this.swipeEnabled = value;
			}
		}
	}
	bool? wrapAround;
	[Parameter]
	bool? WrapAround {
		get => isInitialized ? DevExpress.Ui.DxGalleryInterop.GetWrapAround(dxTarget).Result : wrapAround;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxGalleryInterop.SetWrapAround(dxTarget, value);
			} else {
				this.wrapAround = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public object GoToItem(float itemIndex, bool animation) {
		return DevExpress.Ui.DxGalleryInterop.GoToItem(dxTarget, itemIndex, animation).Result;
	}
	public object NextItem(bool animation) {
		return DevExpress.Ui.DxGalleryInterop.NextItem(dxTarget, animation).Result;
	}
	public object PrevItem(bool animation) {
		return DevExpress.Ui.DxGalleryInterop.PrevItem(dxTarget, animation).Result;
	}
	public void Dispose() {
	}
}
