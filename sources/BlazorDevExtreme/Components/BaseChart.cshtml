@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Viz.Charts.BaseChartOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public BaseChart() : base("BaseChart") { }
	protected override DevExpress.Viz.Charts.BaseChartOptions CreateOptions() {
		return new DevExpress.Viz.Charts.BaseChartOptions {
			adaptiveLayout = adaptiveLayout,
			animation = animation,
			customizeLabel = customizeLabel,
			customizePoint = customizePoint,
			dataSource = dataSource,
			legend = legend,
			palette = palette,
			paletteExtensionMode = paletteExtensionMode,
			pointSelectionMode = pointSelectionMode,
			series = series,
			tooltip = tooltip,
			onDoneEnabled = onDoneEnabled,
			onPointClickEnabled = onPointClickEnabled,
			onPointHoverChangedEnabled = onPointHoverChangedEnabled,
			onPointSelectionChangedEnabled = onPointSelectionChangedEnabled,
			onTooltipHiddenEnabled = onTooltipHiddenEnabled,
			onTooltipShownEnabled = onTooltipShownEnabled,
		};
	}
	protected override void Init(DevExpress.Viz.Charts.BaseChartOptions options) {
		DevExpress.Viz.BaseChartInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetAdaptiveLayout(dxTarget) : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetAdaptiveLayout(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	object customizeLabel;
	[Parameter]
	object CustomizeLabel {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetCustomizeLabel(dxTarget) : customizeLabel;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetCustomizeLabel(dxTarget, value);
			} else {
				this.customizeLabel = value;
			}
		}
	}
	object customizePoint;
	[Parameter]
	object CustomizePoint {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetCustomizePoint(dxTarget) : customizePoint;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetCustomizePoint(dxTarget, value);
			} else {
				this.customizePoint = value;
			}
		}
	}
	object dataSource;
	[Parameter]
	object DataSource {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetDataSource(dxTarget) : dataSource;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetDataSource(dxTarget, value);
			} else {
				this.dataSource = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetLegend(dxTarget) : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetLegend(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	object palette;
	[Parameter]
	object Palette {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetPalette(dxTarget) : palette;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetPalette(dxTarget, value);
			} else {
				this.palette = value;
			}
		}
	}
	string paletteExtensionMode;
	[Parameter]
	string PaletteExtensionMode {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetPaletteExtensionMode(dxTarget) : paletteExtensionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetPaletteExtensionMode(dxTarget, value);
			} else {
				this.paletteExtensionMode = value;
			}
		}
	}
	string pointSelectionMode;
	[Parameter]
	string PointSelectionMode {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetPointSelectionMode(dxTarget) : pointSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetPointSelectionMode(dxTarget, value);
			} else {
				this.pointSelectionMode = value;
			}
		}
	}
	object series;
	[Parameter]
	object Series {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetSeries(dxTarget) : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetSeries(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.BaseChartInterop.GetTooltip(dxTarget) : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.BaseChartInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? onDoneEnabled;
	[Parameter]
	bool? OnDoneEnabled {
		get => onDoneEnabled;
		set => this.onDoneEnabled = value;
	}
	bool? onPointClickEnabled;
	[Parameter]
	bool? OnPointClickEnabled {
		get => onPointClickEnabled;
		set => this.onPointClickEnabled = value;
	}
	bool? onPointHoverChangedEnabled;
	[Parameter]
	bool? OnPointHoverChangedEnabled {
		get => onPointHoverChangedEnabled;
		set => this.onPointHoverChangedEnabled = value;
	}
	bool? onPointSelectionChangedEnabled;
	[Parameter]
	bool? OnPointSelectionChangedEnabled {
		get => onPointSelectionChangedEnabled;
		set => this.onPointSelectionChangedEnabled = value;
	}
	bool? onTooltipHiddenEnabled;
	[Parameter]
	bool? OnTooltipHiddenEnabled {
		get => onTooltipHiddenEnabled;
		set => this.onTooltipHiddenEnabled = value;
	}
	bool? onTooltipShownEnabled;
	[Parameter]
	bool? OnTooltipShownEnabled {
		get => onTooltipShownEnabled;
		set => this.onTooltipShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.BaseChartInterop.Done += BaseChart_Done;
		DevExpress.Viz.BaseChartInterop.PointClick += BaseChart_PointClick;
		DevExpress.Viz.BaseChartInterop.PointHoverChanged += BaseChart_PointHoverChanged;
		DevExpress.Viz.BaseChartInterop.PointSelectionChanged += BaseChart_PointSelectionChanged;
		DevExpress.Viz.BaseChartInterop.TooltipHidden += BaseChart_TooltipHidden;
		DevExpress.Viz.BaseChartInterop.TooltipShown += BaseChart_TooltipShown;
	}
	[Parameter]
	Action Done { get; set; }
	void BaseChart_Done(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Done?.Invoke();
		}
	}
	[Parameter]
	Action PointClick { get; set; }
	void BaseChart_PointClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointClick?.Invoke();
		}
	}
	[Parameter]
	Action PointHoverChanged { get; set; }
	void BaseChart_PointHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action PointSelectionChanged { get; set; }
	void BaseChart_PointSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PointSelectionChanged?.Invoke();
		}
	}
	[Parameter]
	Action TooltipHidden { get; set; }
	void BaseChart_TooltipHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipHidden?.Invoke();
		}
	}
	[Parameter]
	Action TooltipShown { get; set; }
	void BaseChart_TooltipShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			TooltipShown?.Invoke();
		}
	}
	public void ClearSelection() {
		DevExpress.Viz.BaseChartInterop.ClearSelection(dxTarget);
	}
	public object GetAllSeries() {
		return DevExpress.Viz.BaseChartInterop.GetAllSeries(dxTarget);
	}
	public object GetDataSourceEx() {
		return DevExpress.Viz.BaseChartInterop.GetDataSourceEx(dxTarget);
	}
	public object GetSeriesByName(object seriesName) {
		return DevExpress.Viz.BaseChartInterop.GetSeriesByName(dxTarget, seriesName);
	}
	public object GetSeriesByPos(float seriesIndex) {
		return DevExpress.Viz.BaseChartInterop.GetSeriesByPos(dxTarget, seriesIndex);
	}
	public void HideTooltip() {
		DevExpress.Viz.BaseChartInterop.HideTooltip(dxTarget);
	}
	public void Render() {
		DevExpress.Viz.BaseChartInterop.Render(dxTarget);
	}
	public void Render(object renderOptions) {
		DevExpress.Viz.BaseChartInterop.Render(dxTarget, renderOptions);
	}
	public void Dispose() {
		DevExpress.Viz.BaseChartInterop.Done -= BaseChart_Done;
		DevExpress.Viz.BaseChartInterop.PointClick -= BaseChart_PointClick;
		DevExpress.Viz.BaseChartInterop.PointHoverChanged -= BaseChart_PointHoverChanged;
		DevExpress.Viz.BaseChartInterop.PointSelectionChanged -= BaseChart_PointSelectionChanged;
		DevExpress.Viz.BaseChartInterop.TooltipHidden -= BaseChart_TooltipHidden;
		DevExpress.Viz.BaseChartInterop.TooltipShown -= BaseChart_TooltipShown;
	}
}
