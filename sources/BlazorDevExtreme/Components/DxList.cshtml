@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxListOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxList() : base("DxList") { }
	protected override DevExpress.Ui.DxListOptions CreateOptions() {
		return new DevExpress.Ui.DxListOptions {
			activeStateEnabled = activeStateEnabled,
			allowItemDeleting = allowItemDeleting,
			allowItemReordering = allowItemReordering,
			bounceEnabled = bounceEnabled,
			collapsibleGroups = collapsibleGroups,
			focusStateEnabled = focusStateEnabled,
			grouped = grouped,
			groupTemplate = groupTemplate,
			hoverStateEnabled = hoverStateEnabled,
			indicateLoading = indicateLoading,
			itemDeleteMode = itemDeleteMode,
			menuItems = menuItems,
			menuMode = menuMode,
			nextButtonText = nextButtonText,
			pageLoadingText = pageLoadingText,
			pageLoadMode = pageLoadMode,
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			pullRefreshEnabled = pullRefreshEnabled,
			refreshingText = refreshingText,
			scrollByContent = scrollByContent,
			scrollByThumb = scrollByThumb,
			scrollingEnabled = scrollingEnabled,
			selectAllMode = selectAllMode,
			selectionMode = selectionMode,
			showScrollbar = showScrollbar,
			showSelectionControls = showSelectionControls,
			useNativeScrolling = useNativeScrolling,
			onGroupRenderedEnabled = onGroupRenderedEnabled,
			onItemClickEnabled = onItemClickEnabled,
			onItemContextMenuEnabled = onItemContextMenuEnabled,
			onItemDeletedEnabled = onItemDeletedEnabled,
			onItemDeletingEnabled = onItemDeletingEnabled,
			onItemHoldEnabled = onItemHoldEnabled,
			onItemReorderedEnabled = onItemReorderedEnabled,
			onItemSwipeEnabled = onItemSwipeEnabled,
			onPageLoadingEnabled = onPageLoadingEnabled,
			onPullRefreshEnabled = onPullRefreshEnabled,
			onScrollEnabled = onScrollEnabled,
			onSelectAllValueChangedEnabled = onSelectAllValueChangedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxListOptions options) {
return 		DevExpress.Ui.DxListInterop.Init(dxTarget, options);
	}
	bool? activeStateEnabled;
	[Parameter]
	bool? ActiveStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetActiveStateEnabled(dxTarget).Result : activeStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetActiveStateEnabled(dxTarget, value);
			} else {
				this.activeStateEnabled = value;
			}
		}
	}
	bool? allowItemDeleting;
	[Parameter]
	bool? AllowItemDeleting {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetAllowItemDeleting(dxTarget).Result : allowItemDeleting;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemDeleting(dxTarget, value);
			} else {
				this.allowItemDeleting = value;
			}
		}
	}
	bool? allowItemReordering;
	[Parameter]
	bool? AllowItemReordering {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetAllowItemReordering(dxTarget).Result : allowItemReordering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetAllowItemReordering(dxTarget, value);
			} else {
				this.allowItemReordering = value;
			}
		}
	}
	bool? bounceEnabled;
	[Parameter]
	bool? BounceEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetBounceEnabled(dxTarget).Result : bounceEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetBounceEnabled(dxTarget, value);
			} else {
				this.bounceEnabled = value;
			}
		}
	}
	bool? collapsibleGroups;
	[Parameter]
	bool? CollapsibleGroups {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetCollapsibleGroups(dxTarget).Result : collapsibleGroups;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetCollapsibleGroups(dxTarget, value);
			} else {
				this.collapsibleGroups = value;
			}
		}
	}
	bool? focusStateEnabled;
	[Parameter]
	bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetFocusStateEnabled(dxTarget).Result : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetFocusStateEnabled(dxTarget, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	bool? grouped;
	[Parameter]
	bool? Grouped {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetGrouped(dxTarget).Result : grouped;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGrouped(dxTarget, value);
			} else {
				this.grouped = value;
			}
		}
	}
	object groupTemplate;
	[Parameter]
	object GroupTemplate {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetGroupTemplate(dxTarget).Result : groupTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetGroupTemplate(dxTarget, value);
			} else {
				this.groupTemplate = value;
			}
		}
	}
	bool? hoverStateEnabled;
	[Parameter]
	bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetHoverStateEnabled(dxTarget).Result : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetHoverStateEnabled(dxTarget, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	bool? indicateLoading;
	[Parameter]
	bool? IndicateLoading {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetIndicateLoading(dxTarget).Result : indicateLoading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetIndicateLoading(dxTarget, value);
			} else {
				this.indicateLoading = value;
			}
		}
	}
	string itemDeleteMode;
	[Parameter]
	string ItemDeleteMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetItemDeleteMode(dxTarget).Result : itemDeleteMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetItemDeleteMode(dxTarget, value);
			} else {
				this.itemDeleteMode = value;
			}
		}
	}
	object menuItems;
	[Parameter]
	object MenuItems {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetMenuItems(dxTarget).Result : menuItems;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuItems(dxTarget, value);
			} else {
				this.menuItems = value;
			}
		}
	}
	string menuMode;
	[Parameter]
	string MenuMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetMenuMode(dxTarget).Result : menuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetMenuMode(dxTarget, value);
			} else {
				this.menuMode = value;
			}
		}
	}
	string nextButtonText;
	[Parameter]
	string NextButtonText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetNextButtonText(dxTarget).Result : nextButtonText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetNextButtonText(dxTarget, value);
			} else {
				this.nextButtonText = value;
			}
		}
	}
	string pageLoadingText;
	[Parameter]
	string PageLoadingText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPageLoadingText(dxTarget).Result : pageLoadingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadingText(dxTarget, value);
			} else {
				this.pageLoadingText = value;
			}
		}
	}
	string pageLoadMode;
	[Parameter]
	string PageLoadMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPageLoadMode(dxTarget).Result : pageLoadMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPageLoadMode(dxTarget, value);
			} else {
				this.pageLoadMode = value;
			}
		}
	}
	string pulledDownText;
	[Parameter]
	string PulledDownText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPulledDownText(dxTarget).Result : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPulledDownText(dxTarget, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	[Parameter]
	string PullingDownText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPullingDownText(dxTarget).Result : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullingDownText(dxTarget, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	bool? pullRefreshEnabled;
	[Parameter]
	bool? PullRefreshEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetPullRefreshEnabled(dxTarget).Result : pullRefreshEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetPullRefreshEnabled(dxTarget, value);
			} else {
				this.pullRefreshEnabled = value;
			}
		}
	}
	string refreshingText;
	[Parameter]
	string RefreshingText {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetRefreshingText(dxTarget).Result : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetRefreshingText(dxTarget, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? scrollByContent;
	[Parameter]
	bool? ScrollByContent {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollByContent(dxTarget).Result : scrollByContent;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByContent(dxTarget, value);
			} else {
				this.scrollByContent = value;
			}
		}
	}
	bool? scrollByThumb;
	[Parameter]
	bool? ScrollByThumb {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollByThumb(dxTarget).Result : scrollByThumb;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollByThumb(dxTarget, value);
			} else {
				this.scrollByThumb = value;
			}
		}
	}
	bool? scrollingEnabled;
	[Parameter]
	bool? ScrollingEnabled {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetScrollingEnabled(dxTarget).Result : scrollingEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetScrollingEnabled(dxTarget, value);
			} else {
				this.scrollingEnabled = value;
			}
		}
	}
	string selectAllMode;
	[Parameter]
	string SelectAllMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectAllMode(dxTarget).Result : selectAllMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectAllMode(dxTarget, value);
			} else {
				this.selectAllMode = value;
			}
		}
	}
	string selectionMode;
	[Parameter]
	string SelectionMode {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetSelectionMode(dxTarget).Result : selectionMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetSelectionMode(dxTarget, value);
			} else {
				this.selectionMode = value;
			}
		}
	}
	string showScrollbar;
	[Parameter]
	string ShowScrollbar {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetShowScrollbar(dxTarget).Result : showScrollbar;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowScrollbar(dxTarget, value);
			} else {
				this.showScrollbar = value;
			}
		}
	}
	bool? showSelectionControls;
	[Parameter]
	bool? ShowSelectionControls {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetShowSelectionControls(dxTarget).Result : showSelectionControls;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetShowSelectionControls(dxTarget, value);
			} else {
				this.showSelectionControls = value;
			}
		}
	}
	bool? useNativeScrolling;
	[Parameter]
	bool? UseNativeScrolling {
		get => isInitialized ? DevExpress.Ui.DxListInterop.GetUseNativeScrolling(dxTarget).Result : useNativeScrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxListInterop.SetUseNativeScrolling(dxTarget, value);
			} else {
				this.useNativeScrolling = value;
			}
		}
	}
	bool? onGroupRenderedEnabled;
	[Parameter]
	bool? OnGroupRenderedEnabled {
		get => onGroupRenderedEnabled;
		set => this.onGroupRenderedEnabled = value;
	}
	bool? onItemClickEnabled;
	[Parameter]
	bool? OnItemClickEnabled {
		get => onItemClickEnabled;
		set => this.onItemClickEnabled = value;
	}
	bool? onItemContextMenuEnabled;
	[Parameter]
	bool? OnItemContextMenuEnabled {
		get => onItemContextMenuEnabled;
		set => this.onItemContextMenuEnabled = value;
	}
	bool? onItemDeletedEnabled;
	[Parameter]
	bool? OnItemDeletedEnabled {
		get => onItemDeletedEnabled;
		set => this.onItemDeletedEnabled = value;
	}
	bool? onItemDeletingEnabled;
	[Parameter]
	bool? OnItemDeletingEnabled {
		get => onItemDeletingEnabled;
		set => this.onItemDeletingEnabled = value;
	}
	bool? onItemHoldEnabled;
	[Parameter]
	bool? OnItemHoldEnabled {
		get => onItemHoldEnabled;
		set => this.onItemHoldEnabled = value;
	}
	bool? onItemReorderedEnabled;
	[Parameter]
	bool? OnItemReorderedEnabled {
		get => onItemReorderedEnabled;
		set => this.onItemReorderedEnabled = value;
	}
	bool? onItemSwipeEnabled;
	[Parameter]
	bool? OnItemSwipeEnabled {
		get => onItemSwipeEnabled;
		set => this.onItemSwipeEnabled = value;
	}
	bool? onPageLoadingEnabled;
	[Parameter]
	bool? OnPageLoadingEnabled {
		get => onPageLoadingEnabled;
		set => this.onPageLoadingEnabled = value;
	}
	bool? onPullRefreshEnabled;
	[Parameter]
	bool? OnPullRefreshEnabled {
		get => onPullRefreshEnabled;
		set => this.onPullRefreshEnabled = value;
	}
	bool? onScrollEnabled;
	[Parameter]
	bool? OnScrollEnabled {
		get => onScrollEnabled;
		set => this.onScrollEnabled = value;
	}
	bool? onSelectAllValueChangedEnabled;
	[Parameter]
	bool? OnSelectAllValueChangedEnabled {
		get => onSelectAllValueChangedEnabled;
		set => this.onSelectAllValueChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxListInterop.GroupRendered += DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick += DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu += DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted += DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting += DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold += DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered += DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe += DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading += DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh += DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll += DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged += DxList_SelectAllValueChanged;
	}
	[Parameter]
	Action GroupRendered { get; set; }
	void DxList_GroupRendered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			GroupRendered?.Invoke();
		}
	}
	[Parameter]
	Action ItemClick { get; set; }
	void DxList_ItemClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemClick?.Invoke();
		}
	}
	[Parameter]
	Action ItemContextMenu { get; set; }
	void DxList_ItemContextMenu(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemContextMenu?.Invoke();
		}
	}
	[Parameter]
	Action ItemDeleted { get; set; }
	void DxList_ItemDeleted(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleted?.Invoke();
		}
	}
	[Parameter]
	Action ItemDeleting { get; set; }
	void DxList_ItemDeleting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemDeleting?.Invoke();
		}
	}
	[Parameter]
	Action ItemHold { get; set; }
	void DxList_ItemHold(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemHold?.Invoke();
		}
	}
	[Parameter]
	Action ItemReordered { get; set; }
	void DxList_ItemReordered(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemReordered?.Invoke();
		}
	}
	[Parameter]
	Action ItemSwipe { get; set; }
	void DxList_ItemSwipe(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemSwipe?.Invoke();
		}
	}
	[Parameter]
	Action PageLoading { get; set; }
	void DxList_PageLoading(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PageLoading?.Invoke();
		}
	}
	[Parameter]
	Action PullRefresh { get; set; }
	void DxList_PullRefresh(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullRefresh?.Invoke();
		}
	}
	[Parameter]
	Action Scroll { get; set; }
	void DxList_Scroll(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Scroll?.Invoke();
		}
	}
	[Parameter]
	Action SelectAllValueChanged { get; set; }
	void DxList_SelectAllValueChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SelectAllValueChanged?.Invoke();
		}
	}
	public float ClientHeight() {
		return DevExpress.Ui.DxListInterop.ClientHeight(dxTarget).Result;
	}
	public object CollapseGroup(float groupIndex) {
		return DevExpress.Ui.DxListInterop.CollapseGroup(dxTarget, groupIndex).Result;
	}
	public object DeleteItem(object itemElement) {
		return DevExpress.Ui.DxListInterop.DeleteItem(dxTarget, itemElement).Result;
	}
	public object ExpandGroup(float groupIndex) {
		return DevExpress.Ui.DxListInterop.ExpandGroup(dxTarget, groupIndex).Result;
	}
	public bool IsItemSelected(object itemElement) {
		return DevExpress.Ui.DxListInterop.IsItemSelected(dxTarget, itemElement).Result;
	}
	public void Reload() {
		DevExpress.Ui.DxListInterop.Reload(dxTarget);
	}
	public object ReorderItem(object itemElement, object toItemElement) {
		return DevExpress.Ui.DxListInterop.ReorderItem(dxTarget, itemElement, toItemElement).Result;
	}
	public void ScrollBy(float distance) {
		DevExpress.Ui.DxListInterop.ScrollBy(dxTarget, distance);
	}
	public float ScrollHeight() {
		return DevExpress.Ui.DxListInterop.ScrollHeight(dxTarget).Result;
	}
	public void ScrollTo(float location) {
		DevExpress.Ui.DxListInterop.ScrollTo(dxTarget, location);
	}
	public void ScrollToItem(object itemElement) {
		DevExpress.Ui.DxListInterop.ScrollToItem(dxTarget, itemElement);
	}
	public float ScrollTop() {
		return DevExpress.Ui.DxListInterop.ScrollTop(dxTarget).Result;
	}
	public void SelectAll() {
		DevExpress.Ui.DxListInterop.SelectAll(dxTarget);
	}
	public void SelectItem(object itemElement) {
		DevExpress.Ui.DxListInterop.SelectItem(dxTarget, itemElement);
	}
	public void UnselectAll() {
		DevExpress.Ui.DxListInterop.UnselectAll(dxTarget);
	}
	public void UnselectItem(object itemElement) {
		DevExpress.Ui.DxListInterop.UnselectItem(dxTarget, itemElement);
	}
	public object UpdateDimensions() {
		return DevExpress.Ui.DxListInterop.UpdateDimensions(dxTarget).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxListInterop.GroupRendered -= DxList_GroupRendered;
		DevExpress.Ui.DxListInterop.ItemClick -= DxList_ItemClick;
		DevExpress.Ui.DxListInterop.ItemContextMenu -= DxList_ItemContextMenu;
		DevExpress.Ui.DxListInterop.ItemDeleted -= DxList_ItemDeleted;
		DevExpress.Ui.DxListInterop.ItemDeleting -= DxList_ItemDeleting;
		DevExpress.Ui.DxListInterop.ItemHold -= DxList_ItemHold;
		DevExpress.Ui.DxListInterop.ItemReordered -= DxList_ItemReordered;
		DevExpress.Ui.DxListInterop.ItemSwipe -= DxList_ItemSwipe;
		DevExpress.Ui.DxListInterop.PageLoading -= DxList_PageLoading;
		DevExpress.Ui.DxListInterop.PullRefresh -= DxList_PullRefresh;
		DevExpress.Ui.DxListInterop.Scroll -= DxList_Scroll;
		DevExpress.Ui.DxListInterop.SelectAllValueChanged -= DxList_SelectAllValueChanged;
	}
}
