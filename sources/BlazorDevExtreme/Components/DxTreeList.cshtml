@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTreeListOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTreeList() : base("DxTreeList") { }
	protected override DevExpress.Ui.DxTreeListOptions CreateOptions() {
		return new DevExpress.Ui.DxTreeListOptions {
			autoExpandAll = autoExpandAll,
			columns = columns,
			customizeColumns = customizeColumns,
			dataStructure = dataStructure,
			editing = editing,
			expandedRowKeys = expandedRowKeys,
			expandNodesOnFiltering = expandNodesOnFiltering,
			hasItemsExpr = hasItemsExpr,
			itemsExpr = itemsExpr,
			keyExpr = keyExpr,
			paging = paging,
			parentIdExpr = parentIdExpr,
			remoteOperations = remoteOperations,
			rootValue = rootValue,
			scrolling = scrolling,
			selection = selection,
			onCellClickEnabled = onCellClickEnabled,
			onCellHoverChangedEnabled = onCellHoverChangedEnabled,
			onCellPreparedEnabled = onCellPreparedEnabled,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
			onEditingStartEnabled = onEditingStartEnabled,
			onEditorPreparedEnabled = onEditorPreparedEnabled,
			onEditorPreparingEnabled = onEditorPreparingEnabled,
			onNodesInitializedEnabled = onNodesInitializedEnabled,
			onRowClickEnabled = onRowClickEnabled,
			onRowPreparedEnabled = onRowPreparedEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxTreeListOptions options) {
return 		DevExpress.Ui.DxTreeListInterop.Init(dxTarget, options);
	}
	bool? autoExpandAll;
	[Parameter]
	bool? AutoExpandAll {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetAutoExpandAll(dxTarget).Result : autoExpandAll;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetAutoExpandAll(dxTarget, value);
			} else {
				this.autoExpandAll = value;
			}
		}
	}
	object columns;
	[Parameter]
	object Columns {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetColumns(dxTarget).Result : columns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetColumns(dxTarget, value);
			} else {
				this.columns = value;
			}
		}
	}
	object customizeColumns;
	[Parameter]
	object CustomizeColumns {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetCustomizeColumns(dxTarget).Result : customizeColumns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetCustomizeColumns(dxTarget, value);
			} else {
				this.customizeColumns = value;
			}
		}
	}
	string dataStructure;
	[Parameter]
	string DataStructure {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetDataStructure(dxTarget).Result : dataStructure;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetDataStructure(dxTarget, value);
			} else {
				this.dataStructure = value;
			}
		}
	}
	object editing;
	[Parameter]
	object Editing {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetEditing(dxTarget).Result : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetEditing(dxTarget, value);
			} else {
				this.editing = value;
			}
		}
	}
	object expandedRowKeys;
	[Parameter]
	object ExpandedRowKeys {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetExpandedRowKeys(dxTarget).Result : expandedRowKeys;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetExpandedRowKeys(dxTarget, value);
			} else {
				this.expandedRowKeys = value;
			}
		}
	}
	bool? expandNodesOnFiltering;
	[Parameter]
	bool? ExpandNodesOnFiltering {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetExpandNodesOnFiltering(dxTarget).Result : expandNodesOnFiltering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetExpandNodesOnFiltering(dxTarget, value);
			} else {
				this.expandNodesOnFiltering = value;
			}
		}
	}
	object hasItemsExpr;
	[Parameter]
	object HasItemsExpr {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetHasItemsExpr(dxTarget).Result : hasItemsExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetHasItemsExpr(dxTarget, value);
			} else {
				this.hasItemsExpr = value;
			}
		}
	}
	object itemsExpr;
	[Parameter]
	object ItemsExpr {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetItemsExpr(dxTarget).Result : itemsExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetItemsExpr(dxTarget, value);
			} else {
				this.itemsExpr = value;
			}
		}
	}
	object keyExpr;
	[Parameter]
	object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetKeyExpr(dxTarget).Result : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetKeyExpr(dxTarget, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object paging;
	[Parameter]
	object Paging {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetPaging(dxTarget).Result : paging;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetPaging(dxTarget, value);
			} else {
				this.paging = value;
			}
		}
	}
	object parentIdExpr;
	[Parameter]
	object ParentIdExpr {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetParentIdExpr(dxTarget).Result : parentIdExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetParentIdExpr(dxTarget, value);
			} else {
				this.parentIdExpr = value;
			}
		}
	}
	object remoteOperations;
	[Parameter]
	object RemoteOperations {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetRemoteOperations(dxTarget).Result : remoteOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetRemoteOperations(dxTarget, value);
			} else {
				this.remoteOperations = value;
			}
		}
	}
	object rootValue;
	[Parameter]
	object RootValue {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetRootValue(dxTarget).Result : rootValue;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetRootValue(dxTarget, value);
			} else {
				this.rootValue = value;
			}
		}
	}
	object scrolling;
	[Parameter]
	object Scrolling {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetScrolling(dxTarget).Result : scrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetScrolling(dxTarget, value);
			} else {
				this.scrolling = value;
			}
		}
	}
	object selection;
	[Parameter]
	object Selection {
		get => isInitialized ? DevExpress.Ui.DxTreeListInterop.GetSelection(dxTarget).Result : selection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTreeListInterop.SetSelection(dxTarget, value);
			} else {
				this.selection = value;
			}
		}
	}
	bool? onCellClickEnabled;
	[Parameter]
	bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellHoverChangedEnabled;
	[Parameter]
	bool? OnCellHoverChangedEnabled {
		get => onCellHoverChangedEnabled;
		set => this.onCellHoverChangedEnabled = value;
	}
	bool? onCellPreparedEnabled;
	[Parameter]
	bool? OnCellPreparedEnabled {
		get => onCellPreparedEnabled;
		set => this.onCellPreparedEnabled = value;
	}
	bool? onContextMenuPreparingEnabled;
	[Parameter]
	bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	bool? onEditingStartEnabled;
	[Parameter]
	bool? OnEditingStartEnabled {
		get => onEditingStartEnabled;
		set => this.onEditingStartEnabled = value;
	}
	bool? onEditorPreparedEnabled;
	[Parameter]
	bool? OnEditorPreparedEnabled {
		get => onEditorPreparedEnabled;
		set => this.onEditorPreparedEnabled = value;
	}
	bool? onEditorPreparingEnabled;
	[Parameter]
	bool? OnEditorPreparingEnabled {
		get => onEditorPreparingEnabled;
		set => this.onEditorPreparingEnabled = value;
	}
	bool? onNodesInitializedEnabled;
	[Parameter]
	bool? OnNodesInitializedEnabled {
		get => onNodesInitializedEnabled;
		set => this.onNodesInitializedEnabled = value;
	}
	bool? onRowClickEnabled;
	[Parameter]
	bool? OnRowClickEnabled {
		get => onRowClickEnabled;
		set => this.onRowClickEnabled = value;
	}
	bool? onRowPreparedEnabled;
	[Parameter]
	bool? OnRowPreparedEnabled {
		get => onRowPreparedEnabled;
		set => this.onRowPreparedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxTreeListInterop.CellClick += DxTreeList_CellClick;
		DevExpress.Ui.DxTreeListInterop.CellHoverChanged += DxTreeList_CellHoverChanged;
		DevExpress.Ui.DxTreeListInterop.CellPrepared += DxTreeList_CellPrepared;
		DevExpress.Ui.DxTreeListInterop.ContextMenuPreparing += DxTreeList_ContextMenuPreparing;
		DevExpress.Ui.DxTreeListInterop.EditingStart += DxTreeList_EditingStart;
		DevExpress.Ui.DxTreeListInterop.EditorPrepared += DxTreeList_EditorPrepared;
		DevExpress.Ui.DxTreeListInterop.EditorPreparing += DxTreeList_EditorPreparing;
		DevExpress.Ui.DxTreeListInterop.NodesInitialized += DxTreeList_NodesInitialized;
		DevExpress.Ui.DxTreeListInterop.RowClick += DxTreeList_RowClick;
		DevExpress.Ui.DxTreeListInterop.RowPrepared += DxTreeList_RowPrepared;
	}
	[Parameter]
	Action CellClick { get; set; }
	void DxTreeList_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	[Parameter]
	Action CellHoverChanged { get; set; }
	void DxTreeList_CellHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action CellPrepared { get; set; }
	void DxTreeList_CellPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellPrepared?.Invoke();
		}
	}
	[Parameter]
	Action ContextMenuPreparing { get; set; }
	void DxTreeList_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	[Parameter]
	Action EditingStart { get; set; }
	void DxTreeList_EditingStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditingStart?.Invoke();
		}
	}
	[Parameter]
	Action EditorPrepared { get; set; }
	void DxTreeList_EditorPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPrepared?.Invoke();
		}
	}
	[Parameter]
	Action EditorPreparing { get; set; }
	void DxTreeList_EditorPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPreparing?.Invoke();
		}
	}
	[Parameter]
	Action NodesInitialized { get; set; }
	void DxTreeList_NodesInitialized(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			NodesInitialized?.Invoke();
		}
	}
	[Parameter]
	Action RowClick { get; set; }
	void DxTreeList_RowClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowClick?.Invoke();
		}
	}
	[Parameter]
	Action RowPrepared { get; set; }
	void DxTreeList_RowPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowPrepared?.Invoke();
		}
	}
	public void AddColumn(object columnOptions) {
		DevExpress.Ui.DxTreeListInterop.AddColumn(dxTarget, columnOptions);
	}
	public void AddRow() {
		DevExpress.Ui.DxTreeListInterop.AddRow(dxTarget);
	}
	public void AddRow(object parentId) {
		DevExpress.Ui.DxTreeListInterop.AddRow(dxTarget, parentId);
	}
	public object CollapseRow(object key) {
		return DevExpress.Ui.DxTreeListInterop.CollapseRow(dxTarget, key).Result;
	}
	public object ExpandRow(object key) {
		return DevExpress.Ui.DxTreeListInterop.ExpandRow(dxTarget, key).Result;
	}
	public void ForEachNode(object callback) {
		DevExpress.Ui.DxTreeListInterop.ForEachNode(dxTarget, callback);
	}
	public void ForEachNode(object nodes, object callback) {
		DevExpress.Ui.DxTreeListInterop.ForEachNode(dxTarget, nodes, callback);
	}
	public object GetNodeByKey(object key) {
		return DevExpress.Ui.DxTreeListInterop.GetNodeByKey(dxTarget, key).Result;
	}
	public object GetRootNode() {
		return DevExpress.Ui.DxTreeListInterop.GetRootNode(dxTarget).Result;
	}
	public object GetSelectedRowKeys() {
		return DevExpress.Ui.DxTreeListInterop.GetSelectedRowKeys(dxTarget).Result;
	}
	public object GetSelectedRowKeys(bool leavesOnly) {
		return DevExpress.Ui.DxTreeListInterop.GetSelectedRowKeys(dxTarget, leavesOnly).Result;
	}
	public object GetSelectedRowKeys(string mode) {
		return DevExpress.Ui.DxTreeListInterop.GetSelectedRowKeys(dxTarget, mode).Result;
	}
	public object GetSelectedRowsData() {
		return DevExpress.Ui.DxTreeListInterop.GetSelectedRowsData(dxTarget).Result;
	}
	public object GetVisibleColumns() {
		return DevExpress.Ui.DxTreeListInterop.GetVisibleColumns(dxTarget).Result;
	}
	public object GetVisibleColumns(float headerLevel) {
		return DevExpress.Ui.DxTreeListInterop.GetVisibleColumns(dxTarget, headerLevel).Result;
	}
	public object GetVisibleRows() {
		return DevExpress.Ui.DxTreeListInterop.GetVisibleRows(dxTarget).Result;
	}
	public bool IsRowExpanded(object key) {
		return DevExpress.Ui.DxTreeListInterop.IsRowExpanded(dxTarget, key).Result;
	}
	public object LoadDescendants() {
		return DevExpress.Ui.DxTreeListInterop.LoadDescendants(dxTarget).Result;
	}
	public object LoadDescendants(object keys) {
		return DevExpress.Ui.DxTreeListInterop.LoadDescendants(dxTarget, keys).Result;
	}
	public object LoadDescendants(object keys, bool childrenOnly) {
		return DevExpress.Ui.DxTreeListInterop.LoadDescendants(dxTarget, keys, childrenOnly).Result;
	}
	public void Dispose() {
		DevExpress.Ui.DxTreeListInterop.CellClick -= DxTreeList_CellClick;
		DevExpress.Ui.DxTreeListInterop.CellHoverChanged -= DxTreeList_CellHoverChanged;
		DevExpress.Ui.DxTreeListInterop.CellPrepared -= DxTreeList_CellPrepared;
		DevExpress.Ui.DxTreeListInterop.ContextMenuPreparing -= DxTreeList_ContextMenuPreparing;
		DevExpress.Ui.DxTreeListInterop.EditingStart -= DxTreeList_EditingStart;
		DevExpress.Ui.DxTreeListInterop.EditorPrepared -= DxTreeList_EditorPrepared;
		DevExpress.Ui.DxTreeListInterop.EditorPreparing -= DxTreeList_EditorPreparing;
		DevExpress.Ui.DxTreeListInterop.NodesInitialized -= DxTreeList_NodesInitialized;
		DevExpress.Ui.DxTreeListInterop.RowClick -= DxTreeList_RowClick;
		DevExpress.Ui.DxTreeListInterop.RowPrepared -= DxTreeList_RowPrepared;
	}
}
