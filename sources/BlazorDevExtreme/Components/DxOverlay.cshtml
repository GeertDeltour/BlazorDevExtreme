@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxOverlayOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxOverlay() : base("DxOverlay") { }
	protected override DevExpress.Ui.DxOverlayOptions CreateOptions() {
		return new DevExpress.Ui.DxOverlayOptions {
			animation = animation,
			closeOnBackButton = closeOnBackButton,
			closeOnOutsideClick = closeOnOutsideClick,
			contentTemplate = contentTemplate,
			deferRendering = deferRendering,
			dragEnabled = dragEnabled,
			height = height,
			maxHeight = maxHeight,
			maxWidth = maxWidth,
			minHeight = minHeight,
			minWidth = minWidth,
			position = position,
			shading = shading,
			shadingColor = shadingColor,
			visible = visible,
			width = width,
			onHiddenEnabled = onHiddenEnabled,
			onHidingEnabled = onHidingEnabled,
			onShowingEnabled = onShowingEnabled,
			onShownEnabled = onShownEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxOverlayOptions options) {
		DevExpress.Ui.DxOverlayInterop.Init(dxTarget, options);
	}
	object animation;
	[Parameter]
	object Animation {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetAnimation(dxTarget) : animation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetAnimation(dxTarget, value);
			} else {
				this.animation = value;
			}
		}
	}
	bool? closeOnBackButton;
	[Parameter]
	bool? CloseOnBackButton {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetCloseOnBackButton(dxTarget) : closeOnBackButton;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetCloseOnBackButton(dxTarget, value);
			} else {
				this.closeOnBackButton = value;
			}
		}
	}
	object closeOnOutsideClick;
	[Parameter]
	object CloseOnOutsideClick {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetCloseOnOutsideClick(dxTarget) : closeOnOutsideClick;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetCloseOnOutsideClick(dxTarget, value);
			} else {
				this.closeOnOutsideClick = value;
			}
		}
	}
	object contentTemplate;
	[Parameter]
	object ContentTemplate {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetContentTemplate(dxTarget) : contentTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetContentTemplate(dxTarget, value);
			} else {
				this.contentTemplate = value;
			}
		}
	}
	bool? deferRendering;
	[Parameter]
	bool? DeferRendering {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetDeferRendering(dxTarget) : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetDeferRendering(dxTarget, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	bool? dragEnabled;
	[Parameter]
	bool? DragEnabled {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetDragEnabled(dxTarget) : dragEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetDragEnabled(dxTarget, value);
			} else {
				this.dragEnabled = value;
			}
		}
	}
	object height;
	[Parameter]
	object Height {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetHeight(dxTarget) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetHeight(dxTarget, value);
			} else {
				this.height = value;
			}
		}
	}
	object maxHeight;
	[Parameter]
	object MaxHeight {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetMaxHeight(dxTarget) : maxHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetMaxHeight(dxTarget, value);
			} else {
				this.maxHeight = value;
			}
		}
	}
	object maxWidth;
	[Parameter]
	object MaxWidth {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetMaxWidth(dxTarget) : maxWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetMaxWidth(dxTarget, value);
			} else {
				this.maxWidth = value;
			}
		}
	}
	object minHeight;
	[Parameter]
	object MinHeight {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetMinHeight(dxTarget) : minHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetMinHeight(dxTarget, value);
			} else {
				this.minHeight = value;
			}
		}
	}
	object minWidth;
	[Parameter]
	object MinWidth {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetMinWidth(dxTarget) : minWidth;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetMinWidth(dxTarget, value);
			} else {
				this.minWidth = value;
			}
		}
	}
	object position;
	[Parameter]
	object Position {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetPosition(dxTarget) : position;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetPosition(dxTarget, value);
			} else {
				this.position = value;
			}
		}
	}
	bool? shading;
	[Parameter]
	bool? Shading {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetShading(dxTarget) : shading;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetShading(dxTarget, value);
			} else {
				this.shading = value;
			}
		}
	}
	string shadingColor;
	[Parameter]
	string ShadingColor {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetShadingColor(dxTarget) : shadingColor;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetShadingColor(dxTarget, value);
			} else {
				this.shadingColor = value;
			}
		}
	}
	bool? visible;
	[Parameter]
	bool? Visible {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetVisible(dxTarget) : visible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetVisible(dxTarget, value);
			} else {
				this.visible = value;
			}
		}
	}
	object width;
	[Parameter]
	object Width {
		get => isInitialized ? DevExpress.Ui.DxOverlayInterop.GetWidth(dxTarget) : width;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxOverlayInterop.SetWidth(dxTarget, value);
			} else {
				this.width = value;
			}
		}
	}
	bool? onHiddenEnabled;
	[Parameter]
	bool? OnHiddenEnabled {
		get => onHiddenEnabled;
		set => this.onHiddenEnabled = value;
	}
	bool? onHidingEnabled;
	[Parameter]
	bool? OnHidingEnabled {
		get => onHidingEnabled;
		set => this.onHidingEnabled = value;
	}
	bool? onShowingEnabled;
	[Parameter]
	bool? OnShowingEnabled {
		get => onShowingEnabled;
		set => this.onShowingEnabled = value;
	}
	bool? onShownEnabled;
	[Parameter]
	bool? OnShownEnabled {
		get => onShownEnabled;
		set => this.onShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxOverlayInterop.Hidden += DxOverlay_Hidden;
		DevExpress.Ui.DxOverlayInterop.Hiding += DxOverlay_Hiding;
		DevExpress.Ui.DxOverlayInterop.Showing += DxOverlay_Showing;
		DevExpress.Ui.DxOverlayInterop.Shown += DxOverlay_Shown;
	}
	[Parameter]
	Action Hidden { get; set; }
	void DxOverlay_Hidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hidden?.Invoke();
		}
	}
	[Parameter]
	Action Hiding { get; set; }
	void DxOverlay_Hiding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Hiding?.Invoke();
		}
	}
	[Parameter]
	Action Showing { get; set; }
	void DxOverlay_Showing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Showing?.Invoke();
		}
	}
	[Parameter]
	Action Shown { get; set; }
	void DxOverlay_Shown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Shown?.Invoke();
		}
	}
	public object Content() {
		return DevExpress.Ui.DxOverlayInterop.Content(dxTarget);
	}
	public object Hide() {
		return DevExpress.Ui.DxOverlayInterop.Hide(dxTarget);
	}
	public void Repaint() {
		DevExpress.Ui.DxOverlayInterop.Repaint(dxTarget);
	}
	public object Show() {
		return DevExpress.Ui.DxOverlayInterop.Show(dxTarget);
	}
	public object Toggle(bool showing) {
		return DevExpress.Ui.DxOverlayInterop.Toggle(dxTarget, showing);
	}
	public void Dispose() {
		DevExpress.Ui.DxOverlayInterop.Hidden -= DxOverlay_Hidden;
		DevExpress.Ui.DxOverlayInterop.Hiding -= DxOverlay_Hiding;
		DevExpress.Ui.DxOverlayInterop.Showing -= DxOverlay_Showing;
		DevExpress.Ui.DxOverlayInterop.Shown -= DxOverlay_Shown;
	}
}
