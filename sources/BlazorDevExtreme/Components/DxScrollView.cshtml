@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxScrollViewOptions>

<div id="@Id"></div>

@functions {
	public DxScrollView() : base("DxScrollView") { }
	protected override DevExpress.Ui.DxScrollViewOptions CreateOptions() {
		return new DevExpress.Ui.DxScrollViewOptions {
			pulledDownText = pulledDownText,
			pullingDownText = pullingDownText,
			reachBottomText = reachBottomText,
			refreshingText = refreshingText,
			onPullDownEnabled = onPullDownEnabled,
			onReachBottomEnabled = onReachBottomEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxScrollViewOptions options) {
		DevExpress.Ui.DxScrollViewInterop.Init(Id, options);
	}
	string pulledDownText;
	public string PulledDownText {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetPulledDownText(Id) : pulledDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetPulledDownText(Id, value);
			} else {
				this.pulledDownText = value;
			}
		}
	}
	string pullingDownText;
	public string PullingDownText {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetPullingDownText(Id) : pullingDownText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetPullingDownText(Id, value);
			} else {
				this.pullingDownText = value;
			}
		}
	}
	string reachBottomText;
	public string ReachBottomText {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetReachBottomText(Id) : reachBottomText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetReachBottomText(Id, value);
			} else {
				this.reachBottomText = value;
			}
		}
	}
	string refreshingText;
	public string RefreshingText {
		get => isInitialized ? DevExpress.Ui.DxScrollViewInterop.GetRefreshingText(Id) : refreshingText;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxScrollViewInterop.SetRefreshingText(Id, value);
			} else {
				this.refreshingText = value;
			}
		}
	}
	bool? onPullDownEnabled;
	public bool? OnPullDownEnabled {
		get => onPullDownEnabled;
		set => this.onPullDownEnabled = value;
	}
	bool? onReachBottomEnabled;
	public bool? OnReachBottomEnabled {
		get => onReachBottomEnabled;
		set => this.onReachBottomEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxScrollViewInterop.PullDown += DxScrollView_PullDown;
		DevExpress.Ui.DxScrollViewInterop.ReachBottom += DxScrollView_ReachBottom;
	}
	public Action PullDown { get; set; }
	void DxScrollView_PullDown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			PullDown?.Invoke();
		}
	}
	public Action ReachBottom { get; set; }
	void DxScrollView_ReachBottom(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ReachBottom?.Invoke();
		}
	}
	public void Refresh() {
		DevExpress.Ui.DxScrollViewInterop.Refresh(Id);
	}
	public object Release(bool preventScrollBottom) {
		return DevExpress.Ui.DxScrollViewInterop.Release(Id, preventScrollBottom);
	}
	public void Dispose() {
		DevExpress.Ui.DxScrollViewInterop.PullDown -= DxScrollView_PullDown;
		DevExpress.Ui.DxScrollViewInterop.ReachBottom -= DxScrollView_ReachBottom;
	}
}
