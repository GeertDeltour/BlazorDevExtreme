@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxAccordionOptions>

<div id="@Id"></div>

@functions {
	public DxAccordion() : base("DxAccordion") { }
	protected override DevExpress.Ui.DxAccordionOptions CreateOptions() {
		return new DevExpress.Ui.DxAccordionOptions {
			animationDuration = animationDuration,
			collapsible = collapsible,
			deferRendering = deferRendering,
			focusStateEnabled = focusStateEnabled,
			height = height,
			hoverStateEnabled = hoverStateEnabled,
			itemTemplate = itemTemplate,
			itemTitleTemplate = itemTitleTemplate,
			multiple = multiple,
			selectedIndex = selectedIndex,
			onItemTitleClickEnabled = onItemTitleClickEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxAccordionOptions options) {
		DevExpress.Ui.DxAccordionInterop.Init(Id, options);
	}
	float? animationDuration;
	public float? AnimationDuration {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetAnimationDuration(Id) : animationDuration;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetAnimationDuration(Id, value);
			} else {
				this.animationDuration = value;
			}
		}
	}
	bool? collapsible;
	public bool? Collapsible {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetCollapsible(Id) : collapsible;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetCollapsible(Id, value);
			} else {
				this.collapsible = value;
			}
		}
	}
	bool? deferRendering;
	public bool? DeferRendering {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetDeferRendering(Id) : deferRendering;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetDeferRendering(Id, value);
			} else {
				this.deferRendering = value;
			}
		}
	}
	bool? focusStateEnabled;
	public bool? FocusStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetFocusStateEnabled(Id) : focusStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetFocusStateEnabled(Id, value);
			} else {
				this.focusStateEnabled = value;
			}
		}
	}
	object height;
	public object Height {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetHeight(Id) : height;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetHeight(Id, value);
			} else {
				this.height = value;
			}
		}
	}
	bool? hoverStateEnabled;
	public bool? HoverStateEnabled {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetHoverStateEnabled(Id) : hoverStateEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetHoverStateEnabled(Id, value);
			} else {
				this.hoverStateEnabled = value;
			}
		}
	}
	object itemTemplate;
	public object ItemTemplate {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetItemTemplate(Id) : itemTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetItemTemplate(Id, value);
			} else {
				this.itemTemplate = value;
			}
		}
	}
	object itemTitleTemplate;
	public object ItemTitleTemplate {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetItemTitleTemplate(Id) : itemTitleTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetItemTitleTemplate(Id, value);
			} else {
				this.itemTitleTemplate = value;
			}
		}
	}
	bool? multiple;
	public bool? Multiple {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetMultiple(Id) : multiple;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetMultiple(Id, value);
			} else {
				this.multiple = value;
			}
		}
	}
	float? selectedIndex;
	public float? SelectedIndex {
		get => isInitialized ? DevExpress.Ui.DxAccordionInterop.GetSelectedIndex(Id) : selectedIndex;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxAccordionInterop.SetSelectedIndex(Id, value);
			} else {
				this.selectedIndex = value;
			}
		}
	}
	bool? onItemTitleClickEnabled;
	public bool? OnItemTitleClickEnabled {
		get => onItemTitleClickEnabled;
		set => this.onItemTitleClickEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxAccordionInterop.ItemTitleClick += DxAccordion_ItemTitleClick;
	}
	public Action ItemTitleClick { get; set; }
	void DxAccordion_ItemTitleClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ItemTitleClick?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxAccordionInterop.ItemTitleClick -= DxAccordion_ItemTitleClick;
	}
}
