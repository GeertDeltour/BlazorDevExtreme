@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxTextAreaOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxTextArea() : base("DxTextArea") { }
	protected override DevExpress.Ui.DxTextAreaOptions CreateOptions() {
		return new DevExpress.Ui.DxTextAreaOptions {
			autoResizeEnabled = autoResizeEnabled,
			maxHeight = maxHeight,
			minHeight = minHeight,
			spellcheck = spellcheck,
		};
	}
	protected override Task Init(DevExpress.Ui.DxTextAreaOptions options) {
return 		DevExpress.Ui.DxTextAreaInterop.Init(dxTarget, options);
	}
	bool? autoResizeEnabled;
	[Parameter]
	bool? AutoResizeEnabled {
		get => isInitialized ? DevExpress.Ui.DxTextAreaInterop.GetAutoResizeEnabled(dxTarget).Result : autoResizeEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTextAreaInterop.SetAutoResizeEnabled(dxTarget, value);
			} else {
				this.autoResizeEnabled = value;
			}
		}
	}
	object maxHeight;
	[Parameter]
	object MaxHeight {
		get => isInitialized ? DevExpress.Ui.DxTextAreaInterop.GetMaxHeight(dxTarget).Result : maxHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTextAreaInterop.SetMaxHeight(dxTarget, value);
			} else {
				this.maxHeight = value;
			}
		}
	}
	object minHeight;
	[Parameter]
	object MinHeight {
		get => isInitialized ? DevExpress.Ui.DxTextAreaInterop.GetMinHeight(dxTarget).Result : minHeight;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTextAreaInterop.SetMinHeight(dxTarget, value);
			} else {
				this.minHeight = value;
			}
		}
	}
	bool? spellcheck;
	[Parameter]
	bool? Spellcheck {
		get => isInitialized ? DevExpress.Ui.DxTextAreaInterop.GetSpellcheck(dxTarget).Result : spellcheck;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxTextAreaInterop.SetSpellcheck(dxTarget, value);
			} else {
				this.spellcheck = value;
			}
		}
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
	}
	public void Dispose() {
	}
}
