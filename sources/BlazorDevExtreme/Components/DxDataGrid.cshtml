@implements IDisposable
@inherits DxBlazorCompoment<DevExpress.Ui.DxDataGridOptions>

<div id="@Id"></div>

@functions {
	public DxDataGrid() : base("DxDataGrid") { }
	protected override DevExpress.Ui.DxDataGridOptions CreateOptions() {
		return new DevExpress.Ui.DxDataGridOptions {
			columns = columns,
			customizeColumns = customizeColumns,
			customizeExportData = customizeExportData,
			editing = editing,
			export = export,
			grouping = grouping,
			groupPanel = groupPanel,
			keyExpr = keyExpr,
			masterDetail = masterDetail,
			remoteOperations = remoteOperations,
			rowTemplate = rowTemplate,
			scrolling = scrolling,
			selection = selection,
			selectionFilter = selectionFilter,
			sortByGroupSummaryInfo = sortByGroupSummaryInfo,
			summary = summary,
			onCellClickEnabled = onCellClickEnabled,
			onCellHoverChangedEnabled = onCellHoverChangedEnabled,
			onCellPreparedEnabled = onCellPreparedEnabled,
			onContextMenuPreparingEnabled = onContextMenuPreparingEnabled,
			onEditingStartEnabled = onEditingStartEnabled,
			onEditorPreparedEnabled = onEditorPreparedEnabled,
			onEditorPreparingEnabled = onEditorPreparingEnabled,
			onExportedEnabled = onExportedEnabled,
			onExportingEnabled = onExportingEnabled,
			onFileSavingEnabled = onFileSavingEnabled,
			onRowClickEnabled = onRowClickEnabled,
			onRowPreparedEnabled = onRowPreparedEnabled,
		};
	}
	protected override void Init(DevExpress.Ui.DxDataGridOptions options) {
		DevExpress.Ui.DxDataGridInterop.Init(Id, options);
	}
	object columns;
	public object Columns {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetColumns(Id) : columns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetColumns(Id, value);
			} else {
				this.columns = value;
			}
		}
	}
	object customizeColumns;
	public object CustomizeColumns {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetCustomizeColumns(Id) : customizeColumns;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCustomizeColumns(Id, value);
			} else {
				this.customizeColumns = value;
			}
		}
	}
	object customizeExportData;
	public object CustomizeExportData {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetCustomizeExportData(Id) : customizeExportData;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetCustomizeExportData(Id, value);
			} else {
				this.customizeExportData = value;
			}
		}
	}
	object editing;
	public object Editing {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetEditing(Id) : editing;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetEditing(Id, value);
			} else {
				this.editing = value;
			}
		}
	}
	object export;
	public object Export {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetExport(Id) : export;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetExport(Id, value);
			} else {
				this.export = value;
			}
		}
	}
	object grouping;
	public object Grouping {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetGrouping(Id) : grouping;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetGrouping(Id, value);
			} else {
				this.grouping = value;
			}
		}
	}
	object groupPanel;
	public object GroupPanel {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetGroupPanel(Id) : groupPanel;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetGroupPanel(Id, value);
			} else {
				this.groupPanel = value;
			}
		}
	}
	object keyExpr;
	public object KeyExpr {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetKeyExpr(Id) : keyExpr;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetKeyExpr(Id, value);
			} else {
				this.keyExpr = value;
			}
		}
	}
	object masterDetail;
	public object MasterDetail {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetMasterDetail(Id) : masterDetail;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetMasterDetail(Id, value);
			} else {
				this.masterDetail = value;
			}
		}
	}
	object remoteOperations;
	public object RemoteOperations {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetRemoteOperations(Id) : remoteOperations;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRemoteOperations(Id, value);
			} else {
				this.remoteOperations = value;
			}
		}
	}
	object rowTemplate;
	public object RowTemplate {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetRowTemplate(Id) : rowTemplate;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetRowTemplate(Id, value);
			} else {
				this.rowTemplate = value;
			}
		}
	}
	object scrolling;
	public object Scrolling {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetScrolling(Id) : scrolling;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetScrolling(Id, value);
			} else {
				this.scrolling = value;
			}
		}
	}
	object selection;
	public object Selection {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSelection(Id) : selection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSelection(Id, value);
			} else {
				this.selection = value;
			}
		}
	}
	object selectionFilter;
	public object SelectionFilter {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSelectionFilter(Id) : selectionFilter;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSelectionFilter(Id, value);
			} else {
				this.selectionFilter = value;
			}
		}
	}
	object sortByGroupSummaryInfo;
	public object SortByGroupSummaryInfo {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSortByGroupSummaryInfo(Id) : sortByGroupSummaryInfo;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSortByGroupSummaryInfo(Id, value);
			} else {
				this.sortByGroupSummaryInfo = value;
			}
		}
	}
	object summary;
	public object Summary {
		get => isInitialized ? DevExpress.Ui.DxDataGridInterop.GetSummary(Id) : summary;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxDataGridInterop.SetSummary(Id, value);
			} else {
				this.summary = value;
			}
		}
	}
	bool? onCellClickEnabled;
	public bool? OnCellClickEnabled {
		get => onCellClickEnabled;
		set => this.onCellClickEnabled = value;
	}
	bool? onCellHoverChangedEnabled;
	public bool? OnCellHoverChangedEnabled {
		get => onCellHoverChangedEnabled;
		set => this.onCellHoverChangedEnabled = value;
	}
	bool? onCellPreparedEnabled;
	public bool? OnCellPreparedEnabled {
		get => onCellPreparedEnabled;
		set => this.onCellPreparedEnabled = value;
	}
	bool? onContextMenuPreparingEnabled;
	public bool? OnContextMenuPreparingEnabled {
		get => onContextMenuPreparingEnabled;
		set => this.onContextMenuPreparingEnabled = value;
	}
	bool? onEditingStartEnabled;
	public bool? OnEditingStartEnabled {
		get => onEditingStartEnabled;
		set => this.onEditingStartEnabled = value;
	}
	bool? onEditorPreparedEnabled;
	public bool? OnEditorPreparedEnabled {
		get => onEditorPreparedEnabled;
		set => this.onEditorPreparedEnabled = value;
	}
	bool? onEditorPreparingEnabled;
	public bool? OnEditorPreparingEnabled {
		get => onEditorPreparingEnabled;
		set => this.onEditorPreparingEnabled = value;
	}
	bool? onExportedEnabled;
	public bool? OnExportedEnabled {
		get => onExportedEnabled;
		set => this.onExportedEnabled = value;
	}
	bool? onExportingEnabled;
	public bool? OnExportingEnabled {
		get => onExportingEnabled;
		set => this.onExportingEnabled = value;
	}
	bool? onFileSavingEnabled;
	public bool? OnFileSavingEnabled {
		get => onFileSavingEnabled;
		set => this.onFileSavingEnabled = value;
	}
	bool? onRowClickEnabled;
	public bool? OnRowClickEnabled {
		get => onRowClickEnabled;
		set => this.onRowClickEnabled = value;
	}
	bool? onRowPreparedEnabled;
	public bool? OnRowPreparedEnabled {
		get => onRowPreparedEnabled;
		set => this.onRowPreparedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxDataGridInterop.CellClick += DxDataGrid_CellClick;
		DevExpress.Ui.DxDataGridInterop.CellHoverChanged += DxDataGrid_CellHoverChanged;
		DevExpress.Ui.DxDataGridInterop.CellPrepared += DxDataGrid_CellPrepared;
		DevExpress.Ui.DxDataGridInterop.ContextMenuPreparing += DxDataGrid_ContextMenuPreparing;
		DevExpress.Ui.DxDataGridInterop.EditingStart += DxDataGrid_EditingStart;
		DevExpress.Ui.DxDataGridInterop.EditorPrepared += DxDataGrid_EditorPrepared;
		DevExpress.Ui.DxDataGridInterop.EditorPreparing += DxDataGrid_EditorPreparing;
		DevExpress.Ui.DxDataGridInterop.Exported += DxDataGrid_Exported;
		DevExpress.Ui.DxDataGridInterop.Exporting += DxDataGrid_Exporting;
		DevExpress.Ui.DxDataGridInterop.FileSaving += DxDataGrid_FileSaving;
		DevExpress.Ui.DxDataGridInterop.RowClick += DxDataGrid_RowClick;
		DevExpress.Ui.DxDataGridInterop.RowPrepared += DxDataGrid_RowPrepared;
	}
	public Action CellClick { get; set; }
	void DxDataGrid_CellClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellClick?.Invoke();
		}
	}
	public Action CellHoverChanged { get; set; }
	void DxDataGrid_CellHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellHoverChanged?.Invoke();
		}
	}
	public Action CellPrepared { get; set; }
	void DxDataGrid_CellPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			CellPrepared?.Invoke();
		}
	}
	public Action ContextMenuPreparing { get; set; }
	void DxDataGrid_ContextMenuPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ContextMenuPreparing?.Invoke();
		}
	}
	public Action EditingStart { get; set; }
	void DxDataGrid_EditingStart(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditingStart?.Invoke();
		}
	}
	public Action EditorPrepared { get; set; }
	void DxDataGrid_EditorPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPrepared?.Invoke();
		}
	}
	public Action EditorPreparing { get; set; }
	void DxDataGrid_EditorPreparing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			EditorPreparing?.Invoke();
		}
	}
	public Action Exported { get; set; }
	void DxDataGrid_Exported(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exported?.Invoke();
		}
	}
	public Action Exporting { get; set; }
	void DxDataGrid_Exporting(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			Exporting?.Invoke();
		}
	}
	public Action FileSaving { get; set; }
	void DxDataGrid_FileSaving(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			FileSaving?.Invoke();
		}
	}
	public Action RowClick { get; set; }
	void DxDataGrid_RowClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowClick?.Invoke();
		}
	}
	public Action RowPrepared { get; set; }
	void DxDataGrid_RowPrepared(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			RowPrepared?.Invoke();
		}
	}
	public void AddColumn(object columnOptions) {
		DevExpress.Ui.DxDataGridInterop.AddColumn(Id, columnOptions);
	}
	public void AddRow() {
		DevExpress.Ui.DxDataGridInterop.AddRow(Id);
	}
	public void ClearGrouping() {
		DevExpress.Ui.DxDataGridInterop.ClearGrouping(Id);
	}
	public void CollapseAll(float groupIndex) {
		DevExpress.Ui.DxDataGridInterop.CollapseAll(Id, groupIndex);
	}
	public object CollapseRow(object key) {
		return DevExpress.Ui.DxDataGridInterop.CollapseRow(Id, key);
	}
	public void ExpandAll(float groupIndex) {
		DevExpress.Ui.DxDataGridInterop.ExpandAll(Id, groupIndex);
	}
	public object ExpandRow(object key) {
		return DevExpress.Ui.DxDataGridInterop.ExpandRow(Id, key);
	}
	public void ExportToExcel(bool selectionOnly) {
		DevExpress.Ui.DxDataGridInterop.ExportToExcel(Id, selectionOnly);
	}
	public object GetSelectedRowKeys() {
		return DevExpress.Ui.DxDataGridInterop.GetSelectedRowKeys(Id);
	}
	public object GetSelectedRowsData() {
		return DevExpress.Ui.DxDataGridInterop.GetSelectedRowsData(Id);
	}
	public object GetTotalSummaryValue(string summaryItemName) {
		return DevExpress.Ui.DxDataGridInterop.GetTotalSummaryValue(Id, summaryItemName);
	}
	public object GetVisibleColumns() {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleColumns(Id);
	}
	public object GetVisibleColumns(float headerLevel) {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleColumns(Id, headerLevel);
	}
	public object GetVisibleRows() {
		return DevExpress.Ui.DxDataGridInterop.GetVisibleRows(Id);
	}
	public void InsertRow() {
		DevExpress.Ui.DxDataGridInterop.InsertRow(Id);
	}
	public bool IsRowExpanded(object key) {
		return DevExpress.Ui.DxDataGridInterop.IsRowExpanded(Id, key);
	}
	public bool IsRowSelected(object data) {
		return DevExpress.Ui.DxDataGridInterop.IsRowSelected(Id, data);
	}
	public void RemoveRow(float rowIndex) {
		DevExpress.Ui.DxDataGridInterop.RemoveRow(Id, rowIndex);
	}
	public float TotalCount() {
		return DevExpress.Ui.DxDataGridInterop.TotalCount(Id);
	}
	public void Dispose() {
		DevExpress.Ui.DxDataGridInterop.CellClick -= DxDataGrid_CellClick;
		DevExpress.Ui.DxDataGridInterop.CellHoverChanged -= DxDataGrid_CellHoverChanged;
		DevExpress.Ui.DxDataGridInterop.CellPrepared -= DxDataGrid_CellPrepared;
		DevExpress.Ui.DxDataGridInterop.ContextMenuPreparing -= DxDataGrid_ContextMenuPreparing;
		DevExpress.Ui.DxDataGridInterop.EditingStart -= DxDataGrid_EditingStart;
		DevExpress.Ui.DxDataGridInterop.EditorPrepared -= DxDataGrid_EditorPrepared;
		DevExpress.Ui.DxDataGridInterop.EditorPreparing -= DxDataGrid_EditorPreparing;
		DevExpress.Ui.DxDataGridInterop.Exported -= DxDataGrid_Exported;
		DevExpress.Ui.DxDataGridInterop.Exporting -= DxDataGrid_Exporting;
		DevExpress.Ui.DxDataGridInterop.FileSaving -= DxDataGrid_FileSaving;
		DevExpress.Ui.DxDataGridInterop.RowClick -= DxDataGrid_RowClick;
		DevExpress.Ui.DxDataGridInterop.RowPrepared -= DxDataGrid_RowPrepared;
	}
}
