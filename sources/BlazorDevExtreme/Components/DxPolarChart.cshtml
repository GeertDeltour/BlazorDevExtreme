@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Viz.Charts.DxPolarChartOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxPolarChart() : base("DxPolarChart") { }
	protected override DevExpress.Viz.Charts.DxPolarChartOptions CreateOptions() {
		return new DevExpress.Viz.Charts.DxPolarChartOptions {
			adaptiveLayout = adaptiveLayout,
			argumentAxis = argumentAxis,
			barGroupPadding = barGroupPadding,
			barGroupWidth = barGroupWidth,
			barWidth = barWidth,
			commonAxisSettings = commonAxisSettings,
			commonSeriesSettings = commonSeriesSettings,
			containerBackgroundColor = containerBackgroundColor,
			dataPrepareSettings = dataPrepareSettings,
			equalBarWidth = equalBarWidth,
			legend = legend,
			negativesAsZeroes = negativesAsZeroes,
			resolveLabelOverlapping = resolveLabelOverlapping,
			series = series,
			seriesSelectionMode = seriesSelectionMode,
			seriesTemplate = seriesTemplate,
			tooltip = tooltip,
			useSpiderWeb = useSpiderWeb,
			valueAxis = valueAxis,
			onArgumentAxisClickEnabled = onArgumentAxisClickEnabled,
			onLegendClickEnabled = onLegendClickEnabled,
			onSeriesClickEnabled = onSeriesClickEnabled,
			onSeriesHoverChangedEnabled = onSeriesHoverChangedEnabled,
			onSeriesSelectionChangedEnabled = onSeriesSelectionChangedEnabled,
		};
	}
	protected override Task Init(DevExpress.Viz.Charts.DxPolarChartOptions options) {
return 		DevExpress.Viz.DxPolarChartInterop.Init(dxTarget, options);
	}
	object adaptiveLayout;
	[Parameter]
	object AdaptiveLayout {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetAdaptiveLayout(dxTarget).Result : adaptiveLayout;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetAdaptiveLayout(dxTarget, value);
			} else {
				this.adaptiveLayout = value;
			}
		}
	}
	object argumentAxis;
	[Parameter]
	object ArgumentAxis {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetArgumentAxis(dxTarget).Result : argumentAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetArgumentAxis(dxTarget, value);
			} else {
				this.argumentAxis = value;
			}
		}
	}
	float? barGroupPadding;
	[Parameter]
	float? BarGroupPadding {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetBarGroupPadding(dxTarget).Result : barGroupPadding;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarGroupPadding(dxTarget, value);
			} else {
				this.barGroupPadding = value;
			}
		}
	}
	float? barGroupWidth;
	[Parameter]
	float? BarGroupWidth {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetBarGroupWidth(dxTarget).Result : barGroupWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarGroupWidth(dxTarget, value);
			} else {
				this.barGroupWidth = value;
			}
		}
	}
	float? barWidth;
	[Parameter]
	float? BarWidth {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetBarWidth(dxTarget).Result : barWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetBarWidth(dxTarget, value);
			} else {
				this.barWidth = value;
			}
		}
	}
	object commonAxisSettings;
	[Parameter]
	object CommonAxisSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCommonAxisSettings(dxTarget).Result : commonAxisSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCommonAxisSettings(dxTarget, value);
			} else {
				this.commonAxisSettings = value;
			}
		}
	}
	object commonSeriesSettings;
	[Parameter]
	object CommonSeriesSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetCommonSeriesSettings(dxTarget).Result : commonSeriesSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetCommonSeriesSettings(dxTarget, value);
			} else {
				this.commonSeriesSettings = value;
			}
		}
	}
	string containerBackgroundColor;
	[Parameter]
	string ContainerBackgroundColor {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetContainerBackgroundColor(dxTarget).Result : containerBackgroundColor;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetContainerBackgroundColor(dxTarget, value);
			} else {
				this.containerBackgroundColor = value;
			}
		}
	}
	object dataPrepareSettings;
	[Parameter]
	object DataPrepareSettings {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetDataPrepareSettings(dxTarget).Result : dataPrepareSettings;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetDataPrepareSettings(dxTarget, value);
			} else {
				this.dataPrepareSettings = value;
			}
		}
	}
	bool? equalBarWidth;
	[Parameter]
	bool? EqualBarWidth {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetEqualBarWidth(dxTarget).Result : equalBarWidth;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetEqualBarWidth(dxTarget, value);
			} else {
				this.equalBarWidth = value;
			}
		}
	}
	object legend;
	[Parameter]
	object Legend {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetLegend(dxTarget).Result : legend;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetLegend(dxTarget, value);
			} else {
				this.legend = value;
			}
		}
	}
	bool? negativesAsZeroes;
	[Parameter]
	bool? NegativesAsZeroes {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetNegativesAsZeroes(dxTarget).Result : negativesAsZeroes;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetNegativesAsZeroes(dxTarget, value);
			} else {
				this.negativesAsZeroes = value;
			}
		}
	}
	string resolveLabelOverlapping;
	[Parameter]
	string ResolveLabelOverlapping {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetResolveLabelOverlapping(dxTarget).Result : resolveLabelOverlapping;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetResolveLabelOverlapping(dxTarget, value);
			} else {
				this.resolveLabelOverlapping = value;
			}
		}
	}
	object series;
	[Parameter]
	object Series {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSeries(dxTarget).Result : series;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeries(dxTarget, value);
			} else {
				this.series = value;
			}
		}
	}
	string seriesSelectionMode;
	[Parameter]
	string SeriesSelectionMode {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSeriesSelectionMode(dxTarget).Result : seriesSelectionMode;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeriesSelectionMode(dxTarget, value);
			} else {
				this.seriesSelectionMode = value;
			}
		}
	}
	object seriesTemplate;
	[Parameter]
	object SeriesTemplate {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetSeriesTemplate(dxTarget).Result : seriesTemplate;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetSeriesTemplate(dxTarget, value);
			} else {
				this.seriesTemplate = value;
			}
		}
	}
	object tooltip;
	[Parameter]
	object Tooltip {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetTooltip(dxTarget).Result : tooltip;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetTooltip(dxTarget, value);
			} else {
				this.tooltip = value;
			}
		}
	}
	bool? useSpiderWeb;
	[Parameter]
	bool? UseSpiderWeb {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetUseSpiderWeb(dxTarget).Result : useSpiderWeb;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetUseSpiderWeb(dxTarget, value);
			} else {
				this.useSpiderWeb = value;
			}
		}
	}
	object valueAxis;
	[Parameter]
	object ValueAxis {
		get => isInitialized ? DevExpress.Viz.DxPolarChartInterop.GetValueAxis(dxTarget).Result : valueAxis;
		set {
			if (isInitialized) {
				DevExpress.Viz.DxPolarChartInterop.SetValueAxis(dxTarget, value);
			} else {
				this.valueAxis = value;
			}
		}
	}
	bool? onArgumentAxisClickEnabled;
	[Parameter]
	bool? OnArgumentAxisClickEnabled {
		get => onArgumentAxisClickEnabled;
		set => this.onArgumentAxisClickEnabled = value;
	}
	bool? onLegendClickEnabled;
	[Parameter]
	bool? OnLegendClickEnabled {
		get => onLegendClickEnabled;
		set => this.onLegendClickEnabled = value;
	}
	bool? onSeriesClickEnabled;
	[Parameter]
	bool? OnSeriesClickEnabled {
		get => onSeriesClickEnabled;
		set => this.onSeriesClickEnabled = value;
	}
	bool? onSeriesHoverChangedEnabled;
	[Parameter]
	bool? OnSeriesHoverChangedEnabled {
		get => onSeriesHoverChangedEnabled;
		set => this.onSeriesHoverChangedEnabled = value;
	}
	bool? onSeriesSelectionChangedEnabled;
	[Parameter]
	bool? OnSeriesSelectionChangedEnabled {
		get => onSeriesSelectionChangedEnabled;
		set => this.onSeriesSelectionChangedEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Viz.DxPolarChartInterop.ArgumentAxisClick += DxPolarChart_ArgumentAxisClick;
		DevExpress.Viz.DxPolarChartInterop.LegendClick += DxPolarChart_LegendClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesClick += DxPolarChart_SeriesClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesHoverChanged += DxPolarChart_SeriesHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.SeriesSelectionChanged += DxPolarChart_SeriesSelectionChanged;
	}
	[Parameter]
	Action ArgumentAxisClick { get; set; }
	void DxPolarChart_ArgumentAxisClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			ArgumentAxisClick?.Invoke();
		}
	}
	[Parameter]
	Action LegendClick { get; set; }
	void DxPolarChart_LegendClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			LegendClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesClick { get; set; }
	void DxPolarChart_SeriesClick(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesClick?.Invoke();
		}
	}
	[Parameter]
	Action SeriesHoverChanged { get; set; }
	void DxPolarChart_SeriesHoverChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesHoverChanged?.Invoke();
		}
	}
	[Parameter]
	Action SeriesSelectionChanged { get; set; }
	void DxPolarChart_SeriesSelectionChanged(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SeriesSelectionChanged?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Viz.DxPolarChartInterop.ArgumentAxisClick -= DxPolarChart_ArgumentAxisClick;
		DevExpress.Viz.DxPolarChartInterop.LegendClick -= DxPolarChart_LegendClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesClick -= DxPolarChart_SeriesClick;
		DevExpress.Viz.DxPolarChartInterop.SeriesHoverChanged -= DxPolarChart_SeriesHoverChanged;
		DevExpress.Viz.DxPolarChartInterop.SeriesSelectionChanged -= DxPolarChart_SeriesSelectionChanged;
	}
}
