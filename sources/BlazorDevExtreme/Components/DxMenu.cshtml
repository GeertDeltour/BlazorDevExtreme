@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor
@implements IDisposable
@inherits DxBlazorComponent<DevExpress.Ui.DxMenuOptions>

<div id="@Id" ref="dxTarget"></div>

@functions {
	ElementRef dxTarget;
	public DxMenu() : base("DxMenu") { }
	protected override DevExpress.Ui.DxMenuOptions CreateOptions() {
		return new DevExpress.Ui.DxMenuOptions {
			adaptivityEnabled = adaptivityEnabled,
			hideSubmenuOnMouseLeave = hideSubmenuOnMouseLeave,
			items = items,
			orientation = orientation,
			showFirstSubmenuMode = showFirstSubmenuMode,
			submenuDirection = submenuDirection,
			onSubmenuHiddenEnabled = onSubmenuHiddenEnabled,
			onSubmenuHidingEnabled = onSubmenuHidingEnabled,
			onSubmenuShowingEnabled = onSubmenuShowingEnabled,
			onSubmenuShownEnabled = onSubmenuShownEnabled,
		};
	}
	protected override Task Init(DevExpress.Ui.DxMenuOptions options) {
return 		DevExpress.Ui.DxMenuInterop.Init(dxTarget, options);
	}
	bool? adaptivityEnabled;
	[Parameter]
	bool? AdaptivityEnabled {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetAdaptivityEnabled(dxTarget).Result : adaptivityEnabled;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetAdaptivityEnabled(dxTarget, value);
			} else {
				this.adaptivityEnabled = value;
			}
		}
	}
	bool? hideSubmenuOnMouseLeave;
	[Parameter]
	bool? HideSubmenuOnMouseLeave {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetHideSubmenuOnMouseLeave(dxTarget).Result : hideSubmenuOnMouseLeave;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetHideSubmenuOnMouseLeave(dxTarget, value);
			} else {
				this.hideSubmenuOnMouseLeave = value;
			}
		}
	}
	object items;
	[Parameter]
	object Items {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetItems(dxTarget).Result : items;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetItems(dxTarget, value);
			} else {
				this.items = value;
			}
		}
	}
	string orientation;
	[Parameter]
	string Orientation {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetOrientation(dxTarget).Result : orientation;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetOrientation(dxTarget, value);
			} else {
				this.orientation = value;
			}
		}
	}
	object showFirstSubmenuMode;
	[Parameter]
	object ShowFirstSubmenuMode {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetShowFirstSubmenuMode(dxTarget).Result : showFirstSubmenuMode;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetShowFirstSubmenuMode(dxTarget, value);
			} else {
				this.showFirstSubmenuMode = value;
			}
		}
	}
	string submenuDirection;
	[Parameter]
	string SubmenuDirection {
		get => isInitialized ? DevExpress.Ui.DxMenuInterop.GetSubmenuDirection(dxTarget).Result : submenuDirection;
		set {
			if (isInitialized) {
				DevExpress.Ui.DxMenuInterop.SetSubmenuDirection(dxTarget, value);
			} else {
				this.submenuDirection = value;
			}
		}
	}
	bool? onSubmenuHiddenEnabled;
	[Parameter]
	bool? OnSubmenuHiddenEnabled {
		get => onSubmenuHiddenEnabled;
		set => this.onSubmenuHiddenEnabled = value;
	}
	bool? onSubmenuHidingEnabled;
	[Parameter]
	bool? OnSubmenuHidingEnabled {
		get => onSubmenuHidingEnabled;
		set => this.onSubmenuHidingEnabled = value;
	}
	bool? onSubmenuShowingEnabled;
	[Parameter]
	bool? OnSubmenuShowingEnabled {
		get => onSubmenuShowingEnabled;
		set => this.onSubmenuShowingEnabled = value;
	}
	bool? onSubmenuShownEnabled;
	[Parameter]
	bool? OnSubmenuShownEnabled {
		get => onSubmenuShownEnabled;
		set => this.onSubmenuShownEnabled = value;
	}
	protected override async Task OnInitAsync() {
		await base.OnInitAsync();
		DevExpress.Ui.DxMenuInterop.SubmenuHidden += DxMenu_SubmenuHidden;
		DevExpress.Ui.DxMenuInterop.SubmenuHiding += DxMenu_SubmenuHiding;
		DevExpress.Ui.DxMenuInterop.SubmenuShowing += DxMenu_SubmenuShowing;
		DevExpress.Ui.DxMenuInterop.SubmenuShown += DxMenu_SubmenuShown;
	}
	[Parameter]
	Action SubmenuHidden { get; set; }
	void DxMenu_SubmenuHidden(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SubmenuHidden?.Invoke();
		}
	}
	[Parameter]
	Action SubmenuHiding { get; set; }
	void DxMenu_SubmenuHiding(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SubmenuHiding?.Invoke();
		}
	}
	[Parameter]
	Action SubmenuShowing { get; set; }
	void DxMenu_SubmenuShowing(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SubmenuShowing?.Invoke();
		}
	}
	[Parameter]
	Action SubmenuShown { get; set; }
	void DxMenu_SubmenuShown(object sender, JQueryEventArgs e) {
		if (e.Identifier == Id) {
			SubmenuShown?.Invoke();
		}
	}
	public void Dispose() {
		DevExpress.Ui.DxMenuInterop.SubmenuHidden -= DxMenu_SubmenuHidden;
		DevExpress.Ui.DxMenuInterop.SubmenuHiding -= DxMenu_SubmenuHiding;
		DevExpress.Ui.DxMenuInterop.SubmenuShowing -= DxMenu_SubmenuShowing;
		DevExpress.Ui.DxMenuInterop.SubmenuShown -= DxMenu_SubmenuShown;
	}
}
